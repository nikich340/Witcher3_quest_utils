    InterpCurve:
      .extends: none
      .adds:
        interpMethod: EInterpMethodType

    InterpCurveF:
      .extends: InterpCurve
      .adds:
        points: array<InterpCurvePointF>

    InterpCurveV:
      .extends: InterpCurve
      .adds:
        points: array<InterpCurvePointV>

    InterpCurvePoint:
      .extends: none
      .adds:
        inVal: float
        interpMode: EInterpCurveMode

    InterpCurvePointF:
      .extends: InterpCurvePoint
      .adds:
        outVal: float
        arriveTangent: float
        leaveTangent: float

    InterpCurvePointV:
      .extends: InterpCurvePoint
      .adds:
        outVal: Vector
        arriveTangent: Vector
        leaveTangent: Vector

    CStaticCameraArea:
      .extends: CEntity
      .adds:
        cameraTag: name
        onlyForPlayer: bool
        activatorTag: name

    W3Campfire:
      .extends: CGameplayEntity
      .adds:
        dontCheckForNPCs: bool

    W3EnvironmentManager:
      .extends: none
      .adds:
        m_envId: int
        lunation: int
        dayStart: int
        nightStart: int
        redMoonPeriod: int
        hourToSwitchEnv: int

    W3FireSource:
      .extends: CGameplayEntity
      .adds:
        glComponent: CGameplayLightComponent

    W3GameLog:
      .extends: none
      .adds:
        COLOR_GOLD_BEGIN: string
        COLOR_GOLD_END: string
        cachedCombatMessages: array<SCachedCombatMessage>

    W3GamerProfile:
      .extends: none
      .adds:
        statistics: array<SStatistic>
        achievementDefinitions: array<SAchievement>

    IGlobalEventScriptedListener:
      .extends: none

    CInGameConfigBufferedWrapper:
      .extends: none
      .adds:
        inGameConfig: CInGameConfigWrapper
        buffer: array<SInGameConfigBufferedEntry>

    CReactionRandomCondition:
      .extends: CReactionScriptedCondition
      .adds:
        percentageChance: int

    CSpawner:
      .extends: CEntity
      .adds:
        entityTemplate: CEntityTemplate
        count: int
        immortalityMode: EActorImmortalityMode
        attitudeOverride: bool
        attitudeToPlayer: EAIAttitude
        hostileSpawnerTag: name
        spawnTags: array<name>
        respawn: bool
        respawnDelay: float
        initialHealth: int
        spawnAnimation: EExplorationMode
        spawnedNPCs: array<CNewNPC>
        respawnTime: array<EngineTime>
        respawnNeeded: array<bool>

    CTestTrigger:
      .extends: CGameplayEntity
      .adds:
        entryTime: float
        timerInterval: float

    W3KillTestTrigger:
      .extends: CGameplayEntity
      .adds:
        entered: Bool
        actors: array<CActor>
        entityTemplate: CEntityTemplate

    W2BalanceCalc:
      .extends: none
      .adds:
        abilities: array<name>
        petards: array<SItemUniqueId>
        cost: float
        statVitality: float
        statCurrentVitality: float
        statEssence: float
        statCurrentEssence: float
        statStamina: float
        statCurrentStamina: float
        statFocus: float
        statToxicity: float
        statMorale: float
        statSickness: float
        statParryChance: float
        statDodgeChance: float
        statVitalityRegen: float
        statEssenceRegen: float
        statStaminaRegen: float
        statFocusRegen: float
        statToxicityRegen: float
        statMoraleRegen: float
        statSicknessRegen: float
        statAttackPower: float
        statSpellPower: float
        statEffectDuration: float
        statVitalityDmg: float
        statEssenceDmg: float
        statSpellDmg: float
        statRange: float
        statRadius: float
        statPhysicalRes: float
        statFireRes: float
        statFrostRes: float
        statShockRes: float
        statPoisonRes: float
        statBleedingRes: float
        statIncinerationRes: float
        costVitality: float
        costEssence: float
        costStamina: float
        costFocus: float
        costToxicity: float
        costMorale: float
        costDrunkenness: float
        costSickness: float
        costParryChance: float
        costDodgeChance: float
        costVitalityRegen: float
        costEssenceRegen: float
        costStaminaRegen: float
        costFocusRegen: float
        costToxicityRegen: float
        costMoraleRegen: float
        costDrunkennessRegen: float
        costSicknessRegen: float
        costAttackPower: float
        costSpellPower: float
        costEffectDuration: float
        costVitalityDmg: float
        costEssenceDmg: float
        costSpellDmg: float
        costRange: float
        costRadius: float
        costPhysicalRes: float
        costFireRes: float
        costFrostRes: float
        costShockRes: float
        costPoisonRes: float
        costBleedingRes: float
        costIncinerationRes: float
        costconstVitality: float
        costconstEssence: float
        costconstStamina: float
        costconstFocus: float
        costconstToxicity: float
        costconstMorale: float
        costconstDrunkenness: float
        costconstSickness: float
        costconstParryChance: float
        costconstDodgeChance: float
        costconstVitalityRegen: float
        costconstEssenceRegen: float
        costconstStaminaRegen: float
        costconstFocusRegen: float
        costconstToxicityRegen: float
        costconstMoraleRegen: float
        costconstDrunkennessRegen: float
        costconstSicknessRegen: float
        costconstAttackPower: float
        costconstSpellPower: float
        costconstEffectDuration: float
        costconstVitalityDmg: float
        costconstEssenceDmg: float
        costconstSpellDmg: float
        costconstRange: float
        costconstRadius: float
        costconstPhysicalRes: float
        costconstFireRes: float
        costconstFrostRes: float
        costconstShockRes: float
        costconstPoisonRes: float
        costconstBleedingRes: float
        costconstIncinerationRes: float

    W3ProjectileShooterTest:
      .extends: CActor
      .adds:
        projectileTemplate: CEntityTemplate
        targetTag: name
        frequency: float

    ARDebugCameraRot:
      .extends: ICustomCameraScriptedPivotRotationController

    ARDebugCameraDist:
      .extends: ICustomCameraScriptedPivotDistanceController

    W3DebugScriptBehaviorToolComponent:
      .extends: CSpriteComponent

    CBaseAICombatStorage:
      .extends: IScriptable
      .adds:
        isAttacking: bool
        isCharging: bool
        isTaunting: bool
        isShooting: bool
        isAiming: bool
        isInImportantAnim: bool
        preCombatWarning: bool
        atackTimeStamp: float
        tauntTimeStamp: float
        CSArray: array<CriticalStateStruct>

    CHumanAICombatStorage:
      .extends: CBaseAICombatStorage
      .adds:
        parryCount: int
        activeStyle: EBehaviorGraph
        preferedStyle: EBehaviorGraph
        leaveCurrentStyle: bool
        processingItems: bool
        processingRequiresIdle: bool
        mutlipleProjectiles: array<W3AdvancedProjectile>
        currProjectile: W3AdvancedProjectile
        protectedByQuen: bool
        followerAttackCooldown: float
        followerKeepDistanceToPlayer: bool
        isAFollower: bool

    CBossAICombatStorage:
      .extends: CHumanAICombatStorage
      .adds:
        isLightbringerAvailable: bool
        isMeteoritesAvailable: bool
        isIceSpikesAvailable: bool
        isBlinkComboAvailable: bool
        isSpecialAttackAvailable: bool
        isParryAvailable: bool
        isSiphonAvailable: bool
        isDodgeAvailable: bool
        isStaminaRegenAvailable: bool
        isPhaseChangeAvailable: bool
        inInSpecialAttack: bool

    CExtendedAICombatStorage:
      .extends: CBaseAICombatStorage
      .adds:
        attackInfos: array<AttackInfo>

    CArchesporeAICombatStorage:
      .extends: IScriptable
      .adds:
        myBaseEntities: array<CGameplayEntity>
        noBulbAreas: array<CAreaComponent>
        currentlyUsedBase: CGameplayEntity
        wasInitialized: bool
        manualBulbCleanup: bool

    CAIStorageReactionData:
      .extends: IScriptable
      .adds:
        TAUNTS_TO_BE_ALARMED: int
        alarmedTimeStamp: float
        tauntCounter: int
        lastTauntTimeStamp: float
        temporaryHostileActors: array<CActor>

    CBTEnumBehaviorGraph:
      .extends: IBehTreeValueEnum
      .adds:
        value: EBehaviorGraph

    CBTEnumMoveType:
      .extends: IBehTreeValueEnum
      .adds:
        value: EMoveType

    CBTEnumCriticalState:
      .extends: IBehTreeValueEnum
      .adds:
        value: ECriticalStateType

    CBTEnumHitReactionType:
      .extends: IBehTreeValueEnum
      .adds:
        value: EHitReactionType

    CBTEnumHitReactionSide:
      .extends: IBehTreeValueEnum
      .adds:
        value: EHitReactionSide

    CBTEnumHitReactionDirection:
      .extends: IBehTreeValueEnum
      .adds:
        value: EHitReactionDirection

    CBTEnumAttackSwingType:
      .extends: IBehTreeValueEnum
      .adds:
        value: EAttackSwingType

    CBTEnumAttackSwingDriection:
      .extends: IBehTreeValueEnum
      .adds:
        value: EAttackSwingDirection

    CHorseTagAIParameters:
      .extends: ICustomValAIParameters
      .adds:
        preferedHorseTag: name

    SpawnOnHorseEffector:
      .extends: IBehTreeOnSpawnEffector
      .adds:
        mountOnSpawned: CBehTreeValBool

    SetNPCTypeEffector:
      .extends: IBehTreeOnSpawnEffector
      .adds:
        groupType: CBehTreeValInt

    IBehTreeHLTaskDefinition:
      .extends: IBehTreeTaskDefinition

    IBehTreeReactionTaskDefinition:
      .extends: IBehTreeTaskDefinition

    IBehTreeFollowerTaskDefinition:
      .extends: IBehTreeTaskDefinition

    W3BehTreeValNameArray:
      .extends: IScriptable
      .adds:
        nameArray: array<name>

    CSpawnTreeInitializerCarryItemWanderAI:
      .extends: ISpawnTreeInitializerIdleSmartAI

    CAICarryingItems:
      .extends: CAIWanderTree
      .adds:
        params: CAICarryingItemsParams

    CAICarryingItemsParams:
      .extends: CAINpcWanderParams
      .adds:
        storePointTag: name
        carryingArea: EntityHandle
        dropItemOnDeactivation: bool

    CAIChatsInAPTree:
      .extends: CAISubTree

    CBTTaskCanUseChatScene:
      .extends: IBehTreeTask

    CBTTaskCanUseChatSceneDef:
      .extends: IBehTreeReactionTaskDefinition

    CBTTaskIsAtWork:
      .extends: IBehTreeTask

    CBTTaskIsAtWorkDef:
      .extends: IBehTreeReactionTaskDefinition

    IAIBaseAction:
      .extends: IAIActionTree
      .adds:
        enterExplorationOnStart: bool

    CAIFollowAction:
      .extends: IAIBaseAction
      .adds:
        params: CAIFollowParams

    CAIFollowParams:
      .extends: IAIActionParameters
      .adds:
        targetTag: CName
        moveType: EMoveType
        keepDistance: bool
        followDistance: float
        moveSpeed: float
        followTargetSelection: bool
        teleportToCatchup: bool
        cachupDistance: float
        rotateToWhenAtTarget: bool

    CAIFollowSideBySideAction:
      .extends: CAIFollowAction
      .adds:
        useCustomSteering: bool
        customSteeringGraph: CMoveSteeringBehavior

    CAIRiderFollowAction:
      .extends: IRiderActionTree
      .adds:
        params: CAIRiderFollowActionParams

    CAIRiderFollowActionParams:
      .extends: IRiderActionParameters
      .adds:
        targetTag: CName
        moveType: EMoveType
        keepDistance: bool
        followDistance: float
        moveSpeed: float
        followTargetSelection: bool
        matchRiderMountStatus: bool

    CAIRiderFollowSideBySideAction:
      .extends: IRiderActionTree
      .adds:
        params: CAIRiderFollowSideBySideActionParams

    CAIRiderFollowSideBySideActionParams:
      .extends: CAIRiderFollowActionParams
      .adds:
        useCustomSteering: bool
        customSteeringGraph: CMoveSteeringBehavior
        horseCustomSteeringGraph: CMoveSteeringBehavior

    CAIHorseDoNothingAction:
      .extends: IAIActionTree

    CAIDoNothingAction:
      .extends: IAIActionTree

    CAIMoveAlongPathAction:
      .extends: IAIBaseAction
      .adds:
        params: CAIMoveAlongPathParams

    CAIMoveAlongPathParams:
      .extends: IAIActionParameters
      .adds:
        pathTag: CName
        upThePath: bool
        fromBeginning: bool
        pathMargin: float
        moveTypeBeforePath: EMoveType
        moveType: EMoveType
        moveSpeed: float
        steeringGraph: CMoveSteeringBehavior
        arrivalDistance: Float
        rotateAfterReachStart: bool
        useExplorations: bool
        dontCareAboutNavigable: bool
        tolerance: float

    CAIMoveAlongPathWithCompanionAction:
      .extends: CAIMoveAlongPathAction

    CAIMoveAlongPathWithCompanionParams:
      .extends: CAIMoveAlongPathParams
      .adds:
        companionTag: CName
        maxDistance: float
        minDistance: float
        companionOffset: float
        progressWhenCompanionIsAhead: bool
        progressOnlyWhenCompanionIsAhead: bool
        matchCompanionSpeed: bool
        allowLeaderToRideOff: bool
        moveTypeAfterMaxDistance: EMoveType

    CAIMoveAlongPathAwareOfTailAction:
      .extends: CAIMoveAlongPathAction

    CAIMoveAlongPathAwareOfTailParams:
      .extends: CAIMoveAlongPathParams
      .adds:
        tailTag: CName
        startMovementDistance: float
        stopDistance: float

    CAIRaceAlongPathAction:
      .extends: CAIMoveAlongPathAction

    CAIRaceAlongPathParams:
      .extends: CAIMoveAlongPathParams

    CAIRiderMoveAlongPathAction:
      .extends: IRiderActionTree
      .adds:
        params: CAIRiderMoveAlongPathActionParams

    CAIRiderMoveAlongPathActionParams:
      .extends: IRiderActionParameters
      .adds:
        pathTag: CName
        upThePath: bool
        fromBeginning: bool
        pathMargin: float
        moveTypeBeforePath: EMoveType
        moveType: EMoveType
        moveSpeed: float
        steeringGraph: CMoveSteeringBehavior
        arrivalDistance: Float
        rotateAfterReachStart: bool
        useExplorations: bool
        dontCareAboutNavigable: bool
        tolerance: float

    CAIRiderMoveAlongPathWithCompanionAction:
      .extends: CAIRiderMoveAlongPathAction

    CAIRiderMoveAlongPathWithCompanionActionParams:
      .extends: CAIRiderMoveAlongPathActionParams
      .adds:
        companionTag: CName
        maxDistance: float
        minDistance: float
        companionOffset: float
        progressWhenCompanionIsAhead: bool
        progressOnlyWhenCompanionIsAhead: bool
        matchCompanionSpeed: bool
        allowLeaderToRideOff: bool
        moveTypeAfterMaxDistance: EMoveType

    CAIRiderRaceAlongPathAction:
      .extends: IRiderActionTree
      .adds:
        params: CAIRiderRaceAlongPathActionParams

    CAIRiderRaceAlongPathActionParams:
      .extends: IRiderActionParameters
      .adds:
        pathTag: CName
        upThePath: bool
        fromBeginning: bool
        pathMargin: float
        tolerance: float
        moveTypeBeforePath: EMoveType
        moveType: EMoveType
        moveSpeed: float
        steeringGraph: CMoveSteeringBehavior
        arrivalDistance: Float
        rotateAfterReachStart: Bool
        dontCareAboutNavigable: bool

    CAIRiderRideHorseAction:
      .extends: IRiderActionTree

    ISailorActionTree:
      .extends: IAIActionTree

    ISailorActionParameters:
      .extends: IAIActionParameters

    CAISailorMountBoatAction:
      .extends: ISailorActionTree
      .adds:
        params: CAISailorMountBoatActionParams

    CAISailorMountBoatActionParams:
      .extends: ISailorActionParameters
      .adds:
        boatTag: CName

    CAISailorDismountBoatAction:
      .extends: ISailorActionTree
      .adds:
        teleportHere: CName

    CAISailorMoveToAction:
      .extends: ISailorActionTree
      .adds:
        params: CAISailorMoveToActionParams

    CAISailorMoveToActionParams:
      .extends: ISailorActionParameters
      .adds:
        boatTag: CName
        entityTag: CName

    CAISailorMoveAlongPathAction:
      .extends: ISailorActionTree
      .adds:
        params: CAISailorMoveAlongPathActionParams

    CAISailorMoveAlongPathActionParams:
      .extends: ISailorActionParameters
      .adds:
        boatTag: CName
        pathTag: CName
        upThePath: bool
        startFromBeginning: bool

    CAISailorRaceAlongPathAction:
      .extends: ISailorActionTree
      .adds:
        params: CAISailorRaceAlongPathActionParams

    CAISailorRaceAlongPathActionParams:
      .extends: ISailorActionParameters
      .adds:
        boatTag: CName
        pathTag: CName
        upThePath: bool
        startFromBeginning: bool

    CAIMoveToPoint:
      .extends: IAIBaseAction
      .adds:
        params: CAIMoveToPointParams

    CAIMoveToPointParams:
      .extends: IAIActionParameters
      .adds:
        maxDistance: float
        moveSpeed: float
        moveType: EMoveType
        destinationPosition: Vector
        destinationHeading: float
        maxIterationsNumber: int
        useTimeout: bool
        timeoutValue: float

    CAIMoveToAction:
      .extends: IAIBaseAction
      .adds:
        params: CAIMoveToParams

    CAIMoveToParams:
      .extends: IAIActionParameters
      .adds:
        maxDistance: float
        moveSpeed: float
        moveType: EMoveType
        targetTag: CName
        rotateAfterwards: bool
        tolerance: float

    CAIMoveToActionAwareOfTail:
      .extends: IAIBaseAction
      .adds:
        params: CAIMoveToActionAwareOfTailParams

    CAIMoveToActionAwareOfTailParams:
      .extends: CAIMoveToParams
      .adds:
        tailTag: CName
        startMovementDistance: float
        stopDistance: float

    CAIRiderMoveToAction:
      .extends: IRiderActionTree
      .adds:
        params: CAIRiderMoveToActionParams

    CAIRiderMoveToActionParams:
      .extends: IRiderActionParameters
      .adds:
        maxDistance: float
        moveSpeed: float
        moveType: EMoveType
        targetTag: CName
        rotateAfterwards: bool

    CAIPlayAnimationStateAction:
      .extends: IAIActionTree
      .adds:
        eventStateName: CName

    CAIPlayAnimationStateParams:
      .extends: IAIActionParameters
      .adds:
        eventStateName: CName

    CAIPlayAnimationSlotAction:
      .extends: IAIActionTree
      .adds:
        animName: CName
        slotName: CName
        blendInTime: float
        blendOutTime: float

    IAIFormationActionTree:
      .extends: IAIBaseAction
      .adds:
        formation: CFormation

    CAIFormationFollowActionTree:
      .extends: IAIFormationActionTree
      .adds:
        leaderTag: name

    CAIFormationLeadActionTree:
      .extends: IAIFormationActionTree
      .adds:
        leaderSteering: CMoveSteeringBehavior
        reshapeOnMoveAction: Bool
        leadSubtree: IAIActionTree

    CAIFinishAnimationsAction:
      .extends: IAIActionTree

    CAIBreakAnimationsAction:
      .extends: IAIActionTree

    CAIPlayVoiceSetAction:
      .extends: IAIActionTree
      .adds:
        voiceSet: string
        priority: int

    CAIPlayVoiceSetParams:
      .extends: IAIActionParameters
      .adds:
        voiceSet: string
        priority: int

    CAIRotateToAction:
      .extends: IAIActionTree
      .adds:
        targetTag: CName
        keepRotating: bool

    CAIWalkToTargetWaitAction:
      .extends: IAIActionTree
      .adds:
        params: CAIWalkToTargetWaitParams

    CAIWalkToTargetWaitParams:
      .extends: IAIActionParameters
      .adds:
        tag: CName
        maxDistance: float
        moveSpeed: float
        moveType: EMoveType
        waitForTag: CName
        timeout: float
        testDistance: float

    CAIActionSequenceParams:
      .extends: IAIActionParameters
      .adds:
        actions: array<IAIActionTree>

    CAIActionLoop:
      .extends: IAIActionTree
      .adds:
        loopCount: int
        loopedAction: IAIActionTree

    CAISyannaCompanionBehavior:
      .extends: IAIBaseAction
      .adds:
        params: CAISyannaCompanionBehaviorParams
        useCustomSteering: bool
        customSteeringGraph: CMoveSteeringBehavior

    CAISyannaCompanionBehaviorParams:
      .extends: IAIActionParameters
      .adds:
        targetTag: CName
        moveType: EMoveType
        keepDistance: bool
        followDistance: float
        moveSpeed: float
        followTargetSelection: bool
        teleportToCatchup: bool
        cachupDistance: float
        rotateToWhenAtTarget: bool
        idleTimeToPlaySlotAnim: float
        slotAnimCooldown: float
        slotName: name
        animName_1_start: CName
        animName_1_loop: CName
        animName_1_stop: CName
        animName_2_start: CName
        animName_2_loop: CName
        animName_2_stop: CName
        animName_3_start: CName
        animName_3_loop: CName
        animName_3_stop: CName
        animName_4_start: CName
        animName_4_loop: CName
        animName_4_stop: CName

    CAIActionPoke:
      .extends: IAIActionTree
      .adds:
        pokeEvent: name
        pokableScriptedAction: IAIActionTree

    CAIRiderActionSequence:
      .extends: IRiderActionTree
      .adds:
        actions: array<IRiderActionTree>

    CAIRiderActionPoke:
      .extends: IRiderActionTree
      .adds:
        pokeEvent: name
        pokableScriptedAction: IRiderActionTree

    CAIWalkToTargetWaitingForActorAction:
      .extends: IAIActionTree
      .adds:
        tag: CName
        maxDistance: float
        moveSpeed: float
        moveType: EMoveType
        waitForTag: CName
        timeout: float
        testDistance: float

    CAIPlayEffectAction:
      .extends: IAIActionTree
      .adds:
        effectName: CName

    CAIPlayEffectParams:
      .extends: IAIActionParameters
      .adds:
        effectName: CName

    CAIExecuteAttackAction:
      .extends: IAIActionTree
      .adds:
        attackParameter: EAttackType

    CAIExecuteRangeAttackAction:
      .extends: IAIActionTree
      .adds:
        attackParameter: EAttackType
        targetTag: name
        projectileName: name

    CAIDrawTorchAction:
      .extends: IAIActionTree

    CAIHideTorchAction:
      .extends: IAIActionTree

    CAIAttachToCurve:
      .extends: IAIActionTree
      .adds:
        animationName: name
        curveTag: name
        curveDummyName: string
        blendInTime: float
        slotAnimation: name

    CAIWaitForChangingWeaponEndAction:
      .extends: IAIActionTree

    IActionDecorator:
      .extends: IAIActionTree
      .adds:
        scriptedAction: IAIActionTree

    CAIGoToExplorationActionDecorator:
      .extends: IActionDecorator
      .adds:
        sheathWeaponsOnStart: bool

    CAIPlayAnimationUpperBodySlotAction:
      .extends: IActionDecorator
      .adds:
        animName: CName
        interruptScriptedActionOnSlotAnimEnd: bool

    CAIHandsBehindBackOverlayActionTree:
      .extends: IActionDecorator
      .adds:
        duration: float
        interruptScriptedActionOnDurationEnd: bool

    CAICombatModeActionDecorator:
      .extends: IActionDecorator
      .adds:
        drawWeaponOnStart: bool
        LeftItemType: name
        RightItemType: name
        changeBehaviorGraphOnStart: bool
        behGraph: EBehaviorGraph
        changeBahviorGraphToExplorationOnDeacitvate: bool
        forceCombatModeOnPLAYER: bool

    CAIInterruptableByHitAction:
      .extends: IActionDecorator
      .adds:
        shouldForceHitReaction: bool
        hitReactionType: EHitReactionType
        hitReactionSide: EHitReactionSide
        hitReactionDirection: EHitReactionDirection
        hitSwingType: EAttackSwingType
        hitSwingDirection: EAttackSwingDirection

    CAIInterruptOnHitOrOnCriticalEffect:
      .extends: IActionDecorator
      .adds:
        completeOnHit: bool
        completeOnCriticalEffect: bool

    CAIkLookAtActionDecorator:
      .extends: IActionDecorator
      .adds:
        lookAtNodeTag: name

    CAIChangeBehaviorGraphDecorator:
      .extends: IActionDecorator
      .adds:
        graphWhenActivate: name
        graphWhenDeactivate: name

    CAIScaredActionDecorator:
      .extends: IActionDecorator

    CAICustomSpawnActionDecorator:
      .extends: IActionDecorator

    IPlayerActionDecorator:
      .extends: IAIActionTree
      .adds:
        scriptedAction: CAITree

    IPlayerRiderActionDecorator:
      .extends: IAIActionTree
      .adds:
        scriptedAction: IRiderActionTree

    CAIPlayerActionDecorator:
      .extends: IPlayerActionDecorator
      .adds:
        interruptOnInput: bool

    CAIPlayerRiderActionDecorator:
      .extends: IPlayerRiderActionDecorator
      .adds:
        interruptOnInput: bool

    CAIAnimalBase:
      .extends: CAIBaseTree
      .adds:
        params: CAIAnimalDefaults

    CAIAnimalDefaults:
      .extends: CAIDefaults
      .adds:
        combatTree: CAIAnimalCombat
        idleTree: CAIIdleTree
        idleDecoratorTree: CAIMonsterIdleDecorator
        charmedTree: CAIAnimalCharmed
        deathTree: CAIAnimalDeath
        isAnimal: bool

    CAIAnimalQuestDefaults:
      .extends: CAIDefaults
      .adds:
        combatTree: CAICombatTree
        idleTree: CAIIdleTree
        deathTree: CAIDeathTree

    CAIHorseDefaults:
      .extends: CAIAnimalDefaults
      .adds:
        isMount: Bool
        canMoveOutOfAWay: Bool

    CAIRaceHorseDefaults:
      .extends: CAIHorseDefaults

    CAIWildHorseDefaults:
      .extends: CAIHorseDefaults
      .adds:
        isWildHorse: bool

    CAIDeerLeaderDefaults:
      .extends: CAIDeerDefaults

    CAIDeerDefaults:
      .extends: CAIAnimalDefaults

    CAIHareDefaults:
      .extends: CAIAnimalDefaults

    CAIDogDefaults:
      .extends: CAIAnimalDefaults

    CAIGoatDefaults:
      .extends: CAIAnimalDefaults

    CAIGoatQuestDefaults:
      .extends: CAIAnimalDefaults

    CAIPigDefaults:
      .extends: CAIAnimalDefaults

    CAISheepDefaults:
      .extends: CAIAnimalDefaults

    CAIGooseDefaults:
      .extends: CAIAnimalDefaults

    CAICowDefaults:
      .extends: CAIAnimalDefaults

    CAIChickenDefaults:
      .extends: CAIAnimalDefaults

    CAIRoosterDefaults:
      .extends: CAIAnimalDefaults

    CAICatDefaults:
      .extends: CAIAnimalDefaults

    CAIAnimalDeath:
      .extends: CAINpcDeath

    CAIAnimalDeathParams:
      .extends: CAINpcDeathParams

    CAIAnimalCombat:
      .extends: CAICombatTree
      .adds:
        chanceOfBeingScared: float
        chanceOfBeingScaredRerollTime: float
        scaredIfTargetRuns: bool
        maxTolerableTargetDistance: float
        maxFleeRunDistance: float
        maxFleeWalkDistance: float
        stopFleeingDistance: float
        fleeInGroup: bool
        neutralIsDanger: bool

    CAIAnimalCombatFlee:
      .extends: CAICombatTree

    CAIAnimalCombatCurious:
      .extends: CAICombatTree

    CAIHorseShakeRider:
      .extends: CAICombatTree

    CAIAnimalQuestCombatParams:
      .extends: CAICombatParameters

    CAIAnimalQuestCombat:
      .extends: CAIAnimalCombat

    CAIAnimalQuestScaredBehaviour:
      .extends: CAICombatQuestTree

    CAIAnimalCombatDog:
      .extends: CAIAnimalCombat

    CAIAnimalCombatPig:
      .extends: CAIAnimalCombat

    CAIAnimalCombatRooster:
      .extends: CAIAnimalCombat

    CAIAnimalCombatGoose:
      .extends: CAIAnimalCombat

    CAIAnimalCombatCat:
      .extends: CAIAnimalCombat

    CAIAnimalCombatCow:
      .extends: CAIAnimalCombat

    CAIAnimalCombatGoat:
      .extends: CAIAnimalCombat

    CAIAnimalCombatSheep:
      .extends: CAIAnimalCombat

    CAIAnimalCombatHare:
      .extends: CAIAnimalCombat

    CAIAnimalCombatDeer:
      .extends: CAIAnimalCombat

    CAIAnimalCombatHorse:
      .extends: CAIAnimalCombat
      .adds:
        shakeRiderTree: CAIHorseShakeRider

    CAIAnimalCharmed:
      .extends: CAIIdleTree
      .adds:
        charmedGotoDistance: float

    CAIHorseCharmed:
      .extends: CAIAnimalCharmed

    CAICowCharmed:
      .extends: CAIAnimalCharmed

    CAnimalIdleDecoratorTree:
      .extends: CAIMainTree

    CHorseIdleDecoratorTree:
      .extends: CAIMonsterIdleDecorator
      .adds:
        actionPointSelector: CHorseParkingActionPointSelector
        packName: name

    CAIMainTree:
      .extends: CAITree

    CAIIdleTree:
      .extends: CAIMainTree

    CAIWanderTree:
      .extends: CAIIdleTree
      .adds:
        wanderMoveSpeed: float
        wanderMoveType: EMoveType
        wanderMaxDistance: float

    CAIIdleDecoratorTree:
      .extends: CAISubTree

    CAICombatTree:
      .extends: CAIMainTree

    CAIAxiiTree:
      .extends: CAIMainTree

    CAITauntTree:
      .extends: CAIMainTree

    CAICombatQuestTree:
      .extends: CAIMainTree

    CAICombatDecoratorTree:
      .extends: CAIMainTree

    CAIDeathTree:
      .extends: CAIMainTree

    CAICustomMainTree:
      .extends: CAIMainTree

    CAIReactionTree:
      .extends: CAIMainTree

    CAISoftReactionTree:
      .extends: CAIMainTree

    CAIFleeTree:
      .extends: CAISubTree

    CAISubTree:
      .extends: CAITree

    CAIActionTree:
      .extends: CAISubTree

    CAICombatActionTree:
      .extends: CAIActionTree

    CAIRidingSubTree:
      .extends: CAISubTree

    CAIRetreatTree:
      .extends: CAISubTree

    CAIKeepDistanceTree:
      .extends: CAISubTree
      .adds:
        moveType: EMoveType

    CAIRunToGAKnockdown:
      .extends: CAIKeepDistanceTree

    CAIMainParameters:
      .extends: CAIParameters

    CAIIdleParameters:
      .extends: CAIMainParameters

    CAICombatDecoratorParameters:
      .extends: CAIMainParameters

    CAICombatParameters:
      .extends: CAIMainParameters

    CAIAxiiParameters:
      .extends: CAIMainParameters

    CAITauntParameters:
      .extends: CAIMainParameters

    CAIDeathParameters:
      .extends: CAIMainParameters

    CAIReactionsParameters:
      .extends: CAIMainParameters

    CAISoftReactionsParameters:
      .extends: CAIMainParameters

    CAICustomMainParameters:
      .extends: CAIMainParameters

    CAISubTreeParameters:
      .extends: CAIParameters

    CAIActionTreeParameters:
      .extends: CAISubTreeParameters

    CAICombatActionParameters:
      .extends: CAIActionTreeParameters

    CAIWanderParameters:
      .extends: CAIIdleParameters

    CAIRidingSubTreeParameters:
      .extends: CAISubTreeParameters

    CAIFleeParameters:
      .extends: CAISubTreeParameters

    CAIMultiRedefinitionParameters:
      .extends: CAIRedefinitionParameters
      .adds:
        subParams: array<CAIRedefinitionParameters>

    CAIIdleRedefinitionParameters:
      .extends: CAIRedefinitionParameters
      .adds:
        idleTree: CAIIdleTree

    CAIRiderIdleRedefinitionParameters:
      .extends: CAIRedefinitionParameters
      .adds:
        riderIdleTree: CAIRiderIdle

    CAIStartingBehaviorParameters:
      .extends: CAIRedefinitionParameters
      .adds:
        startingBehavior: IAIActionTree
        startingBehaviorPriority: int

    CAIRiderStartingBehaviorParameters:
      .extends: CAIRedefinitionParameters
      .adds:
        startingBehavior: IRiderActionTree
        startingBehaviorPriority: int

    CAICombatDecoratorRedefinitionParameters:
      .extends: CAIRedefinitionParameters
      .adds:
        combatDecorator: CAICombatDecoratorTree

    CAINPCGroupTypeRedefinition:
      .extends: CAIRedefinitionParameters
      .adds:
        npcGroupType: ENPCGroupType

    IAICustomActionTree:
      .extends: IAIActionTree

    CAICarryMiscreantActionTree:
      .extends: IAICustomActionTree
      .adds:
        attachmentBone: name
        miscreantName: name
        behaviorGraph: name
        cryStartEventName: name
        cryStopEventName: name
        carrySubAction: IAIActionTree

    CAIMiscreantAttachActionTree:
      .extends: IAICustomActionTree
      .adds:
        attachmentBone: name
        miscreantName: name
        behaviorGraph: name

    CAIMiscreantCryActionTree:
      .extends: IAICustomActionTree
      .adds:
        miscreantName: name

    CAISorceressAttacksBoidActionTree:
      .extends: IAICustomActionTree
      .adds:
        animName: name

    CAISorceressMagicBubbleActionTree:
      .extends: IAICustomActionTree
      .adds:
        magicBubbleResourceName: name
        deactivate: bool
        playAnim: bool

    CAISorceressFireballCastActionTree:
      .extends: IAICustomActionTree
      .adds:
        targetTag: name

    CAISorceressLightningCastActionTree:
      .extends: IAICustomActionTree
      .adds:
        targetTag: name

    CAISorceressTeleportActionTree:
      .extends: IAICustomActionTree
      .adds:
        targetTag: name

    CAIVampireTeleportActionTree:
      .extends: IAICustomActionTree
      .adds:
        targetTag: name

    CAISwarmTeleportAttackActionTree:
      .extends: IAICustomActionTree
      .adds:
        targetTag: name

    CAIFrostAttackActionTree:
      .extends: IAICustomActionTree
      .adds:
        targetTag: name
        duration: float
        clampDurationWhenTargetReached: float

    CAIForceJumpAttackActionTree:
      .extends: IAICustomActionTree
      .adds:
        targetTag: name

    CAIGryphonCrashActionTree:
      .extends: IAICustomActionTree

    CAIShootActionTree:
      .extends: IAICustomActionTree
      .adds:
        targetTag: name
        multipleTargetsTags: W3BehTreeValNameArray
        numberOfActions: int
        setProjectileOnFire: bool
        afterActionIdleDuration: float
        afterActionIdleDurationChance: float
        useRayCastBeforeShooting: bool

    IAIDoorExplorationTree:
      .extends: IAIExplorationTree

    CAIDoorMoveExplorationTree:
      .extends: IAIDoorExplorationTree

    CAIUseExplorationActionTree:
      .extends: IAIExplorationTree
      .adds:
        explorationType: EExplorationType
        skipTeleportation: bool

    CAIRunExplorationActionTree:
      .extends: IAIBaseAction
      .adds:
        params: CAIRunExplorationActionTreeParams

    CAIRunExplorationActionTreeParams:
      .extends: IAIActionParameters
      .adds:
        explorationType: EExplorationType
        entityTag: name

    IFlightActionTree:
      .extends: IAIActionTree

    CFlyToActionTree:
      .extends: IFlightActionTree
      .adds:
        acceptDistance: float
        targetTag: name
        rotateBeforeTakeOff: bool
        landAtTargetLocation: bool
        landingForwardOffset: float

    CAIFlyOnCurve:
      .extends: IFlightActionTree
      .adds:
        animationName: name
        curveTag: name
        curveDummyName: string
        blendInTime: float
        slotAnimation: name
        animValPitch: string
        animValYaw: string
        maxPitchInput: float
        maxPitchOutput: float
        maxYawInput: float
        maxYawOutput: float

    CAIFlyFindLandingSpotTree:
      .extends: IFlightActionTree
      .adds:
        landingAnimations: array<CAIFlyLandTree>

    CAIFlyLandTree:
      .extends: IFlightActionTree

    CAIFlyInterruptableAction:
      .extends: IFlightActionTree
      .adds:
        interruptableAction: CAISubTree

    IAIFlightIdleTree:
      .extends: CAIMainTree

    CAIFlightIdleRedefinitionParameters:
      .extends: CAIRedefinitionParameters
      .adds:
        freeFlight: IAIFlightIdleTree

    CAIFlightIdleAroundTargets:
      .extends: IAIFlightIdleTree
      .adds:
        flightTargetTag: name
        flightAroundClosest: bool
        flightAroundReselect: bool
        flyAroundReselectDurationMin: float
        flyAroundReselectDurationMax: float
        idleFlightRadiusMin: float
        idleFlightRadiusMax: float
        idleFlightHeightMin: float
        idleFlightHeightMax: float

    CAIFlightIdleFreeRoam:
      .extends: IAIFlightIdleTree
      .adds:
        flightHeight: float
        flyAround: bool
        flyAroundDurationMin: float
        flyAroundDurationMax: float
        flightAreaSelection: EAIAreaSelectionMode
        flightAreaOptionalTag: name

    CAICombatSoftReactionsTree:
      .extends: CAISoftReactionTree

    CAICommonerSoftReactionsTree:
      .extends: CAISoftReactionTree

    CAIGuardSoftReactionsTree:
      .extends: CAISoftReactionTree

    CAIQuestSoftReactionsTree:
      .extends: CAISoftReactionTree

    CAIMainQuestSoftReactionsTree:
      .extends: CAISoftReactionTree

    CAIChildSoftReactionsTree:
      .extends: CAISoftReactionTree

    CAINpcReactionsTree:
      .extends: CAIReactionTree
      .adds:
        reactions: array<CAINpcActionSubtree>

    CAICommonerReactionTree:
      .extends: CAINpcReactionsTree

    CAIChildReactionTree:
      .extends: CAINpcReactionsTree

    CAIDrunkCommonerReactionTree:
      .extends: CAINpcReactionsTree

    CAIGuardReactionsTree:
      .extends: CAINpcReactionsTree

    CAICombatNPCReactionsTree:
      .extends: CAINpcReactionsTree

    CAIQuestNPCReactionsTree:
      .extends: CAINpcReactionsTree

    CAIPhilippaReactionsTree:
      .extends: CAINpcReactionsTree

    CAIBruxaCommonerReactionTree:
      .extends: CAINpcReactionsTree

    CAINpcActionSubtree:
      .extends: CAISubTree
      .adds:
        reactionLogicTree: CAINpcReaction
        reactionPriority: int
        actionEventName: CName
        actionCooldownDistance: float
        actionCooldownTimeout: float
        actionFailedCooldown: float
        dontSetActionTarget: bool
        changePriorityWhileActive: bool
        reactionPriorityWhileActive: int
        disallowOutsideOfGuardArea: bool
        forwardAvailabilityToReactionTree: bool
        disableTalkInteraction: bool
        disallowWhileOnHorse: bool

    CAIActionBeingHit:
      .extends: CAINpcActionSubtree

    CAIActionBumpTree:
      .extends: CAINpcActionSubtree

    CAIActionCombatNearby:
      .extends: CAINpcActionSubtree

    CAIActionDrawSword:
      .extends: CAINpcActionSubtree

    CAIActionAttack:
      .extends: CAINpcActionSubtree

    CAIActionCastSign:
      .extends: CAINpcActionSubtree

    CAIActionCrossbowShot:
      .extends: CAINpcActionSubtree

    CAIActionBombExplosion:
      .extends: CAINpcActionSubtree

    CAIActionLooting:
      .extends: CAINpcActionSubtree

    CAIActionTaunt:
      .extends: CAINpcActionSubtree

    CAIActionRain:
      .extends: CAINpcActionSubtree

    CAIActionJump:
      .extends: CAINpcActionSubtree

    CAIActionCombatStarted:
      .extends: CAINpcActionSubtree

    CAIActionGossip:
      .extends: CAINpcActionSubtree
      .adds:
        inInWorkBranch: bool

    CAIActionQuestion:
      .extends: CAINpcActionSubtree
      .adds:
        inInWorkBranch: bool

    CAIActionGreeting:
      .extends: CAINpcActionSubtree
      .adds:
        inInWorkBranch: bool

    CAIActionBarter:
      .extends: CAINpcActionSubtree
      .adds:
        inInWorkBranch: bool

    CAIActionPlayerPresence:
      .extends: CAINpcActionSubtree

    CAIQuestActionPlayerPresence:
      .extends: CAIActionPlayerPresence

    CAIActionBruxaBeingHit:
      .extends: CAINpcActionSubtree

    CAIActionBruxaDrawSword:
      .extends: CAINpcActionSubtree

    CAIActionBruxaAttack:
      .extends: CAINpcActionSubtree

    CAIActionBruxaFriendlyAttackAction:
      .extends: CAINpcActionSubtree

    CAIActionBruxaCastSign:
      .extends: CAINpcActionSubtree

    CAIActionBruxaCrossbowShot:
      .extends: CAINpcActionSubtree

    CAIActionBruxaBombExplosion:
      .extends: CAINpcActionSubtree

    CAIActionBruxaPlayerPresence:
      .extends: CAINpcActionSubtree

    CAIActionBruxaPlayerPresenceForced:
      .extends: CAINpcActionSubtree

    CAINpcReaction:
      .extends: CAISubTree
      .adds:
        voiceSet: string

    CAINpcReactionGetScared:
      .extends: CAINpcReaction
      .adds:
        scaredTime: float
        scaredTimeMax: float
        checkLineOfSight: bool
        tryToBeHostileFirst: bool

    CAINpcReactionTaunt:
      .extends: CAINpcReaction

    CAINpcReactionStopAndComment:
      .extends: CAINpcReaction
      .adds:
        stopDuration: float
        activationChance: int
        distanceToInterrupt: int

    CAINpcReactionSurprise:
      .extends: CAINpcReaction
      .adds:
        rotateToActionTargetsTarget: bool

    CAINpcReactionJoinFight:
      .extends: CAINpcReaction
      .adds:
        onlyHelpActorsFromTheSameAttidueGroup: bool

    CAINpcReactionObserveFight:
      .extends: CAINpcReaction
      .adds:
        doNotCheckLineOfSight: bool

    CAINpcReactionTurnHostile:
      .extends: CAINpcReaction
      .adds:
        setAttitudeGameplayEventName: name

    CAINpcReactionGuardWarnSword:
      .extends: CAINpcReaction

    CAINpcReactionGuardWarnGeneral:
      .extends: CAINpcReaction
      .adds:
        lootingReaction: bool

    CAINpcReactionBump:
      .extends: CAINpcReaction

    CAINpcReactionRain:
      .extends: CAINpcReaction
      .adds:
        actionPointSelector: CRainActionPointSelector

    CAINpcReactionBruxaSpawn:
      .extends: CAINpcReaction
      .adds:
        activationChance: int
        distanceToInterrupt: int

    CAIScaredSubTree:
      .extends: CAISubTree

    CAIScaredTree:
      .extends: CAIScaredSubTree

    CAIRunOnlyScaredTree:
      .extends: CAIScaredSubTree

    CAIMonsterIdleAction:
      .extends: IAIActionTree
      .adds:
        params: CAIMonsterIdleActionParams

    CAIMonsterFlyIdleAction:
      .extends: CAIMonsterIdleAction

    CAIMonsterIdleActionParams:
      .extends: CAISubTreeParameters
      .adds:
        cooldown: float
        loopTime: float
        actionName: name
        onlyOnGround: bool

    CAIMonsterFlyIdleActionParams:
      .extends: CAIMonsterIdleActionParams
      .adds:
        minDistanceFromGround: float

    CAIMonsterIdleEat:
      .extends: CAIMonsterIdleAction

    CAIMonsterIdleDig:
      .extends: CAIMonsterIdleAction

    CAIMonsterIdleClean:
      .extends: CAIMonsterIdleAction

    CAIMonsterIdleOnGroundAndClean:
      .extends: CAIMonsterIdleAction

    CAIMonsterIdleSit:
      .extends: CAIMonsterIdleAction

    CAIMonsterIdleLie:
      .extends: CAIMonsterIdleAction

    CAIMonsterIdleOnGround:
      .extends: CAIMonsterIdleAction

    CAIMonsterIdleHowl:
      .extends: CAIMonsterIdleAction

    CAIMonsterIdleSleep:
      .extends: CAIMonsterIdleAction

    CAIMonsterIdleRoll:
      .extends: CAIMonsterIdleAction

    CAIMonsterIdleStretch:
      .extends: CAIMonsterIdleAction

    CAIMonsterIdleCough:
      .extends: CAIMonsterIdleAction

    CAIMonsterIdleStrikeFists:
      .extends: CAIMonsterIdleAction

    CAIMonsterIdleGrowl:
      .extends: CAIMonsterIdleAction

    CAIMonsterIdleWings:
      .extends: CAIMonsterIdleAction

    CAIMonsterIdleLookAround:
      .extends: CAIMonsterIdleAction

    CAIMonsterIdleYawn:
      .extends: CAIMonsterIdleAction

    CAIMonsterIdleSniff:
      .extends: CAIMonsterIdleAction

    CAIMonsterIdleTail:
      .extends: CAIMonsterIdleAction

    CAIMonsterIdleFlyBarrel:
      .extends: CAIMonsterFlyIdleAction

    CAIMonsterIdleFlyAirDive:
      .extends: CAIMonsterFlyIdleAction

    CAIMonsterIdlePlayAround:
      .extends: CAIMonsterIdleAction

    CAIAnimalRunWild:
      .extends: CAIDynamicWander
      .adds:
        packRegroupEvent: name
        leaderRegroupEvent: name

    CAIMonsterIdleFlyOnCurve:
      .extends: CAIMonsterIdleAction

    CAIMonsterIdleFlyOnCurveParamsDefault:
      .extends: CAIMonsterIdleActionParams
      .adds:
        curveTag: name
        rotateBeforeTakeOff: bool
        animationName: name
        curveDummyName: string
        blendInTime: float
        slotAnimation: name
        animValPitch: string
        animValYaw: string
        maxPitchInput: float
        maxPitchOutput: float
        maxYawInput: float
        maxYawOutput: float

    CAIMonsterIdle:
      .extends: CAIIdleTree
      .adds:
        params: CAIMonsterIdleParams

    CAIMonsterIdleParams:
      .extends: CAIIdleParameters

    CAIMonsterIdleDefault:
      .extends: CAIMonsterIdle

    CAIMonsterSearchFoodTree:
      .extends: CAISubTree
      .adds:
        params: CAIMonsterSearchFoodIdleParams

    CAIMonsterSearchFoodIdleParams:
      .extends: CAISubTreeParameters
      .adds:
        loopTime: float
        corpse: bool
        meat: bool
        vegetable: bool
        water: bool
        monster: bool
        landHeight: float
        flyHeight: float

    CAILessogIdle:
      .extends: CAIMonsterIdle

    CAIMonsterIdleDecorator:
      .extends: CAIIdleDecoratorTree
      .adds:
        params: CAIMonsterIdleDecoratorParams

    CAIScolopendromorphIdleDecorator:
      .extends: CAIMonsterIdleDecorator

    CAIEchinopsIdleDecorator:
      .extends: CAIMonsterIdleDecorator

    CAIMonsterIdleDecoratorParams:
      .extends: CAIIdleParameters
      .adds:
        reactionTree: CAIMonsterReactionsTree
        searchFoodTree: CAIMonsterSearchFoodTree
        actions: array<CAIMonsterIdleAction>
        nightActions: array<CAIMonsterIdleAction>
        actionCooldown: float
        chanceToHuntAtNight: float

    CAIMonsterIdleDecoratorArachas:
      .extends: CAIMonsterIdleDecorator

    CAIMonsterIdleDecoratorPanther:
      .extends: CAIMonsterIdleDecorator

    CAIMonsterIdleDecoratorBoar:
      .extends: CAIMonsterIdleDecorator

    CAIMonsterIdleDecoratorKatakan:
      .extends: CAIMonsterIdleDecorator

    CAIMonsterIdleDecoratorBear:
      .extends: CAIMonsterIdleDecorator

    CAIMonsterIdleDecoratorBies:
      .extends: CAIMonsterIdleDecorator

    CAIMonsterIdleDecoratorTroll:
      .extends: CAIMonsterIdleDecorator

    CAIMonsterIdleDecoratorDrowner:
      .extends: CAIMonsterIdleDecorator

    CAIMonsterIdleDecoratorGhoul:
      .extends: CAIMonsterIdleDecorator

    CAIMonsterIdleDecoratorGolem:
      .extends: CAIMonsterIdleDecorator

    CAIMonsterIdleDecoratorGryphon:
      .extends: CAIMonsterIdleDecorator
      .adds:
        arrivalDistance: float

    CAIDynamicFlyingWanderGryphon:
      .extends: CAIDynamicFlyingWander

    CAIMonsterIdleDecoratorHarpy:
      .extends: CAIMonsterIdleDecorator

    CAIDynamicFlyingWanderHarpy:
      .extends: CAIDynamicFlyingWander

    CAIMonsterIdleDecoratorWraith:
      .extends: CAIMonsterIdleDecorator

    CAIMonsterIdleDecoratorNoonWraith:
      .extends: CAIMonsterIdleDecorator

    CAIMonsterIdleDecoratorSiren:
      .extends: CAIMonsterIdleDecorator

    CAIMonsterIdleDecoratorGiant:
      .extends: CAIMonsterIdleDecorator

    CAIMonsterIdleDecoratorNekker:
      .extends: CAIMonsterIdleDecorator

    CAIMonsterIdleDecoratorWerewolf:
      .extends: CAIMonsterIdleDecorator

    CAIMonsterIdleDecoratorWolfAlpha:
      .extends: CAIMonsterIdleDecorator

    CAIMonsterIdleDecoratorWolf:
      .extends: CAIMonsterIdleDecorator

    CAIMonsterIdleDecoratorWyvern:
      .extends: CAIMonsterIdleDecorator

    CAIDynamicFlyingWanderWyvern:
      .extends: CAIDynamicFlyingWander

    CAIMonsterIdleDecoratorGravehag:
      .extends: CAIMonsterIdleDecorator

    CAIMonsterBase:
      .extends: CAIBaseTree
      .adds:
        params: CAIBaseMonsterDefaults

    CAIBaseMonsterDefaults:
      .extends: CAIDefaults
      .adds:
        spawnTree: CAIMonsterSpawn
        keepDistance: CAIKeepDistanceTree
        tauntTree: CAIMonsterTaunt
        axiiTree: CAIMonsterAxii
        idleDecoratorTree: CAIMonsterIdleDecorator
        idleTree: CAIIdleTree
        ignoreReachability: bool
        allowPursueDistance: float
        canSwim: bool
        canBury: bool
        canKeepDistance: bool

    CAIMonsterDefaults:
      .extends: CAIBaseMonsterDefaults
      .adds:
        combatTree: CAIMonsterCombat
        deathTree: CAIMonsterDeath
        spawnEntityAtDeath: bool
        morphInCombat: bool
        entityToSpawn: name

    CAIFlyingMonsterDefaults:
      .extends: CAIBaseMonsterDefaults
      .adds:
        combatTree: CAIFlyingMonsterCombat
        deathTree: CAIFlyingMonsterDeath
        flyingWander: CAISubTree
        freeFlight: IAIFlightIdleTree
        canFly: bool

    CAITrollDefaults:
      .extends: CAIMonsterDefaults

    CAISharleyDefaults:
      .extends: CAIMonsterDefaults

    CAIVampiressDefaults:
      .extends: CAIMonsterDefaults

    CAINekkerDefaults:
      .extends: CAIMonsterDefaults

    CAIBiesDefaults:
      .extends: CAIMonsterDefaults

    CAIBiesDEBUG:
      .extends: CAIMonsterDefaults

    CAISirenDefaults:
      .extends: CAIFlyingMonsterDefaults

    CAIIceGiantDefaults:
      .extends: CAIMonsterDefaults

    CAIIceGiantEp2Defaults:
      .extends: CAIMonsterDefaults

    CAIDjinnDefaults:
      .extends: CAIMonsterDefaults

    CAIDrownerDefaults:
      .extends: CAIMonsterDefaults

    CAIDrownerUnderwaterDefaults:
      .extends: CAIDrownerDefaults

    CAIRotfiendDefaults:
      .extends: CAIDrownerDefaults

    CAIGhoulDefaults:
      .extends: CAIMonsterDefaults

    CAIGryphonDefaults:
      .extends: CAIFlyingMonsterDefaults

    CAIHarpyDefaults:
      .extends: CAIFlyingMonsterDefaults

    CAIWraithDefaults:
      .extends: CAIMonsterDefaults

    CAINoonwraithDefaults:
      .extends: CAIMonsterDefaults

    CAINoonwraithDoppelgangerDefaults:
      .extends: CAINoonwraithDefaults

    CAIPestaDefaults:
      .extends: CAIMonsterDefaults

    CAIIrisDefaults:
      .extends: CAIMonsterDefaults

    CAIShadeDefaults:
      .extends: CAIMonsterDefaults

    CAIWolfDefaults:
      .extends: CAIMonsterDefaults

    CAIWolfAlphaDefaults:
      .extends: CAIWolfDefaults

    CAIGuardDogDefaults:
      .extends: CAIWolfDefaults

    CAILessogDefaults:
      .extends: CAIMonsterDefaults

    CAISpriganDefaults:
      .extends: CAIMonsterDefaults

    CAIHimDefaults:
      .extends: CAIMonsterDefaults

    CAIEndriagaDefaults:
      .extends: CAIMonsterDefaults

    CAIBlackSpiderDefaults:
      .extends: CAIMonsterDefaults

    CAIBlackSpiderEP2Defaults:
      .extends: CAIMonsterDefaults

    CAIArachasDefaults:
      .extends: CAIMonsterDefaults

    CAIArachasDEBUG:
      .extends: CAIMonsterDefaults

    CAIGolemDefaults:
      .extends: CAIMonsterDefaults

    CAIIfritDefaults:
      .extends: CAIGolemDefaults

    CAIIceGolemDefaults:
      .extends: CAIGolemDefaults

    CAIGolemDEBUG:
      .extends: CAIMonsterDefaults

    CAIWerewolfDefaults:
      .extends: CAIMonsterDefaults

    CAIBigbadwolfDefaults:
      .extends: CAIMonsterDefaults

    CAIKatakanDefaults:
      .extends: CAIMonsterDefaults

    CAIFlederDefaults:
      .extends: CAIMonsterDefaults

    CAIBearDefaults:
      .extends: CAIMonsterDefaults

    CAIBearProtectiveDefaults:
      .extends: CAIBearDefaults
      .adds:
        canTaunt: bool
        berserk: bool

    CAIWyvernDefaults:
      .extends: CAIFlyingMonsterDefaults

    CAIDracolizardDefaults:
      .extends: CAIFlyingMonsterDefaults

    CAIGravierDefaults:
      .extends: CAIMonsterDefaults

    CAIGravehagDefaults:
      .extends: CAIMonsterDefaults

    CAIFoglingDopplegangerDefaults:
      .extends: CAIMonsterDefaults

    CAIWitchDefaults:
      .extends: CAIMonsterDefaults

    CAIWitch2Defaults:
      .extends: CAIMonsterDefaults

    CAIWightDefaults:
      .extends: CAIMonsterDefaults

    CAIFugasDefaults:
      .extends: CAIMonsterDefaults

    CAIRatDefaults:
      .extends: CAIMonsterDefaults

    CAIBoarDefaults:
      .extends: CAIMonsterDefaults

    CAIBoarEP2Defaults:
      .extends: CAIMonsterDefaults

    CAIPantherDefaults:
      .extends: CAIMonsterDefaults

    CAIKikimoreDefaults:
      .extends: CAIMonsterDefaults

    CAIToadDefaults:
      .extends: CAIMonsterDefaults

    CAIScolopendromorphDefaults:
      .extends: CAIMonsterDefaults

    CAIBroomDefaults:
      .extends: CAIMonsterDefaults

    CAIArchesporDefaults:
      .extends: CAIMonsterDefaults

    CAIDettlaffDefaults:
      .extends: CAIMonsterDefaults

    CAIDettlaffVampireDefaults:
      .extends: CAIMonsterDefaults

    CAIFairytaleWitchDefaults:
      .extends: CAIMonsterDefaults

    CAIBarghestDefaults:
      .extends: CAIMonsterDefaults

    CAIDettlaffFlederDefaults:
      .extends: CAIMonsterDefaults

    CAIDettlaffVampiressDefaults:
      .extends: CAIMonsterDefaults

    CAIBansheeDefaults:
      .extends: CAIMonsterDefaults

    CAIMonsterAxii:
      .extends: CAIAxiiTree
      .adds:
        params: CAIMonsterAxiiParams

    CAIMonsterAxiiParams:
      .extends: CAIAxiiParameters
      .adds:
        canFly: bool
        onSpotLanding: bool
        landingGroundOffset: float

    CAIMonsterTaunt:
      .extends: CAITauntTree
      .adds:
        canBury: bool
        params: CAIMonsterTauntParams

    CAIMonsterTauntParams:
      .extends: CAITauntParameters
      .adds:
        stopTauntingDistance: float
        tauntDelay: float
        forceAttackDelay: float
        useSurround: bool
        chanceToMove: float

    CAICowardMonsterTaunt:
      .extends: CAIMonsterTaunt

    CAICowardMonsterTauntParams:
      .extends: CAIMonsterTauntParams
      .adds:
        moveBackDistance: float

    CAIBaseMonsterCombatParams:
      .extends: CAICombatParameters
      .adds:
        combatLogicTree: CAIMonsterCombatLogic
        damageReactionTree: CAIMonsterSimpleDamageReactionTree
        reachabilityTolerance: float
        targetOnlyPlayer: bool
        hostileActorWeight: float
        currentTargetWeight: float
        rememberedHits: int
        hitterWeight: float
        maxWeightedDistance: float
        distanceWeight: float
        playerWeightProbability: int
        playerWeight: float
        skipVehicle: ECombatTargetSelectionSkipTarget
        skipVehicleProbability: int
        skipUnreachable: ECombatTargetSelectionSkipTarget
        skipUnreachableProbability: int
        skipNotThreatening: ECombatTargetSelectionSkipTarget
        skipNotThreateningProbability: int

    CAIMonsterCombat:
      .extends: CAICombatTree
      .adds:
        params: CAIMonsterCombatParams

    CAIMonsterCombatParams:
      .extends: CAIBaseMonsterCombatParams
      .adds:
        createHitReactionEvent: name
        IncreaseHitCounterOnlyOnMelee: bool
        criticalState: CAINpcCriticalState
        reactionTree: CAIMonsterCombatReactionsTree

    CAIFlyingMonsterCombat:
      .extends: CAICombatTree
      .adds:
        params: CAIFlyingMonsterCombatParams

    CAIFlyingMonsterCombatParams:
      .extends: CAIBaseMonsterCombatParams
      .adds:
        IncreaseHitCounterOnlyOnMelee: bool
        criticalState: CAINpcCriticalStateFlying
        reactionTree: CAIMonsterCombatReactionsTree

    CAIMonsterCombatLogic:
      .extends: CAISubTree
      .adds:
        params: CAIMonsterCombatLogicParams

    CAIMonsterCombatLogicParams:
      .extends: CAISubTreeParameters

    CAIGravehagCombatLogicParams:
      .extends: CAIMonsterCombatLogicParams
      .adds:
        mistForm: bool
        mudThrow: bool
        witchSpecialAttack: bool

    CAISharleyCombatLogicParams:
      .extends: CAIMonsterCombatLogicParams
      .adds:
        prioritizePlayerAsTarget: bool

    CAIFlyingMonsterCombatLogic:
      .extends: CAIMonsterCombatLogic

    CAITrollCombatLogic:
      .extends: CAIMonsterCombatLogic

    CAISharleyCombatLogic:
      .extends: CAIMonsterCombatLogic

    CAIVampiressCombatLogic:
      .extends: CAIMonsterCombatLogic

    CAIIceGiantCombatLogic:
      .extends: CAIMonsterCombatLogic

    CAIIceGiantEp2CombatLogic:
      .extends: CAIMonsterCombatLogic

    CAINekkerCombatLogic:
      .extends: CAIMonsterCombatLogic

    CAIBiesCombatLogic:
      .extends: CAIMonsterCombatLogic

    CAIBiesDEBUGLogic:
      .extends: CAIMonsterCombatLogic

    CAISirenCombatLogic:
      .extends: CAIFlyingMonsterCombatLogic

    CAIDjinnCombatLogic:
      .extends: CAIMonsterCombatLogic

    CAIDrownerCombatLogic:
      .extends: CAIMonsterCombatLogic

    CAIGhoulCombatLogic:
      .extends: CAIMonsterCombatLogic

    CAINoonwraithCombatLogic:
      .extends: CAIMonsterCombatLogic

    CAIPestaCombatLogic:
      .extends: CAIMonsterCombatLogic

    CAIIrisCombatLogic:
      .extends: CAIMonsterCombatLogic

    CAIShadeCombatLogic:
      .extends: CAIMonsterCombatLogic

    CAIGryphonCombatLogic:
      .extends: CAIFlyingMonsterCombatLogic

    CAILessogCombatLogic:
      .extends: CAIMonsterCombatLogic

    CAISpriganCombatLogic:
      .extends: CAIMonsterCombatLogic

    CAIHimCombatLogic:
      .extends: CAIMonsterCombatLogic

    CAIWolfCombatLogic:
      .extends: CAIMonsterCombatLogic

    CAIWolfCombatLogicParams:
      .extends: CAIMonsterCombatLogicParams
      .adds:
        attackMovementType: EMoveType

    CAIGolemCombatLogic:
      .extends: CAIMonsterCombatLogic

    CAIGolemCombatLogicParams:
      .extends: CAIMonsterCombatLogicParams
      .adds:
        projectileTemplate: CEntityTemplate
        attackRange: float

    CAIGolemDEBUGLogic:
      .extends: CAIMonsterCombatLogic

    CAIWerewolfCombatLogic:
      .extends: CAIMonsterCombatLogic

    CAIBigbadwolfCombatLogic:
      .extends: CAIMonsterCombatLogic

    CAIKatakanCombatLogic:
      .extends: CAIMonsterCombatLogic

    CAIFlederCombatLogic:
      .extends: CAIMonsterCombatLogic

    CAIBansheeCombatLogic:
      .extends: CAIMonsterCombatLogic

    CAIWraithCombatLogic:
      .extends: CAIMonsterCombatLogic

    CAIHarpyCombatLogic:
      .extends: CAIFlyingMonsterCombatLogic

    CAIGhulCombatLogic:
      .extends: CAIMonsterCombatLogic

    CAIArachasCombatLogic:
      .extends: CAIMonsterCombatLogic

    CAIBlackSpiderCombatLogic:
      .extends: CAIMonsterCombatLogic

    CAIBlackSpiderEP2CombatLogic:
      .extends: CAIMonsterCombatLogic

    CAIArachasCombatLogicParams:
      .extends: CAIMonsterCombatLogicParams
      .adds:
        minChargeDist: float
        maxChargeDist: float

    CAIBlackSpiderCombatLogicParams:
      .extends: CAIMonsterCombatLogicParams
      .adds:
        minChargeDist: float
        maxChargeDist: float

    CAIBlackSpiderEP2CombatLogicParams:
      .extends: CAIMonsterCombatLogicParams
      .adds:
        minChargeDist: float
        maxChargeDist: float

    CAIArachasDEBUGLogic:
      .extends: CAIMonsterCombatLogic

    CAIBearCombatLogic:
      .extends: CAIMonsterCombatLogic

    CAIWyvernCombatLogic:
      .extends: CAIMonsterCombatLogic

    CAIDracolizardCombatLogic:
      .extends: CAIMonsterCombatLogic

    CAIGravierCombatLogic:
      .extends: CAIMonsterCombatLogic

    CAIFoglingDopplegangerCombatLogic:
      .extends: CAIMonsterCombatLogic

    CAIGravehagCombatLogic:
      .extends: CAIMonsterCombatLogic

    CAIWightCombatLogic:
      .extends: CAIMonsterCombatLogic

    CAIWitchCombatLogic:
      .extends: CAIMonsterCombatLogic
      .adds:
        Phase1: bool
        Phase2: bool
        PhaseReset: bool
        AbilityHypnosis: bool

    CAIWitch2CombatLogic:
      .extends: CAIMonsterCombatLogic
      .adds:
        Phase1: bool
        Phase2: bool
        PhaseReset: bool
        bileAttack: bool
        prePursueTaunt: bool

    CAIWitchSoloCombatLogic:
      .extends: CAIMonsterCombatLogic

    CAIFugasCombatLogic:
      .extends: CAIMonsterCombatLogic
      .adds:
        useFasterMovementToApproach: bool
        fireAttack: bool

    CAIRatCombatLogic:
      .extends: CAIMonsterCombatLogic

    CAIBoarCombatLogic:
      .extends: CAIMonsterCombatLogic

    CAIBoarEP2CombatLogic:
      .extends: CAIMonsterCombatLogic

    CAIPantherCombatLogic:
      .extends: CAIMonsterCombatLogic

    CAIKikimoreCombatLogic:
      .extends: CAIMonsterCombatLogic

    CAIToadCombatLogic:
      .extends: CAIMonsterCombatLogic

    CAIArchesporCombatLogic:
      .extends: CAIMonsterCombatLogic

    CAIFairytaleWitchCombatLogic:
      .extends: CAIMonsterCombatLogic

    CAIScolopendromorphCombatLogic:
      .extends: CAIMonsterCombatLogic

    CAIBroomCombatLogic:
      .extends: CAIMonsterCombatLogic

    CAIDettlaffVampireCombatLogic:
      .extends: CAIMonsterCombatLogic

    CAIBarghestCombatLogic:
      .extends: CAIMonsterCombatLogic

    CAIDettlaffCombatLogic:
      .extends: CAIMonsterCombatLogic

    CAIDettlaffTornadoLogic:
      .extends: CAIMonsterCombatLogic

    CAIMonsterSimpleDamageReactionTree:
      .extends: CAISubTree

    CAIMonsterDamageReactionTree:
      .extends: CAIMonsterSimpleDamageReactionTree
      .adds:
        params: CAIDamageReactionTreeParams

    CAIDamageReactionTreeParams:
      .extends: CAISubTreeParameters
      .adds:
        completeTaskAfterDisablingHitReaction: bool
        enableTeleportOnHit: bool

    CAIFinisherTreeParams:
      .extends: CAICombatActionParameters
      .adds:
        syncAnimName: name

    CAIMonsterSpawn:
      .extends: CAISubTree
      .adds:
        params: CAIMonsterSpawnParams

    CAIMonsterSpawnParams:
      .extends: CAISubTreeParameters
      .adds:
        fxName: name
        animEventNameActivator: name
        playFXOnAnimEvent: bool
        monitorGroundContact: bool
        dealDamageOnAnimEvent: name
        becomeVisibleOnAnimEvent: name

    CAIMonsterSpawnDefault:
      .extends: CAIMonsterSpawn

    CAIMonsterSpawnFleder:
      .extends: CAIMonsterSpawn

    CAIMonsterSpawnFlying:
      .extends: CAIMonsterSpawn

    CAIMonsterSpawnIris:
      .extends: CAIMonsterSpawn

    CAIMonsterSpawnLessog:
      .extends: CAIMonsterSpawn

    CAIMonsterDeath:
      .extends: CAINpcDeath

    CAIIrisDeath:
      .extends: CAIMonsterDeath

    CAIMonsterDeathParams:
      .extends: CAINpcDeathParams

    CAIMonsterDefeated:
      .extends: CAIMonsterDeath
      .adds:
        localDeathTree: CAIMonsterDeath
        unconsciousTree: CAINpcUnconsciousTree

    CAIFlyingMonsterDeath:
      .extends: CAIMonsterDeath

    CAIFlyingMonsterDeathParams:
      .extends: CAIMonsterDeathParams

    CAIMonsterCombatReactionsTree:
      .extends: CAIReactionTree
      .adds:
        params: CAIMonsterReactionsTreeParams

    CAIMonsterReactionsTree:
      .extends: CAIReactionTree
      .adds:
        params: CAIMonsterReactionsTreeParams

    CAIMonsterReactionsTreeParams:
      .extends: CAIReactionsParameters
      .adds:
        reactions: array<CAIMonsterActionSubtree>
        canFly: bool

    CAIReactionHowl:
      .extends: CAINpcReaction

    CAIMonsterActionSubtree:
      .extends: CAINpcActionSubtree

    CAIActionSearchForTarget:
      .extends: CAIMonsterActionSubtree

    CAIActionAllySearchesTarget:
      .extends: CAIMonsterActionSubtree

    CAIActionPlayWithTarget:
      .extends: CAIMonsterActionSubtree

    CAIActionMoveToLure:
      .extends: CAIMonsterActionSubtree

    CAIActionMoveOut:
      .extends: CAIMonsterActionSubtree

    CAIActionTauntAndMoveOut:
      .extends: CAIMonsterActionSubtree

    CAIActionMoveInPack:
      .extends: CAIMonsterActionSubtree
      .adds:
        chanceToFollowPack: float

    CAIActionRunWildInPack:
      .extends: CAIMonsterActionSubtree

    CAIActionLeadEscape:
      .extends: CAIMonsterActionSubtree
      .adds:
        saveReactionTargetUnder: name

    CAIActionEscapeInPack:
      .extends: CAIMonsterActionSubtree

    CAINpcReactionSearchTarget:
      .extends: CAINpcReaction

    CAINpcReactionJoinSearchForTarget:
      .extends: CAINpcReaction

    CAINpcReactionPlayWithTarget:
      .extends: CAINpcReaction

    CAINpcReactionMoveOut:
      .extends: CAINpcReaction

    CAINpcReactionTauntAndMoveOut:
      .extends: CAINpcReaction

    CAINpcReactionMoveInPack:
      .extends: CAINpcReaction

    CAINpcReactionRunWildInPack:
      .extends: CAINpcReaction

    CAINpcReactionMoveToLure:
      .extends: CAINpcReaction

    CAINpcReactionLeadEscape:
      .extends: CAINpcReaction

    CAINpcReactionEscapeInPack:
      .extends: CAINpcReaction

    CAINpcCombat:
      .extends: CAICombatTree
      .adds:
        params: CAINpcCombatParams

    CAINpcCombatParams:
      .extends: CAICombatParameters
      .adds:
        scaredCombat: bool
        scaredBranch: CAIScaredSubTree
        combatStyles: array<CAINpcCombatStyle>
        criticalState: CAINpcCriticalState
        preferedCombatStyle: EBehaviorGraph
        increaseHitCounterOnlyOnMelee: bool
        reachabilityTolerance: float
        targetOnlyPlayer: bool
        hostileActorWeight: float
        currentTargetWeight: float
        rememberedHits: int
        hitterWeight: float
        maxWeightedDistance: float
        distanceWeight: float
        playerWeightProbability: int
        playerWeight: float
        skipVehicle: ECombatTargetSelectionSkipTarget
        skipVehicleProbability: int
        skipUnreachable: ECombatTargetSelectionSkipTarget
        skipUnreachableProbability: int
        monsterWeight: float

    CAINpcFistsDefaults:
      .extends: CAINpcDefaults

    CAINpcFistsCombat:
      .extends: CAINpcCombat

    CAINpcFistsCombatParams:
      .extends: CAINpcCombatParams

    CAINpcFistsEasyDefaults:
      .extends: CAINpcFistsDefaults

    CAINpcFistsEasyCombat:
      .extends: CAINpcCombat

    CAINpcFistsEasyCombatParams:
      .extends: CAINpcCombatParams

    CAINpcFistsHardDefaults:
      .extends: CAINpcFistsDefaults

    CAINpcFistsHardCombat:
      .extends: CAINpcCombat

    CAINpcFistsHardCombatParams:
      .extends: CAINpcCombatParams

    CAINpcGuardDefaults:
      .extends: CAINpcDefaults

    CAINpcGuardCombat:
      .extends: CAINpcCombat

    CAINpcGuardCombatParams:
      .extends: CAINpcCombatParams

    CAINpcOneHandedDefaults:
      .extends: CAINpcDefaults

    CAINpcOneHandedCombat:
      .extends: CAINpcCombat

    CAINpcOneHandedCombatParams:
      .extends: CAINpcCombatParams

    CAINpcOneHandedAxeDefaults:
      .extends: CAINpcDefaults

    CAINpcOneHandedAxeCombat:
      .extends: CAINpcCombat

    CAINpcOneHandedAxeCombatParams:
      .extends: CAINpcCombatParams

    CAINpcOneHandedBluntDefaults:
      .extends: CAINpcDefaults

    CAINpcOneHandedBluntCombat:
      .extends: CAINpcCombat

    CAINpcOneHandedBluntCombatParams:
      .extends: CAINpcCombatParams

    CAINpcTwoHandedHammerDefaults:
      .extends: CAINpcDefaults

    CAINpcTwoHandedHammerCombat:
      .extends: CAINpcCombat

    CAINpcTwoHandedHammerCombatParams:
      .extends: CAINpcCombatParams

    CAINpcTwoHandedAxeDefaults:
      .extends: CAINpcDefaults

    CAINpcTwoHandedAxeCombat:
      .extends: CAINpcCombat

    CAINpcTwoHandedAxeCombatParams:
      .extends: CAINpcCombatParams

    CAINpcTwoHandedHalberdDefaults:
      .extends: CAINpcDefaults

    CAINpcTwoHandedHalberdCombat:
      .extends: CAINpcCombat

    CAINpcTwoHandedHalberdCombatParams:
      .extends: CAINpcCombatParams

    CAINpcTwoHandedSpearDefaults:
      .extends: CAINpcDefaults

    CAINpcTwoHandedSpearCombat:
      .extends: CAINpcCombat

    CAINpcTwoHandedSpearCombatParams:
      .extends: CAINpcCombatParams

    CAINpcPitchforkDefaults:
      .extends: CAINpcDefaults

    CAINpcPitchforkCombat:
      .extends: CAINpcCombat

    CAINpcPitchforkCombatParams:
      .extends: CAINpcCombatParams

    CAINpcShieldDefaults:
      .extends: CAINpcDefaults

    CAINpcShieldCombat:
      .extends: CAINpcCombat

    CAINpcShieldCombatParams:
      .extends: CAINpcCombatParams

    CAINpcBowDefaults:
      .extends: CAINpcDefaults

    CAINpcBowCombat:
      .extends: CAINpcCombat

    CAINpcBowCombatParams:
      .extends: CAINpcCombatParams

    CAINpcCrossbowDefaults:
      .extends: CAINpcDefaults

    CAINpcCrossbowCombat:
      .extends: CAINpcCombat

    CAINpcCrossbowCombatParams:
      .extends: CAINpcCombatParams

    CAINpcTwoHandedSwordDefaults:
      .extends: CAINpcDefaults

    CAINpcTwoHandedSwordCombat:
      .extends: CAINpcCombat

    CAINpcTwoHandedSwordCombatParams:
      .extends: CAINpcCombatParams

    CAINpcGregoireDefaults:
      .extends: CAINpcDefaults

    CAINpcGregoireCombat:
      .extends: CAINpcCombat

    CAINpcGregoireCombatParams:
      .extends: CAINpcCombatParams

    CAIHjalmarDefaults:
      .extends: CAINpcDefaults

    CAINpcWitcherDefaults:
      .extends: CAINpcDefaults

    CAINpcWitcherCombat:
      .extends: CAINpcCombat

    CAINpcWitcherCombatParams:
      .extends: CAINpcCombatParams

    CAINpcEredinDefaults:
      .extends: CAINpcDefaults

    CAINpcEredinCombat:
      .extends: CAINpcCombat

    CAINpcEredinCombatParams:
      .extends: CAINpcCombatParams

    CAINpcImlerithDefaults:
      .extends: CAINpcDefaults

    CAINpcImlerithCombat:
      .extends: CAINpcCombat

    CAINpcImlerithCombatParams:
      .extends: CAINpcCombatParams

    CAINpcCaranthirDefaults:
      .extends: CAINpcDefaults

    CAINpcCaranthirCombat:
      .extends: CAINpcCombat

    CAINpcCaranthirCombatParams:
      .extends: CAINpcCombatParams

    CAINpcCaretakerDefaults:
      .extends: CAINpcDefaults

    CAINpcCaretakerCombat:
      .extends: CAINpcCombat

    CAINpcCaretakerCombatParams:
      .extends: CAINpcCombatParams

    CAINpcWitcherFollowerDefaults:
      .extends: CAINpcDefaults

    CAINpcWitcherFollowerCombat:
      .extends: CAINpcCombat

    CAINpcWitcherFollowerCombatParams:
      .extends: CAINpcWitcherCombatParams
      .adds:
        i: int

    CAINpcCiriDefaults:
      .extends: CAINpcDefaults

    CAINpcCiriCombat:
      .extends: CAINpcCombat

    CAINpcCiriCombatParams:
      .extends: CAINpcCombatParams
      .adds:
        i: int

    CAINpcSorceressDefaults:
      .extends: CAINpcDefaults

    CAINpcYenneferDefaults:
      .extends: CAINpcSorceressDefaults

    CAINpcTrissDefaults:
      .extends: CAINpcSorceressDefaults

    CAINpcKeiraDefaults:
      .extends: CAINpcSorceressDefaults

    CAINpcPhilippaDefaults:
      .extends: CAINpcSorceressDefaults

    CAINpcLynxWitchDefaults:
      .extends: CAINpcSorceressDefaults

    CAINpcYenneferCombat:
      .extends: CAINpcCombat

    CAINpcTrissCombat:
      .extends: CAINpcCombat

    CAINpcKeiraCombat:
      .extends: CAINpcCombat

    CAINpcPhilippaCombat:
      .extends: CAINpcCombat

    CAINpcLynxWitchCombat:
      .extends: CAINpcCombat

    CAINpcSorceressCombatParams:
      .extends: CAINpcCombatParams

    CAINpcYenneferCombatParams:
      .extends: CAINpcCombatParams

    CAINpcTrissCombatParams:
      .extends: CAINpcCombatParams

    CAINpcKeiraCombatParams:
      .extends: CAINpcCombatParams

    CAINpcPhilippaCombatParams:
      .extends: CAINpcCombatParams

    CAINpcLynxWitchCombatParams:
      .extends: CAINpcCombatParams

    CAINpcSorcererDefaults:
      .extends: CAINpcDefaults

    CAINpcDruidDefaults:
      .extends: CAINpcSorcererDefaults

    CAINpcDruidCombat:
      .extends: CAINpcCombat

    CAINpcWindMageDefaults:
      .extends: CAINpcSorcererDefaults

    CAINpcWindMageCombat:
      .extends: CAINpcCombat

    CAINpcBobWindMageDefaults:
      .extends: CAINpcSorcererDefaults

    CAINpcBobWindMageCombat:
      .extends: CAINpcCombat

    CAINpcBobWaterMageDefaults:
      .extends: CAINpcSorcererDefaults

    CAINpcBobWaterMageCombat:
      .extends: CAINpcCombat

    CAINpcAvallachDefaults:
      .extends: CAINpcSorcererDefaults

    CAINpcAvallachCombat:
      .extends: CAINpcCombat

    CAINpcSorcererCombatParams:
      .extends: CAINpcCombatParams

    CAINpcDruidCombatParams:
      .extends: CAINpcCombatParams

    CAINpcWindMageCombatParams:
      .extends: CAINpcCombatParams

    CAINpcBobWindMageCombatParams:
      .extends: CAINpcCombatParams

    CAINpcBobWaterMageCombatParams:
      .extends: CAINpcCombatParams

    CAINpcAvallachCombatParams:
      .extends: CAINpcCombatParams

    CAINpcMainDefaults:
      .extends: CAINpcDefaults

    CAINpcIorwvethDefaults:
      .extends: CAINpcMainDefaults

    CAINpcZoltanDefaults:
      .extends: CAINpcMainDefaults

    CAINpcZoltanCombat:
      .extends: CAINpcCombat

    CAINpcZoltanCombatParams:
      .extends: CAINpcCombatParams

    CAINpcVesDefaults:
      .extends: CAINpcMainDefaults

    CAINpcVesCombat:
      .extends: CAINpcCombat

    CAINpcVesCombatParams:
      .extends: CAINpcCombatParams

    CAINpcRocheDefaults:
      .extends: CAINpcMainDefaults

    CAINpcRocheCombat:
      .extends: CAINpcCombat

    CAINpcRocheCombatParams:
      .extends: CAINpcCombatParams

    CAINpcOlgierdCombat:
      .extends: CAINpcCombat

    CAINpcOlgierdCombatParams:
      .extends: CAINpcCombatParams

    CAINpcDettlaffVampireCombat:
      .extends: CAINpcCombat

    CAINpcDettlaffVampireCombatParams:
      .extends: CAINpcCombatParams

    CAINpcDettlaffMinion:
      .extends: CAINpcDefaults

    CAIDettlaffMinionDeath:
      .extends: CAIDeathTree
      .adds:
        params: CAINpcDeathParams

    CAINpcDettlaffMinionCombat:
      .extends: CAINpcCombat

    CAINpcDettlaffMinionCombatParams:
      .extends: CAINpcCombatParams

    CAIScaredCombatTree:
      .extends: CAISubTree

    CAINpcDefenseAction:
      .extends: CAICombatActionTree

    CAINpcParryAction:
      .extends: CAINpcDefenseAction
      .adds:
        activationTimeLimitBonusHeavy: float
        activationTimeLimitBonusLight: float

    CAINpcDodgeAction:
      .extends: CAINpcDefenseAction

    CAINpcCounterAction:
      .extends: CAINpcDefenseAction

    CAINpcCounterFistFightAction:
      .extends: CAINpcDefenseAction

    CAINpcCounterHitAction:
      .extends: CAINpcDefenseAction

    CAIWildHuntCounterHitAction:
      .extends: CAINpcDefenseAction

    CAINpcCounterPushAction:
      .extends: CAINpcDefenseAction

    CAINpcWitcherCounterAction:
      .extends: CAINpcDefenseAction

    CAINpcCiriCounterAction:
      .extends: CAINpcDefenseAction

    CAINpcImlerithCounterAction:
      .extends: CAINpcDefenseAction

    CAINpcImlerithCounterActionSecondStage:
      .extends: CAINpcDefenseAction

    CAINpcImlerithParry:
      .extends: CAINpcDefenseAction
      .adds:
        activationTimeLimitBonusHeavy: float
        activationTimeLimitBonusLight: float

    CAINpcImlerithGuardAction:
      .extends: CAINpcDefenseAction

    CAINpcImlerithSignsBlockAction:
      .extends: CAINpcDefenseAction

    CAINpcGregoireCounterAction:
      .extends: CAINpcDefenseAction

    CAINpcEredinCounterAction:
      .extends: CAINpcDefenseAction

    CAINpcEredinRaiseGuardAction:
      .extends: CAINpcDefenseAction

    CAINpcEredinSignsBlockAction:
      .extends: CAINpcDefenseAction

    CAINpcEredinDodgeAction:
      .extends: CAINpcDefenseAction

    CAINpcEredinParryAction:
      .extends: CAINpcDefenseAction
      .adds:
        activationTimeLimitBonusHeavy: float
        activationTimeLimitBonusLight: float

    CAINpcOlgierdCounterAction:
      .extends: CAINpcDefenseAction

    CAINpcOlgierdDodgeAction:
      .extends: CAINpcDefenseAction

    CAINpcOlgierdCounterAfterHitAction:
      .extends: CAINpcDefenseAction

    CAINpcOlgierdParryAction:
      .extends: CAINpcDefenseAction
      .adds:
        activationTimeLimitBonusHeavy: float
        activationTimeLimitBonusLight: float

    CAINpcDettlaffVampireCounterAction:
      .extends: CAINpcDefenseAction

    CAINpcDettlaffVampireCounterAfterHitAction:
      .extends: CAINpcDefenseAction

    CAINpcDettlaffVampireParryAction:
      .extends: CAINpcDefenseAction
      .adds:
        activationTimeLimitBonusHeavy: float
        activationTimeLimitBonusLight: float

    CAINpcDettlaffMinionParryAction:
      .extends: CAINpcDefenseAction
      .adds:
        activationTimeLimitBonusHeavy: float
        activationTimeLimitBonusLight: float

    CAINpcDettlaffMinionCounterAction:
      .extends: CAINpcDefenseAction

    CAINpcSummonGuardsAction:
      .extends: CAINpcDefenseAction

    CAINpcCaranthirCounterAction:
      .extends: CAINpcDefenseAction

    CAINpcCaranthirIceArmorAction:
      .extends: CAINpcDefenseAction

    CAINpcTacticTree:
      .extends: CAISubTree
      .adds:
        params: CAINpcTacticTreeParams

    CAINpcMeleeTacticTree:
      .extends: CAINpcTacticTree

    CAINpcRangedTacticTree:
      .extends: CAINpcTacticTree

    CAINpcCustomTacticTree:
      .extends: CAINpcTacticTree

    CAINpcTacticTreeParams:
      .extends: CAISubTreeParameters
      .adds:
        specialActions: array<CAISpecialAction>
        dontUseRunWhileStrafing: bool
        allowChangingGuard: bool

    CAINpcSimpleTacticTree:
      .extends: CAINpcMeleeTacticTree

    CAINpcSurroundTacticTree:
      .extends: CAINpcMeleeTacticTree

    CAINpcSurroundTacticTreeParams:
      .extends: CAINpcTacticTreeParams
      .adds:
        minStrafeDist: float
        maxStrafeDist: float
        minFarStrafeDist: float
        maxFarStrafeDist: float

    CAINpcSurroundTacticCloseTree:
      .extends: CAINpcMeleeTacticTree

    CAINpcSurroundTacticFarTree:
      .extends: CAINpcMeleeTacticTree

    CAINpcSurroundRangedTacticTree:
      .extends: CAINpcRangedTacticTree

    CAINpcHoldGroundTacticTree:
      .extends: CAINpcMeleeTacticTree

    CAINpcHoldGroundTacticTreeParams:
      .extends: CAINpcTacticTreeParams
      .adds:
        holdPositionTag: name
        engageDist: float
        maxDistanceToHoldGroundPosition: float

    CAINpcHoldGroundRangedTacticTree:
      .extends: CAINpcRangedTacticTree

    CAINpcHoldGroundRangedTacticTreeParams:
      .extends: CAINpcTacticTreeParams
      .adds:
        holdPositionTag: name
        maxDistanceToHoldGroundPosition: float

    CAINpcVesemirTutorialTacticTree:
      .extends: CAINpcCustomTacticTree

    CAINpcVesemirTutorialTacticTreeParams:
      .extends: CAINpcTacticTreeParams
      .adds:
        backgroundTraining: bool
        onlyBlock: bool
        onlyBlocksWithQuen: bool
        useAttacks: bool
        useCombos: bool
        forceIdle: bool
        attacksInterval: float
        maxDistFromTarget: float

    CAINpcSorceressTacticTree:
      .extends: CAINpcRangedTacticTree

    CAINpcSorceressTacticTreeParams:
      .extends: CAINpcTacticTreeParams
      .adds:
        minStrafeDist: float
        maxStrafeDist: float
        minFarStrafeDist: float
        maxFarStrafeDist: float

    CAINpcSorcererTacticTree:
      .extends: CAINpcRangedTacticTree

    CAINpcSorcererTacticTreeParams:
      .extends: CAINpcTacticTreeParams
      .adds:
        minStrafeDist: float
        maxStrafeDist: float
        minFarStrafeDist: float
        maxFarStrafeDist: float

    CAINpcEredinTacticTree:
      .extends: CAINpcCustomTacticTree

    CAINpcEredinTESTTacticTree:
      .extends: CAINpcCustomTacticTree

    CAINpcImlerithTacticTree:
      .extends: CAINpcCustomTacticTree

    CAINpcImlerithSecondStageTacticTree:
      .extends: CAINpcCustomTacticTree

    CAINpcCaranthirTacticTree:
      .extends: CAINpcCustomTacticTree
      .adds:
        Phase1: bool
        Phase2: bool

    CAINpcCaretakerTacticTree:
      .extends: CAINpcCustomTacticTree

    CAINpcPhilippaTacticTree:
      .extends: CAINpcCustomTacticTree

    CAINpcOlgierdTacticTree:
      .extends: CAINpcCustomTacticTree

    CAINpcDettlaffVampireTacticTree:
      .extends: CAINpcCustomTacticTree

    CAINpcDettlaffMinionTacticTree:
      .extends: CAINpcCustomTacticTree

    CAINpcGregoireTacticTree:
      .extends: CAINpcCustomTacticTree

    CAINpcCombatRetreatActionTree:
      .extends: CAICombatActionTree

    CAINpcPreCombatWarningActionTree:
      .extends: CAICombatActionTree

    CAINpcFormationTacticTree:
      .extends: CAISubTree
      .adds:
        params: CAINpcFormationTacticTreeParams

    CAINpcFormationTacticTreeParams:
      .extends: CAISubTreeParameters
      .adds:
        formationFollowerAttackAction: CAIAttackActionTree
        formationLeaderAttackBehavior: CAIAttackBehaviorTree

    CAIAttackBehaviorTree:
      .extends: CAICombatActionTree
      .adds:
        params: CAIAttackBehaviorTreeParams

    CAIAttackBehaviorTreeParams:
      .extends: CAICombatActionParameters
      .adds:
        chargeAction: bool
        approachAction: bool
        throwBomb: bool
        teleportAction: bool
        attackAction: CAIAttackActionTree
        attackActionRange: name
        farAttackAction: CAIAttackActionTree
        farAttackActionRange: name

    CAISpecialAction:
      .extends: CAISubTree
      .adds:
        params: CAISpecialActionParams

    CAISpecialActionParams:
      .extends: CAISubTreeParameters

    CAIDwimeritiumBombSpecialAction:
      .extends: CAISpecialAction

    CAIAttachEntitiesSpecialAction:
      .extends: CAISpecialAction

    CAIDisperseAttachedEntitiesSpecialAction:
      .extends: CAISpecialAction

    CAIMagicGroundBlastSpecialAction:
      .extends: CAISpecialAction

    CAIMagicPushSpecialAction:
      .extends: CAISpecialAction

    CAIMagicSandGroundBlastSpecialAction:
      .extends: CAISpecialAction

    CAIMagicSandGroundBlastSpecialActionBob:
      .extends: CAISpecialAction

    CAIMagicWaterGroundBlastSpecialActionBob:
      .extends: CAISpecialAction

    CAIMagicSandPushSpecialAction:
      .extends: CAISpecialAction

    CAIMagicSandPushSpecialActionBob:
      .extends: CAISpecialAction

    CAIMagicWaterPushSpecialActionBob:
      .extends: CAISpecialAction

    CAIMagicRootAttackSpecialAction:
      .extends: CAISpecialAction

    CAIMagicTornadoSpecialAction:
      .extends: CAISpecialAction

    CAIMagicTornadoSpecialActionBob:
      .extends: CAISpecialAction

    CAIMagicWaterTornadoSpecialActionBob:
      .extends: CAISpecialAction

    CAIMagicWindCoilSpecialAction:
      .extends: CAISpecialAction

    CAIMagicWindCoilSpecialActionBob:
      .extends: CAISpecialAction

    CAIMagicWaterCoilSpecialActionBob:
      .extends: CAISpecialAction

    CAIMagicWindGustSpecialAction:
      .extends: CAISpecialAction

    CAIMagicWindGustSpecialActionBob:
      .extends: CAISpecialAction

    CAIMagicSandCageSpecialAction:
      .extends: CAISpecialAction

    CAIMagicWaterCageSpecialAction:
      .extends: CAISpecialAction

    CAIMagicSandCageSpecialActionBob:
      .extends: CAISpecialAction

    CAIMagicShieldSpecialAction:
      .extends: CAISpecialAction

    CAIMagicShieldSpecialActionBob:
      .extends: CAISpecialAction

    CAIWaterMagicShieldSpecialActionBob:
      .extends: CAISpecialAction

    CAIShootAttachedEntitiesSpecialAction:
      .extends: CAISpecialAction

    CAIShootProjectilesFromGroundSpecialAction:
      .extends: CAISpecialAction

    CAILynxWitchShootProjectilesFromGroundSpecialAction:
      .extends: CAISpecialAction

    CAICastRipApartSpecialAction:
      .extends: CAISpecialAction

    CAICastFireballSpecialAction:
      .extends: CAISpecialAction

    CAICastLightningSpecialAction:
      .extends: CAISpecialAction

    CAILynxWitchCastLightningSpecialAction:
      .extends: CAISpecialAction

    CAIShootBarrelsSpecialAction:
      .extends: CAISpecialAction

    CAICastArcaneMissileSpecialAction:
      .extends: CAISpecialAction

    CAICastArcaneExplosionSpecialAction:
      .extends: CAISpecialAction

    CAIShadowDashSpecialAction:
      .extends: CAISpecialAction

    CAIAttackActionTree:
      .extends: CAICombatActionTree
      .adds:
        params: CAIAttackActionTreeParams

    CAIAttackActionTreeParams:
      .extends: CAICombatActionParameters

    CAISimpleAttackActionTree:
      .extends: CAIAttackActionTree

    CAISimpleAttackActionTreeParams:
      .extends: CAIAttackActionTreeParams

    CAIBasicAttackActionTree:
      .extends: CAIAttackActionTree

    CAIBasicAttackActionTreeParams:
      .extends: CAIAttackActionTreeParams

    CAIFistAttackActionTree:
      .extends: CAIAttackActionTree
      .adds:
        easyVersion: bool

    CAIComboFistAttackActionTree:
      .extends: CAIAttackActionTree

    CAISword2hAttackActionTree:
      .extends: CAIAttackActionTree

    CAITwoHandedAttackActionTree:
      .extends: CAIAttackActionTree

    CAIPitchforkAttackActionTree:
      .extends: CAIAttackActionTree

    CAIWitcherAttackActionTree:
      .extends: CAIAttackActionTree

    CAICiriAttackActionTree:
      .extends: CAIAttackActionTree

    CAINpcCombatStyle:
      .extends: CAISubTree
      .adds:
        params: CAINpcCombatStyleParams
        highPriority: bool

    CAINpcCombatStyleParams:
      .extends: CAISubTreeParameters
      .adds:
        LeftItemType: name
        RightItemType: name
        chooseSilverIfPossible: bool
        behGraph: EBehaviorGraph
        minCombatStyleDistance: float
        defenseActions: array<CAINpcDefenseAction>
        combatTacticTree: CAINpcTacticTree
        attackBehavior: CAIAttackBehaviorTree
        potentialFollower: bool
        tryToUseFormation: bool
        formationTacticTree: CAINpcFormationTacticTree

    CAINpcOneHandedSwordCombatStyle:
      .extends: CAINpcCombatStyle

    CAINpcStyleOneHandedSwordParams:
      .extends: CAINpcCombatStyleParams

    CAINpcOneHandedAxeCombatStyle:
      .extends: CAINpcCombatStyle

    CAINpcStyleOneHandedAxeParams:
      .extends: CAINpcCombatStyleParams

    CAINpcOneHandedBluntCombatStyle:
      .extends: CAINpcCombatStyle

    CAINpcStyleOneHandedBluntParams:
      .extends: CAINpcCombatStyleParams

    CAINpcOneHandedAnyCombatStyle:
      .extends: CAINpcCombatStyle

    CAINpcStyleOneHandedAnyParams:
      .extends: CAINpcCombatStyleParams

    CAINpcTwoHandedAnyCombatStyle:
      .extends: CAINpcCombatStyle

    CAINpcStyleTwoHandedAnyParams:
      .extends: CAINpcCombatStyleParams

    CAINpcFistsCombatStyleBaseParams:
      .extends: CAINpcCombatStyleParams
      .adds:
        canBeScared: bool

    CAINpcFistsCombatStyle:
      .extends: CAINpcCombatStyle

    CAINpcStyleFistsParams:
      .extends: CAINpcFistsCombatStyleBaseParams

    CAINpcFistsEasyCombatStyle:
      .extends: CAINpcCombatStyle

    CAINpcStyleFistsEasyParams:
      .extends: CAINpcFistsCombatStyleBaseParams

    CAINpcFistsHardCombatStyle:
      .extends: CAINpcCombatStyle

    CAINpcStyleFistsHardParams:
      .extends: CAINpcFistsCombatStyleBaseParams

    CAINpcShieldCombatStyle:
      .extends: CAINpcCombatStyle

    CAINpcStyleShieldParams:
      .extends: CAINpcCombatStyleParams

    CAINpcSorceressCombatStyle:
      .extends: CAINpcCombatStyle

    CAINpcYenneferCombatStyle:
      .extends: CAINpcSorceressCombatStyle

    CAINpcKeiraCombatStyle:
      .extends: CAINpcSorceressCombatStyle

    CAINpcTrissCombatStyle:
      .extends: CAINpcSorceressCombatStyle

    CAINpcPhilippaCustomCombatStyle:
      .extends: CAINpcSorceressCombatStyle

    CAINpcPhilippaCombatStyle:
      .extends: CAINpcSorceressCombatStyle

    CAINpcLynxWitchCombatStyle:
      .extends: CAINpcSorceressCombatStyle

    CAINpcStyleSorceressParams:
      .extends: CAINpcCombatStyleParams
      .adds:
        magicAttackResourceName: name

    CAINpcStylePhilippaParams:
      .extends: CAINpcCombatStyleParams
      .adds:
        magicAttackResourceName: name

    CAINpcSorcererCombatStyle:
      .extends: CAINpcCombatStyle

    CAINpcDruidCombatStyle:
      .extends: CAINpcSorcererCombatStyle

    CAINpcWindMageCombatStyle:
      .extends: CAINpcSorcererCombatStyle

    CAINpcWindMageCombatStyleBob:
      .extends: CAINpcSorcererCombatStyle

    CAINpcWaterMageCombatStyleBob:
      .extends: CAINpcSorcererCombatStyle

    CAINpcAvallachCombatStyle:
      .extends: CAINpcSorcererCombatStyle

    CAINpcStyleSorcererParams:
      .extends: CAINpcCombatStyleParams
      .adds:
        magicAttackResourceName: name

    CAINpcBowCombatStyle:
      .extends: CAINpcCombatStyle

    CAINpcStyleBowParams:
      .extends: CAINpcCombatStyleParams

    CAINpcBowmanMeleeCombatStyle:
      .extends: CAINpcCombatStyle

    CAINpcStyleBowmanMeleeParams:
      .extends: CAINpcCombatStyleParams

    CAINpcCrossbowCombatStyle:
      .extends: CAINpcCombatStyle

    CAINpcStyleCrossbowParams:
      .extends: CAINpcCombatStyleParams

    CAINpcTwoHandedHammerCombatStyle:
      .extends: CAINpcCombatStyle

    CAINpcStyleTwoHandedHammerParams:
      .extends: CAINpcCombatStyleParams

    CAINpcTwoHandedAxeCombatStyle:
      .extends: CAINpcCombatStyle

    CAINpcStyleTwoHandedAxeParams:
      .extends: CAINpcCombatStyleParams

    CAINpcTwoHandedHalberdCombatStyle:
      .extends: CAINpcCombatStyle

    CAINpcStyleTwoHandedHalberdParams:
      .extends: CAINpcCombatStyleParams

    CAINpcTwoHandedSpearCombatStyle:
      .extends: CAINpcCombatStyle

    CAINpcStyleTwoHandedSpearParams:
      .extends: CAINpcCombatStyleParams

    CAINpcPitchforkCombatStyle:
      .extends: CAINpcCombatStyle

    CAINpcStylePitchforkParams:
      .extends: CAINpcCombatStyleParams

    CAINpcWitcherCombatStyle:
      .extends: CAINpcCombatStyle

    CAINpcWitcherCombatStyleParams:
      .extends: CAINpcCombatStyleParams

    CAINpcEredinCombatStyle:
      .extends: CAINpcCombatStyle

    CAINpcEredinCombatStyleParams:
      .extends: CAINpcCombatStyleParams

    CAINpcCaranthirCombatStyle:
      .extends: CAINpcCombatStyle

    CAINpcCaranthirCombatStyleParams:
      .extends: CAINpcCombatStyleParams

    CAINpcImlerithCombatStyle:
      .extends: CAINpcCombatStyle

    CAINpcImlerithCombatStyleParams:
      .extends: CAINpcCombatStyleParams

    CAINpcImlerithSecondStageCombatStyle:
      .extends: CAINpcCombatStyle

    CAINpcImlerithSecondStageCombatStyleParams:
      .extends: CAINpcCombatStyleParams

    CAINpcCaretakerCombatStyle:
      .extends: CAINpcCombatStyle

    CAINpcCaretakerCombatStyleParams:
      .extends: CAINpcCombatStyleParams

    CAINpcCiriCombatStyle:
      .extends: CAINpcCombatStyle

    CAINpcCiriCombatStyleParams:
      .extends: CAINpcCombatStyleParams

    CAINpcTwoHandedSwordCombatStyle:
      .extends: CAINpcCombatStyle

    CAINpcStyleTwoHandedSwordParams:
      .extends: CAINpcCombatStyleParams

    CAINpcGregoireCombatStyle:
      .extends: CAINpcCombatStyle

    CAINpcGregoireCombatStyleParams:
      .extends: CAINpcCombatStyleParams

    CAINpcVesemirTutorialCombatStyle:
      .extends: CAINpcCombatStyle

    CAINpcStyleVesemirTutorialParams:
      .extends: CAINpcCombatStyleParams

    CAINpcOlgierdCombatStyle:
      .extends: CAINpcCombatStyle

    CAINpcStyleOlgierdParams:
      .extends: CAINpcCombatStyleParams

    CAINpcDettlaffVampireCombatStyle:
      .extends: CAINpcCombatStyle

    CAINpcStyleDettlaffVampireParams:
      .extends: CAINpcCombatStyleParams

    CAINpcDettlaffMinionCombatStyle:
      .extends: CAINpcCombatStyle

    CAINpcStyleDettlaffMinionParams:
      .extends: CAINpcCombatStyleParams

    CAIPCBase:
      .extends: CAIBaseTree

    CAINpcBase:
      .extends: CAIBaseTree
      .adds:
        params: CAINpcDefaults

    CAINpcDefaults:
      .extends: CAIDefaults
      .adds:
        npcGroupType: CAINPCGroupTypeRedefinition
        combatTree: CAINpcCombat
        idleTree: CAIIdleTree
        deathTree: CAIDeathTree
        reactionTree: CAINpcReactionsTree
        softReactionTree: CAISoftReactionTree
        hasDrinkingMinigame: bool
        morphInCombat: bool
        tempNpcGroupType: ENPCGroupType

    CAINpcRiderBase:
      .extends: CAIBaseTree
      .adds:
        params: CAINpcRiderDefaults

    CAINpcRiderDefaults:
      .extends: CAIDefaults
      .adds:
        npcGroupType: CAINPCGroupTypeRedefinition
        combatTree: CAINpcCombat
        riderCombatTree: CAINpcRiderCombat
        idleTree: CAIIdleTree
        riderIdleTree: CAINpcIdleHorseRider
        deathTree: CAIDeathTree
        reactionTree: CAINpcReactionsTree
        softReactionTree: CAISoftReactionTree
        hasDrinkingMinigame: bool

    CAINpcRiderCombat:
      .extends: CAICombatTree
      .adds:
        params: CAINpcRiderCombatParams

    CAINpcRiderCombatParams:
      .extends: CAICombatParameters
      .adds:
        reachabilityTolerance: float

    CAICombatDecoratorCommunity:
      .extends: CAICombatDecoratorTree

    CAICombatDecoratorGeneric:
      .extends: CAICombatDecoratorTree

    CAIRiderCombatDecoratorSimple:
      .extends: CAICombatDecoratorTree

    CAIRiderCombatDecoratorGeneric:
      .extends: CAICombatDecoratorGeneric

    CAINpcIdle:
      .extends: CAIIdleTree
      .adds:
        params: CAINpcIdleParams

    CAINpcIdleParams:
      .extends: CAIIdleParameters

    CAIRiderIdle:
      .extends: CAINpcIdle

    CAIRiderIdleParams:
      .extends: CAINpcIdleParams

    CAINpcActiveIdle:
      .extends: CAIIdleTree
      .adds:
        params: CAINpcActiveIdleParams
        delayWorkOnFailure: float
        delayWorkOnSuccess: float
        delayWorkOnInterruption: float

    CAINpcActiveIdleParams:
      .extends: CAIIdleParameters
      .adds:
        wanderTree: CAIWanderTree
        workTree: CAINpcWork

    CAIWanderWithHistory:
      .extends: CAIWanderTree
      .adds:
        params: CAINpcHistoryWanderParams

    CAINpcWanderParams:
      .extends: CAIWanderParameters

    CAINpcTaggedWanderParams:
      .extends: CAINpcWanderParams
      .adds:
        wanderPointsGroupTag: CName

    CAINpcHistoryWanderParams:
      .extends: CAINpcTaggedWanderParams
      .adds:
        rightSideMovement: bool

    CAIWanderRandom:
      .extends: CAIWanderTree
      .adds:
        params: CAINpcRandomWanderParams

    CAINpcRandomWanderParams:
      .extends: CAINpcTaggedWanderParams

    CAILeadPackWander:
      .extends: CAIDynamicWander
      .adds:
        leaderRegroupEvent: name
        followers: int
        canWanderRun: bool
        chanceToRun: float

    CAIDynamicWander:
      .extends: CAIWanderTree
      .adds:
        params: CAIDynamicWanderParams
        dynamicWanderArea: EntityHandle
        dynamicWanderUseGuardArea: Bool
        dynamicWanderIdleDuration: Float
        dynamicWanderIdleChance: Float
        dynamicWanderMoveDuration: Float
        dynamicWanderMoveChance: Float
        dynamicWanderMinimalDistance: float

    CAIDynamicWanderParams:
      .extends: CAINpcWanderParams
      .adds:
        dynamicWanderArea: EntityHandle
        dynamicWanderIdleDuration: Float
        dynamicWanderIdleChance: Float
        dynamicWanderMoveDuration: Float
        dynamicWanderMoveChance: Float

    CAIAmphibiousDynamicWander:
      .extends: CAIDynamicWander

    CAIDynamicFlyingWander:
      .extends: CAISubTree
      .adds:
        chanceToTakeOff: float
        chanceToLand: float
        landingGroundOffset: float
        onSpotLanding: bool
        minFlyDistance: float
        maxFlyDistance: float
        minHeight: float
        maxHeight: float
        proximityToAllowTakeOff: float
        proximityToForceTakeOff: float
        distanceFromPlayerToLand: float

    CAISirenDynamicWander:
      .extends: CAISubTree
      .adds:
        chanceToTakeOff: float
        chanceToLand: float
        chanceToDive: float
        minFlyDistance: float
        maxFlyDistance: float
        minHeight: float
        maxHeight: float
        proximityToAllowTakeOff: float
        proximityToForceTakeOff: float
        distanceFromPlayerToLand: float

    CAIFollowPartyMemeberTree:
      .extends: CAIIdleTree
      .adds:
        followPartyMember: name
        followDistance: float
        moveType: EMoveType

    CAIFollowPartyMemberSideBySideTree:
      .extends: CAIFollowPartyMemeberTree
      .adds:
        useCustomSteeringGraph: bool
        customSteeringGraph: CMoveSteeringBehavior

    CAIPatrol:
      .extends: CAIWanderTree

    CAINpcWork:
      .extends: CAISubTree
      .adds:
        actionPointSelector: CActionPointSelector
        spawnToWork: bool
        params: CAINpcWorkParams

    CAINpcWorkParams:
      .extends: CAISubTreeParameters
      .adds:
        actionPointSelector: CActionPointSelector
        spawnToWork: bool

    CAINpcWorkIdle:
      .extends: CAIIdleTree
      .adds:
        actionPointSelector: CActionPointSelector
        actionPointMoveType: EMoveType
        params: CAINpcWorkIdleParams

    CAINpcWorkIdleParams:
      .extends: CAIIdleParameters
      .adds:
        actionPointSelector: CActionPointSelector
        actionPointMoveType: EMoveType

    CAINpcBoxCarry:
      .extends: CAINpcIdle

    CAINpcBoxCarryParams:
      .extends: CAINpcIdleParams
      .adds:
        workCarryItemTemplate: CEntityTemplate
        workCarryPickupPoint: name
        workCarryDropPoint: name

    IAIIdleFormationTree:
      .extends: CAIIdleTree
      .adds:
        formation: CFormation

    CAIFollowLeaderTree:
      .extends: IAIIdleFormationTree
      .adds:
        leaderName: name
        disableGestures: bool
        removePlayedAnimationFromPool: bool
        gossipGesturesOnly: bool
        cooldownBetweenGesture: float
        chanceToPlayGesture: float
        dontActivateGestureWhenNotTalking: bool
        onlyOneActorGesticulatingAtATime: bool
        stopGestureOnDeactivate: bool
        dontOverrideRightHand: bool
        dontOverrideLeftHand: bool

    CAIFollowLeaderParameters:
      .extends: CAIIdleParameters
      .adds:
        leaderName: name
        formation: CFormation

    CAILeadFormationTree:
      .extends: IAIIdleFormationTree
      .adds:
        leadFormationSteeringGraph: CMoveSteeringBehavior
        leadSubtree: CAIIdleTree

    CAIIdleSpontanousFormationTree:
      .extends: IAIIdleFormationTree
      .adds:
        partyMemberName: name
        leaderSteering: CMoveSteeringBehavior
        leadFormationTree: CAIIdleTree
        loneWolfTree: CAIIdleTree

    CAINpcIdleHorseRider:
      .extends: CAIRiderIdle

    CAINpcIdleHorseRiderParams:
      .extends: CAIRiderIdleParams

    CAINpcDeath:
      .extends: CAIDeathTree
      .adds:
        params: CAINpcDeathParams

    CAINpcDeathParams:
      .extends: CAIDeathParameters
      .adds:
        createReactionEvent: name
        fxName: name
        playFXOnActivate: name
        playFXOnDeactivate: name
        stopFXOnActivate: name
        stopFXOnDeactivate: name
        playSFXOnActivate: name
        setAppearanceTo: name
        changeAppearanceAfter: float
        disableAgony: bool
        disableCollision: bool
        disableCollisionDelay: float
        disableCollisionOnAnim: bool
        disableCollisionOnAnimDelay: float
        destroyAfterAnimDelay: float
        disableRagdollAfter: float

    CAINpcBruxaDeathParams:
      .extends: CAINpcDeathParams
      .adds:
        spawnEntityOnDeathName: name

    CAINpcUnconsciousTree:
      .extends: CAIDeathTree
      .adds:
        params: CAINpcUnconsciousParams

    CAINpcUnconsciousParams:
      .extends: CAIDeathParameters
      .adds:
        unconsciousDuration: float
        unconsciousGetUpDist: float

    CAIDefeated:
      .extends: CAIDeathTree
      .adds:
        params: CAIDefeatedParams

    CAIDefeatedParams:
      .extends: CAIDeathParameters
      .adds:
        localDeathTree: CAIDeathTree
        unconsciousTree: CAINpcUnconsciousTree

    CAIBruxaNpcDeath:
      .extends: CAIDeathTree
      .adds:
        params: CAINpcBruxaDeathParams

    CAINpcStyleHjalmarParams:
      .extends: CAINpcStyleOneHandedSwordParams

    CAINpcStyleMountedParams:
      .extends: CAINpcCombatStyleParams

    CAINpcCriticalState:
      .extends: CAICombatActionTree
      .adds:
        params: CAINpcCriticalStateParams

    CAINpcCriticalStateParams:
      .extends: CAICombatActionParameters
      .adds:
        FinisherAnim: name

    CAINpcCriticalStateFlying:
      .extends: CAICombatActionTree
      .adds:
        params: CAINpcCriticalStateParams

    CAIMountHorse:
      .extends: CAIRidingSubTree

    CAIDismountHorse:
      .extends: CAIRidingSubTree

    CAIGenericFlee:
      .extends: CAIFleeTree

    CGoatDynamicWander:
      .extends: CAIDynamicWander

    CCatDynamicWander:
      .extends: CAIDynamicWander

    CRoosterDynamicWander:
      .extends: CAIDynamicWander

    CRamDynamicWander:
      .extends: CAIDynamicWander

    CGooseDynamicWander:
      .extends: CAIDynamicWander

    CSheepDynamicWander:
      .extends: CAIDynamicWander

    CPigDynamicWander:
      .extends: CAIDynamicWander

    CCowDynamicWander:
      .extends: CAIDynamicWander

    CDogDynamicWander:
      .extends: CAIDynamicWander

    CDeerDynamicWander:
      .extends: CAIDynamicWander

    CHareDynamicWander:
      .extends: CAIDynamicWander

    CTamedHorseDynamicWander:
      .extends: CAIDynamicWander

    CWildHorseDynamicWander:
      .extends: CAIDynamicWander

    CAIWildHuntTwoHandedSwordDefaults:
      .extends: CAINpcDefaults

    CAIWildHuntTwoHandedSwordCombat:
      .extends: CAINpcCombat

    CAIWildHuntTwoHandedSwordCombatParams:
      .extends: CAINpcCombatParams

    CAIWildHuntTwoHandedSwordCombatStyle:
      .extends: CAINpcCombatStyle

    CAIWildHuntStyleTwoHandedSwordParams:
      .extends: CAINpcCombatStyleParams

    CAIWildHuntTwoHandedAxeDefaults:
      .extends: CAINpcDefaults

    CAIWildHuntTwoHandedAxeCombat:
      .extends: CAINpcCombat

    CAIWildHuntTwoHandedAxeCombatParams:
      .extends: CAINpcCombatParams

    CAIWildHuntTwoHandedAxeCombatStyle:
      .extends: CAINpcCombatStyle

    CAIWildHuntStyleTwoHandedAxeParams:
      .extends: CAINpcCombatStyleParams

    CAIWildHuntTwoHandedHalberdDefaults:
      .extends: CAINpcDefaults

    CAIWildHuntTwoHandedHalberdCombat:
      .extends: CAINpcCombat

    CAIWildHuntTwoHandedHalberdCombatParams:
      .extends: CAINpcCombatParams

    CAIWildHuntTwoHandedHalberdCombatStyle:
      .extends: CAINpcCombatStyle

    CAIWildHuntStyleTwoHandedHalberdParams:
      .extends: CAINpcCombatStyleParams

    CAIWildHuntTwoHandedHammerDefaults:
      .extends: CAINpcDefaults

    CAIWildHuntTwoHandedHammerCombat:
      .extends: CAINpcCombat

    CAIWildHuntTwoHandedHammerCombatParams:
      .extends: CAINpcCombatParams

    CAIWildHuntTwoHandedHammerCombatStyle:
      .extends: CAINpcCombatStyle

    CAIWildHuntStyleTwoHandedHammerParams:
      .extends: CAINpcCombatStyleParams

    CAIWildHuntTwoHandedSpearDefaults:
      .extends: CAINpcDefaults

    CAIWildHuntTwoHandedSpearCombat:
      .extends: CAINpcCombat

    CAIWildHuntTwoHandedSpearCombatParams:
      .extends: CAINpcCombatParams

    CAIWildHuntTwoHandedSpearCombatStyle:
      .extends: CAINpcCombatStyle

    CAIWildHuntStyleTwoHandedSpearParams:
      .extends: CAINpcCombatStyleParams

    CAIWildHuntTwoHandedSwordAttackActionTree:
      .extends: CAIAttackActionTree

    CAIWildHuntTwoHandedPolearmAttackActionTree:
      .extends: CAIAttackActionTree

    BTCondAerialSpaceIsFree:
      .extends: IBehTreeTask
      .adds:
        localOffset: Vector
        checkLineOfSight: bool
        cylinderRadiusToCheck: float
        cylinderHeightToCheck: float
        checkedNode: ETargetName
        namedTarget: name
        m_CollisionGroupNames: array<name>
        m_LastTestTime: float
        m_LastTestResult: bool

    BTCondAerialSpaceIsFreeDef:
      .extends: IBehTreeConditionalTaskDefinition
      .adds:
        localOffset: Vector
        checkLineOfSight: bool
        cylinderRadiusToCheck: float
        cylinderHeightToCheck: float
        checkedNode: ETargetName
        namedTarget: name

    CBTCondActorCharmed:
      .extends: IBehTreeTask

    CBTCondActorCharmedDef:
      .extends: IBehTreeConditionalTaskDefinition

    CBTCondActorInDanger:
      .extends: IBehTreeTask
      .adds:
        ignoreEntityWithTag: name
        dangerRadius: float
        callFromQuest: bool
        checkQuestRequests: bool

    CBTCondActorInDangerDef:
      .extends: IBehTreeConditionalTaskDefinition
      .adds:
        dangerRadius: float
        checkQuestRequests: bool
        ignoreEntityWithTag: name

    CBTCondActorInIdleTrigger:
      .extends: IBehTreeTask
      .adds:
        inIdleTrigger: bool

    CBTCondActorInIdleTriggerDef:
      .extends: IBehTreeConditionalTaskDefinition

    CBTCondAppearanceName:
      .extends: IBehTreeTask
      .adds:
        appearanceName: name

    CBTCondAppearanceNameDef:
      .extends: IBehTreeConditionalTaskDefinition
      .adds:
        appearanceName: name

    BTCondAttackedDelay:
      .extends: IBehTreeTask
      .adds:
        delay: float
        wasHit: bool
        completeIfAttacked: bool

    BTCondAttackedDelayDef:
      .extends: IBehTreeConditionalTaskDefinition
      .adds:
        delay: float
        completeIfAttacked: bool
        wasHit: bool

    BTCondBaseStatLowerThan:
      .extends: IBehTreeTask
      .adds:
        checkedActor: EStatOwner
        baseStatType: EBaseCharacterStats
        statValue: float
        percentage: bool
        ifNot: bool

    BTCondBaseStatLowerThanDef:
      .extends: IBehTreeConditionalTaskDefinition
      .adds:
        checkedActor: EStatOwner
        baseStatType: EBaseCharacterStats
        statValue: float
        percentage: bool
        ifNot: bool

    BTCondStaminaLowerThan:
      .extends: IBehTreeTask
      .adds:
        baseStatType: EBaseCharacterStats
        statName: CName
        getStat: bool
        statValue: float

    BTCondStaminaLowerThanDef:
      .extends: IBehTreeConditionalTaskDefinition
      .adds:
        statName: CName

    CBTCondBehVarCheck:
      .extends: IBehTreeTask
      .adds:
        behVarName: name
        behVarValue: int
        compareOperation: ECompareOp

    CBTCondBehVarCheckDef:
      .extends: IBehTreeConditionalTaskDefinition
      .adds:
        behVarName: name
        behVarValue: int
        compareOperation: ECompareOp

    CBTCondBehVarCheckFloat:
      .extends: IBehTreeTask
      .adds:
        behVarName: name
        behVarValue: float
        compareOperation: ECompareOp

    CBTCondBehVarCheckFloatDef:
      .extends: IBehTreeConditionalTaskDefinition
      .adds:
        behVarName: name
        behVarValue: float
        compareOperation: ECompareOp

    BTCondCanLandAtPosition:
      .extends: IBehTreeTask
      .adds:
        localOffset: Vector
        checkLineOfSight: bool
        maxDistanceFromGround: float
        landOnlyInGuardArea: bool
        m_CollisionGroupNames: array<name>
        m_ObstaclesGroupNames: array<name>

    BTCondCanLandAtPositionDef:
      .extends: IBehTreeConditionalTaskDefinition
      .adds:
        localOffset: Vector
        checkLineOfSight: bool
        maxDistanceFromGround: CBehTreeValFloat
        landOnlyInGuardArea: bool

    CBTTaskChanceFromStat:
      .extends: IBehTreeTask
      .adds:
        ifNot: bool
        statName: name
        frequency: float
        scaleWithNumberOfOpponents: bool
        chancePerOpponent: int
        lastRollTime: float

    CBTTaskChanceFromStatDef:
      .extends: IBehTreeConditionalTaskDefinition
      .adds:
        ifNot: bool
        statName: name
        frequency: float
        scaleWithNumberOfOpponents: bool
        chancePerOpponent: int

    BTCondCheckRotationToTarget:
      .extends: IBehTreeTask
      .adds:
        ifNot: bool
        toleranceAngle: float

    BTCondCheckRotationToTargetDef:
      .extends: IBehTreeConditionalTaskDefinition
      .adds:
        ifNot: bool
        toleranceAngle: float

    BTCondCheckTargetRotationToActor:
      .extends: IBehTreeTask
      .adds:
        toleranceAngle: float

    BTCondCheckTargetRotationToActorDef:
      .extends: IBehTreeConditionalTaskDefinition
      .adds:
        toleranceAngle: float

    CBTCondCleanShot:
      .extends: IBehTreeTask
      .adds:
        doStaticTraceOnNavTestFailure: bool
        useCombatTarget: bool
        owner: CActor
        target: CNode
        ownerPos: Vector
        targetPos: Vector
        res: bool

    CBTCondCleanShotDef:
      .extends: IBehTreeConditionalTaskDefinition
      .adds:
        doStaticTraceOnNavTestFailure: bool
        useCombatTarget: bool

    BTCondDayTime:
      .extends: IBehTreeTask
      .adds:
        validTimeStart: int
        validTimeEnd: int

    BTCondDayTimeDef:
      .extends: IBehTreeConditionalTaskDefinition
      .adds:
        validTimeStart: int
        validTimeEnd: int

    BTCondDistanceFromGround:
      .extends: IBehTreeTask
      .adds:
        checkedActor: EStatOwner
        value: float
        operator: EOperator
        m_collisionGroupNames: array<name>

    BTCondDistanceFromGroundDef:
      .extends: IBehTreeConditionalTaskDefinition
      .adds:
        checkedActor: EStatOwner
        value: CBehTreeValFloat
        operator: EOperator

    BTCondDistanceToTagged:
      .extends: IBehTreeTask
      .adds:
        minDistance: float
        maxDistance: float
        targetTag: CName

    BTCondDistanceToTaggedDef:
      .extends: IBehTreeConditionalTaskDefinition
      .adds:
        minDistance: CBehTreeValFloat
        maxDistance: CBehTreeValFloat
        targetTag: CBehTreeValCName

    BTCondDistanceToTarget:
      .extends: IBehTreeTask
      .adds:
        minDistance: float
        maxDistance: float
        attackRange: bool
        useCombatTarget: bool
        predictionTime: float

    BTCondDistanceToTargetDef:
      .extends: IBehTreeConditionalTaskDefinition
      .adds:
        minDistance: float
        maxDistance: float
        attackRange: bool
        useCombatTarget: bool
        predictionTime: float

    BTCondFightStage:
      .extends: IBehTreeTask
      .adds:
        currentFightStageIs: ENPCFightStage

    BTCondFightStageDef:
      .extends: IBehTreeConditionalTaskDefinition
      .adds:
        currentFightStageIs: ENPCFightStage

    CBTCondHasActorWeaponDrawn:
      .extends: IBehTreeTask

    CBTCondHasActorWeaponDrawnDef:
      .extends: IBehTreeConditionalTaskDefinition

    BTCondHasStaminaFor:
      .extends: IBehTreeTask
      .adds:
        staminaAction: EStaminaActionType

    BTCondHasStaminaForDef:
      .extends: IBehTreeConditionalTaskDefinition
      .adds:
        staminaAction: EStaminaActionType

    CBTCondHasTag:
      .extends: IBehTreeTask
      .adds:
        tag: name

    CBTCondHasTagDef:
      .extends: IBehTreeConditionalTaskDefinition
      .adds:
        tag: name

    CBTAddTag:
      .extends: IBehTreeTask
      .adds:
        tag: name
        toOwner: bool
        toTarget: bool
        useCombatTarget: bool
        onActivate: bool
        onDeactivate: bool

    CBTAddTagDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        tag: name
        toOwner: bool
        toTarget: bool
        useCombatTarget: bool
        onActivate: bool
        onDeactivate: bool

    BTCondHasTarget:
      .extends: IBehTreeTask
      .adds:
        useCombatTarget: bool

    BTCondHasTargetDef:
      .extends: IBehTreeConditionalTaskDefinition
      .adds:
        useCombatTarget: bool

    BTCondHeightFromTarget:
      .extends: IBehTreeTask
      .adds:
        value: float
        operator: EOperator

    BTCondHeightFromTargetDef:
      .extends: IBehTreeConditionalTaskDefinition
      .adds:
        value: float
        operator: EOperator

    BTCondHitCounter:
      .extends: IBehTreeTask
      .adds:
        value: float
        operator: EOperator
        total: bool

    BTCondHitCounterDef:
      .extends: IBehTreeConditionalTaskDefinition
      .adds:
        value: float
        operator: EOperator
        total: bool

    CBTCondHorseCanFlee:
      .extends: IBehTreeTask

    CBTCondHorseCanFleeDef:
      .extends: IBehTreeConditionalTaskDefinition

    CBTCondIsAttackCountGreaterThanLimit:
      .extends: IBehTreeTask
      .adds:
        combatDataStorage: CExtendedAICombatStorage
        attackCountLimit: int
        attackName: name

    CBTCondIsAttackCountGreaterThanLimitDef:
      .extends: IBehTreeConditionalTaskDefinition
      .adds:
        attackName: name
        attackCountLimit: int

    CBTModifyAttackCount:
      .extends: IBehTreeTask
      .adds:
        combatDataStorage: CExtendedAICombatStorage
        attackName: name
        resetAttackCount: bool
        incrementAttackCount: bool

    CBTModifyAttackCountDef:
      .extends: IBehTreeConditionalTaskDefinition
      .adds:
        attackName: name
        incrementAttackCount: bool
        resetAttackCount: bool

    BTCondIsAttacking:
      .extends: IBehTreeTask
      .adds:
        combatDataStorage: CBaseAICombatStorage

    BTCondIsAttackingDef:
      .extends: IBehTreeTaskDefinition

    CBTCondIsBeingHitByIgni:
      .extends: IBehTreeTask

    CBTCondIsBeingHitByIgniDef:
      .extends: IBehTreeConditionalTaskDefinition

    BTCondIsChangingWeapon:
      .extends: IBehTreeTask
      .adds:
        combatDataStorage: CHumanAICombatStorage

    BTCondIsChangingWeaponDef:
      .extends: IBehTreeConditionalTaskDefinition

    BTCondDoesChangingWeaponRequiresIdle:
      .extends: IBehTreeTask
      .adds:
        combatDataStorage: CHumanAICombatStorage

    BTCondDoesChangingWeaponRequiresIdleDef:
      .extends: IBehTreeConditionalTaskDefinition

    CBTCondIsCombatTargetAlive:
      .extends: IBehTreeTask

    CBTCondIsCombatTargetAliveDef:
      .extends: IBehTreeConditionalTaskDefinition

    CBTCondIsDialogOrCutscenePlaying:
      .extends: IBehTreeTask

    CBTCondIsDialogOrCutscenePlayingDef:
      .extends: IBehTreeConditionalTaskDefinition

    BTCondIsDodging:
      .extends: IBehTreeTask

    BTCondIsDodgingDef:
      .extends: IBehTreeConditionalTaskDefinition

    BTCondIsTargetDodging:
      .extends: IBehTreeTask

    BTCondIsTargetDodgingDef:
      .extends: IBehTreeConditionalTaskDefinition

    BTCondIsGuarded:
      .extends: IBehTreeTask

    BTCondIsGuardedDef:
      .extends: IBehTreeConditionalTaskDefinition

    BTCondIsTargetGuarded:
      .extends: IBehTreeTask
      .adds:
        longerThan: float
        timeStamp: float
        guardedRegistered: bool

    BTCondIsTargetGuardedDef:
      .extends: IBehTreeConditionalTaskDefinition
      .adds:
        longerThan: float

    CBTCondIsInBehaviorGraph:
      .extends: IBehTreeTask
      .adds:
        behGraphName: name

    CBTCondIsInBehaviorGraphDef:
      .extends: IBehTreeConditionalTaskDefinition
      .adds:
        behGraphName: name

    BTCondIsInBehaviorGraphNode:
      .extends: IBehTreeTask
      .adds:
        activationScriptEvent: name
        deactivateScriptEvent: name
        m_availability: bool

    BTCondIsInBehaviorGraphNodeDef:
      .extends: IBehTreeConditionalTaskDefinition
      .adds:
        activationScriptEvent: name
        deactivateScriptEvent: name

    BTCondIsInGuardArea:
      .extends: IBehTreeTask
      .adds:
        position: ETargetName
        namedTarget: name
        valueToReturnIfNoGA: bool

    BTCondIsInGuardAreaDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        position: ETargetName
        namedTarget: name
        valueToReturnIfNoGA: bool

    BTCondIsInImportantAnim:
      .extends: IBehTreeTask
      .adds:
        combatDataStorage: CBaseAICombatStorage

    BTCondIsInImportantAnimDef:
      .extends: IBehTreeTaskDefinition

    BTCondIsInStance:
      .extends: IBehTreeTask
      .adds:
        currStance: ENpcStance
        ifNot: bool

    BTCondIsInStanceDef:
      .extends: IBehTreeConditionalTaskDefinition
      .adds:
        currStance: ENpcStance
        ifNot: bool

    BTCondIsInState:
      .extends: IBehTreeTask
      .adds:
        stateName: CName
        ifNot: bool

    BTCondIsInStateDef:
      .extends: IBehTreeConditionalTaskDefinition
      .adds:
        stateName: CName
        ifNot: bool

    BTCondIsPlayerUnconscious:
      .extends: IBehTreeTask

    BTCondIsPlayerUnconsciousDef:
      .extends: IBehTreeConditionalTaskDefinition

    BTCondIsPlayerInCombatState:
      .extends: IBehTreeTask

    BTCondIsPlayerInCombatStateDef:
      .extends: IBehTreeConditionalTaskDefinition

    CBTCondIsInInterior:
      .extends: IBehTreeTask
      .adds:
        testSubject: ETestSubject

    CBTCondIsInInteriorDef:
      .extends: IBehTreeConditionalTaskDefinition
      .adds:
        testSubject: ETestSubject

    BTCondIsInTheWay:
      .extends: IBehTreeTask
      .adds:
        origin: ETargetName
        obstacle: ETargetName
        destination: ETargetName
        returnIfInvalid: bool
        requiredDistanceFromLine: float

    BTCondIsInTheWayDef:
      .extends: IBehTreeConditionalTaskDefinition
      .adds:
        origin: ETargetName
        obstacle: ETargetName
        destination: ETargetName
        requiredDistanceFromLine: float
        returnIfInvalid: bool

    CBTCondIsNpcAlive:
      .extends: IBehTreeTask
      .adds:
        npcTag: name

    CBTCondIsNpcAliveDef:
      .extends: IBehTreeConditionalTaskDefinition
      .adds:
        npcTag: name

    BTCondIsNPCGroupType:
      .extends: IBehTreeTask
      .adds:
        npcType: ENPCGroupType

    BTCondIsNPCGroupTypeDef:
      .extends: IBehTreeConditionalTaskDefinition
      .adds:
        npcType: ENPCGroupType

    CBTCondIsOnNavigableSpaceDef:
      .extends: IBehTreeConditionalTaskDefinition

    CBTCondIsOnNavigableSpace:
      .extends: IBehTreeTask

    BTCondIsPackLeader:
      .extends: IBehTreeTask

    BTCondIsPackLeaderDef:
      .extends: IBehTreeConditionalTaskDefinition

    CBTCondIsTargetInWater:
      .extends: IBehTreeTask
      .adds:
        boatCounts: bool

    CBTCondIsTargetInWaterDef:
      .extends: IBehTreeConditionalTaskDefinition
      .adds:
        boatCounts: bool

    CBTCondIsTargetUnderwater:
      .extends: IBehTreeTask

    CBTCondIsTargetUnderwaterDef:
      .extends: IBehTreeConditionalTaskDefinition

    CBTCondIsTargetOnHorse:
      .extends: IBehTreeTask
      .adds:
        useCombatTarget: bool

    CBTCondIsTargetOnHorseDef:
      .extends: IBehTreeConditionalTaskDefinition
      .adds:
        useCombatTarget: bool

    CBTCondIsTargettedBy:
      .extends: IBehTreeTask
      .adds:
        isTargettedByActors: bool
        isTargettedByPlayer: bool

    CBTCondIsTargettedByDef:
      .extends: IBehTreeConditionalTaskDefinition
      .adds:
        isTargettedByActors: bool
        isTargettedByPlayer: bool

    CBTCondIsTargetThePlayer:
      .extends: IBehTreeTask
      .adds:
        useCombatTarget: bool

    CBTCondIsTargetThePlayerDef:
      .extends: IBehTreeConditionalTaskDefinition
      .adds:
        useCombatTarget: bool

    CBTCondIsTeleporting:
      .extends: IBehTreeTask

    CBTCondIsTeleportingDef:
      .extends: IBehTreeTaskDefinition

    CBTCondIsUnderwater:
      .extends: IBehTreeTask
      .adds:
        minSubmergeDepth: float

    CBTCondIsUnderwaterDef:
      .extends: IBehTreeConditionalTaskDefinition
      .adds:
        minSubmergeDepth: float

    CBTCondIsVisible:
      .extends: IBehTreeTask
      .adds:
        gameplayVisibility: bool
        meshVisibility: bool
        forceComplete: bool
        target: bool
        invert: bool

    CBTCondIsVisibleDef:
      .extends: IBehTreeConditionalTaskDefinition
      .adds:
        gameplayVisibility: bool
        meshVisibility: bool
        forceComplete: bool
        target: bool
        invert: bool

    BTCondMonsterTacticIsUsed:
      .extends: IBehTreeTask
      .adds:
        tactic: EMonsterTactic
        distanceToCheck: float
        ignoreMyself: bool

    BTCondMonsterTacticIsUsedDef:
      .extends: IBehTreeConditionalTaskDefinition
      .adds:
        tactic: EMonsterTactic
        distanceToCheck: float
        ignoreMyself: bool

    BTCondMorphRatio:
      .extends: IBehTreeTask
      .adds:
        value: float
        operator: EOperator

    BTCondMorphRatioDef:
      .extends: IBehTreeConditionalTaskDefinition
      .adds:
        value: float
        operator: EOperator

    BTCondNumberOfOpponents:
      .extends: IBehTreeTask
      .adds:
        value: float
        operator: EOperator

    BTCondNumberOfOpponentsDef:
      .extends: IBehTreeConditionalTaskDefinition
      .adds:
        value: float
        operator: EOperator

    BTCondNumberOfSummonedCreaturesAlive:
      .extends: IBehTreeTask
      .adds:
        value: float
        operator: EOperator

    BTCondNumberOfSummonedCreaturesAliveDef:
      .extends: IBehTreeConditionalTaskDefinition
      .adds:
        value: float
        operator: EOperator

    BTCondPlayerIsCastingSign:
      .extends: IBehTreeTask
      .adds:
        sign: ESignType

    BTCondPlayerIsCastingSignDef:
      .extends: IBehTreeConditionalTaskDefinition
      .adds:
        sign: ESignType

    BTCondSubmersionLevel:
      .extends: IBehTreeTask
      .adds:
        checkedActor: EStatOwner
        value: float
        operator: EOperator

    BTCondSubmersionLevelDef:
      .extends: IBehTreeConditionalTaskDefinition
      .adds:
        checkedActor: EStatOwner
        value: float
        operator: EOperator

    CBTCondSwarmShieldAvailable:
      .extends: IBehTreeTask
      .adds:
        checkIsShieldInPlace: bool
        lair: CFlyingSwarmMasterLair

    CBTCondSwarmShieldAvailableDef:
      .extends: IBehTreeConditionalTaskDefinition
      .adds:
        checkIsShieldInPlace: bool

    BTCondSynchronisedDelay:
      .extends: IBehTreeTask
      .adds:
        syncEventName: name
        delay: float
        skipInvoker: bool
        triggerEventOnActivate: bool
        triggerEventOnDeactivate: bool
        triggerEventOnSuccess: bool
        triggerEventOnFailed: bool
        isAvailableUntilFirstEvent: bool
        personalSync: bool
        m_eventReceivedTime: float

    BTCondSynchronisedDelayDef:
      .extends: IBehTreeConditionalTaskDefinition
      .adds:
        delay: float
        syncEventName: CBehTreeValCName
        skipInvoker: bool
        triggerEventOnActivate: bool
        triggerEventOnDeactivate: bool
        triggerEventOnSuccess: bool
        triggerEventOnFailed: bool
        isAvailableUntilFirstEvent: bool
        personalSync: bool

    BTCondTargetAttackedDelay:
      .extends: IBehTreeTask
      .adds:
        delay: float
        wasHit: bool

    BTCondTargetAttackedDelayDef:
      .extends: IBehTreeConditionalTaskDefinition
      .adds:
        delay: float
        wasHit: bool

    CBTCondTargetHasItemHeld:
      .extends: IBehTreeTask
      .adds:
        itemCategory: name
        alsoCheckIfHeldsAnything: bool

    CBTCondTargetHasItemHeldDef:
      .extends: IBehTreeConditionalTaskDefinition
      .adds:
        itemCategory: name
        alsoCheckIfHeldsAnything: bool

    CBTCondTargetHasTag:
      .extends: IBehTreeTask
      .adds:
        tag: name

    CBTCondTargetHasTagDef:
      .extends: IBehTreeConditionalTaskDefinition
      .adds:
        tag: name

    BTCondTargetIsAlly:
      .extends: IBehTreeTask
      .adds:
        useNamedTarget: name
        useCombatTarget: bool
        saveTargetOnGameplayEvents: array<name>
        m_Target: CActor

    BTCondTargetIsAllyDef:
      .extends: IBehTreeConditionalTaskDefinition
      .adds:
        useNamedTarget: CBehTreeValCName
        useCombatTarget: bool
        saveTargetOnGameplayEvents: array<name>

    BTCondThreatLevel:
      .extends: IBehTreeTask
      .adds:
        operator: EOperator
        value: int

    BTCondThreatLevelDef:
      .extends: IBehTreeConditionalTaskDefinition
      .adds:
        operator: EOperator
        value: int

    BTCondTargetThreatLevel:
      .extends: IBehTreeTask
      .adds:
        operator: EOperator
        value: int

    BTCondTargetThreatLevelDef:
      .extends: IBehTreeConditionalTaskDefinition
      .adds:
        operator: EOperator
        value: int

    BTCondWasNPCInTalkInteraction:
      .extends: IBehTreeTask

    BTCondWasNPCInTalkInteractionDef:
      .extends: IBehTreeConditionalTaskDefinition

    BTCondWaterDepth:
      .extends: IBehTreeTask
      .adds:
        checkedActor: EStatOwner
        value: float
        operator: EOperator
        frontalOffset: float

    BTCondWaterDepthDef:
      .extends: IBehTreeConditionalTaskDefinition
      .adds:
        checkedActor: EStatOwner
        value: float
        operator: EOperator
        frontalOffset: float

    CBTCondIsWeaponLoaded:
      .extends: IBehTreeTask
      .adds:
        combatDataStorage: CHumanAICombatStorage

    CBTCondIsWeaponLoadedDef:
      .extends: IBehTreeConditionalTaskDefinition

    CBTCondIsTargetAMonster:
      .extends: IBehTreeTask

    CBTCondIsTargetAMonsterDef:
      .extends: IBehTreeConditionalTaskDefinition

    CBTCondIsTargetOnBoat:
      .extends: IBehTreeTask

    CBTCondIsTargetOnBoatDef:
      .extends: IBehTreeConditionalTaskDefinition

    W3ActorLatentActionFollowPlayer:
      .extends: IPresetActorLatentAction
      .adds:
        moveType: EMoveType
        keepDistance: bool
        followDistance: float
        moveSpeed: float
        teleportToCatchup: bool
        cachupDistance: float

    W3ActorLatentActionFollow:
      .extends: W3ActorLatentActionFollowPlayer
      .adds:
        targetTag: CName

    W3ActorLatentActionMoveAlongPath:
      .extends: IPresetActorLatentAction
      .adds:
        pathTag: CName
        upThePath: bool
        fromBeginning: bool
        pathMargin: float
        moveType: EMoveType
        moveSpeed: float
        dontCareAboutNavigable: bool

    W3ActorLatentActionMoveAlongPathWithCompanion:
      .extends: W3ActorLatentActionMoveAlongPath
      .adds:
        companionTag: CName
        maxDistance: float
        minDistance: float
        progressWhenCompanionIsAhead: bool

    W3ActorLatentActionMoveAlongPathAwareOfTail:
      .extends: W3ActorLatentActionMoveAlongPath
      .adds:
        tailTag: CName
        startMovementDistance: float
        stopDistance: float

    W3ActorLatentActionMoveTo:
      .extends: IPresetActorLatentAction
      .adds:
        maxDistance: float
        moveSpeed: float
        moveType: EMoveType
        targetTag: CName
        rotateAfterwards: bool

    W3ActorLatentActionPlayAnimation:
      .extends: IPresetActorLatentAction
      .adds:
        eventStateName: CName

    W3ActorLatentActionSlotAnimation:
      .extends: IPresetActorLatentAction
      .adds:
        animName: CName
        slotName: CName

    W3ActorLatentActionBreakAnimations:
      .extends: IPresetActorLatentAction

    W3ActorLatentActionPlayVoiceSet:
      .extends: IPresetActorLatentAction
      .adds:
        voiceSet: string
        priority: int

    W3ActorLatentActionRotateTo:
      .extends: IPresetActorLatentAction
      .adds:
        targetTag: CName

    W3ActorLatentActionWalkToTargetWaitActor:
      .extends: IPresetActorLatentAction
      .adds:
        tag: CName
        maxDistance: float
        moveSpeed: float
        moveType: EMoveType
        waitForTag: CName
        timeout: float
        testDistance: float

    BTCondThreatLevelDifference:
      .extends: IBehTreeTask
      .adds:
        operator: EOperator
        value: int
        useCombatTarget: bool
        useNamedTarget: name
        saveTargetOnGameplayEvent: name
        m_Target: CNode

    BTCondThreatLevelDifferenceDef:
      .extends: IBehTreeConditionalTaskDefinition
      .adds:
        operator: EOperator
        value: int
        useCombatTarget: bool
        useNamedTarget: CBehTreeValCName
        saveTargetOnGameplayEvent: CBehTreeValCName

    CBTTaskAttack:
      .extends: CBTTaskPlayAnimationEventDecorator
      .adds:
        attackType: EAttackType
        stopTaskAfterDealingDmg: bool
        setAttackEndVarOnStopTask: bool
        useDirectionalAttacks: bool
        fxOnDamageInstigated: name
        fxOnDamageVictim: name
        soundEventOnDamageInstigated: name
        soundEventOnDamageVictim: name
        applyFXCooldown: float
        behVarNameOnDeactivation: name
        behVarValueOnDeactivation: float
        stopAllEfectsOnDeactivation: bool
        slideToTargetOnAnimEvent: bool
        slideToTargetMaximumDistance: float
        useCombatTarget: bool
        applyEffectType: EEffectType
        applyEffectTypeArray: array<EEffectType>
        customEffectDuration: float
        customEffectValue: float
        customEffectPercentValue: float
        applyEffectInAttackRange: name
        hitDestructablesInAttackRange: bool
        useActionBlend: bool
        stopTaskOnCustomItemCollision: bool
        spawnSparksFxOnCustomItemCollision: name
        resourceNameOfSparksFxEntity: name
        unavailableWhenInvisibleTarget: bool
        effectCooldown: float
        stopTask: bool
        fxTimeCooldown: float
        damageInstigatedEventReceived: bool
        hitActionReactionEventReceived: bool
        hitTimeStamp: float
        extractedMotionDisabled: bool

    CBTTaskAttackDef:
      .extends: CBTTaskPlayAnimationEventDecoratorDef
      .adds:
        attackType: EAttackType
        stopTaskAfterDealingDmg: bool
        setAttackEndVarOnStopTask: bool
        useDirectionalAttacks: bool
        fxOnDamageInstigated: name
        fxOnDamageVictim: name
        soundEventOnDamageInstigated: name
        soundEventOnDamageVictim: name
        applyFXCooldown: float
        behVarNameOnDeactivation: name
        behVarValueOnDeactivation: float
        stopAllEfectsOnDeactivation: bool
        slideToTargetOnAnimEvent: bool
        slideToTargetMaximumDistance: float
        useCombatTarget: bool
        useActionBlend: bool
        attackParameter: CBehTreeValInt
        applyEffectInAttackRange: name
        hitDestructablesInAttackRange: bool
        applyEffectType: EEffectType
        applyEffectTypeArray: array<EEffectType>
        stopTaskOnCustomItemCollision: bool
        spawnSparksFxOnCustomItemCollision: name
        resourceNameOfSparksFxEntity: name
        customEffectDuration: float
        customEffectValue: float
        customEffectPercentValue: float
        unavailableWhenInvisibleTarget: bool

    CBTTaskDespawn:
      .extends: IBehTreeTask
      .adds:
        callFromQuest: bool
        destroyCooldown: float
        despawn: bool
        disappearfxName: name
        emptyName: name
        despawnEventName: name
        raiseEventName: name

    CBTTaskDespawnDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        callFromQuest: bool
        despawnEventName: name
        disappearfxName: name
        raiseEventName: name
        destroyCooldown: float

    BTTaskEmpty:
      .extends: IBehTreeTask

    BTTaskEmptyDef:
      .extends: IBehTreeTaskDefinition

    BTTaskEncounterCheck:
      .extends: IBehTreeTask
      .adds:
        encounter: CEncounter
        taskExecuted: bool

    BTTaskEncounterCheckDef:
      .extends: IBehTreeTaskDefinition

    CBTTaskMagicCoilAttack:
      .extends: CBTTaskAttack
      .adds:
        fxNames: array<name>
        playFxInterval: float
        shootProjectileRange: float
        shootProjectileInterval: float
        deactivateAfter: float
        setBehVarOnDeactivation: name
        setBehVarValueOnDeactivation: float
        useActorHeading: bool
        activateOnAnimEvent: name
        projResourceName: name
        fxOnDamageInstigatedQuen: name
        m_collisionGroups: array<name>
        m_projectile: W3AdvancedProjectile
        m_projEntity: CEntityTemplate
        m_numberOfFxActivated: int
        m_activated: bool

    CBTTaskMagicCoilAttackDef:
      .extends: CBTTaskAttackDef
      .adds:
        fxNames: array<name>
        playFxInterval: float
        shootProjectileRange: float
        shootProjectileInterval: float
        deactivateAfter: float
        setBehVarOnDeactivation: name
        setBehVarValueOnDeactivation: float
        useActorHeading: bool
        activateOnAnimEvent: name
        projResourceName: name
        fxOnDamageInstigatedQuen: name

    CBTTaskRaiseAnimationEvent:
      .extends: IBehTreeTask
      .adds:
        eventName: name
        forceEvent: bool
        onActivate: bool
        onDeactivate: bool
        raiseEventAfter: float

    CBTTaskRaiseAnimationEventDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        eventName: name
        forceEvent: bool
        onActivate: bool
        onDeactivate: bool
        raiseEventAfter: float

    BTSaveNamedTargetOnEvent:
      .extends: IBehTreeTask
      .adds:
        namedTargetToSave: name
        saveUnder: name
        gameplayEventToSaveOn: name

    BTSaveNamedTargetOnEventDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        namedTargetToSave: name
        saveUnder: CBehTreeValCName
        gameplayEventToSaveOn: CBehTreeValCName

    BTTaskSaveTargetPosAsCustomTarget:
      .extends: IBehTreeTask
      .adds:
        useActionTarget: bool
        onDeactivate: bool
        snapToGround: bool

    BTTaskSaveTargetPosAsCustomTargetDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        useActionTarget: bool
        onDeactivate: bool
        snapToGround: bool

    CBTTaskSelectTargetFromList:
      .extends: IBehTreeTask
      .adds:
        targetList: array<name>
        currentTargetIndex: int
        currentTarget: CNode
        targetToSelect: CNode

    CBTTaskSelectTargetFromListDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        targetList: array<name>

    CBTTaskSendTutorialEvent:
      .extends: IBehTreeTask
      .adds:
        onActivation: bool
        onDeactivation: bool
        guardSwordWarning: bool
        guardGeneralWarning: bool
        guardLootingWarning: bool

    CBTTaskSendTutorialEventDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        onActivation: bool
        onDeactivation: bool
        guardSwordWarning: bool
        guardGeneralWarning: bool
        guardLootingWarning: bool

    BTTaskSoundSwitch:
      .extends: IBehTreeTask
      .adds:
        swichGroupName: name
        stateName: string
        onActivate: bool
        onDeactivate: bool

    BTTaskSoundSwitchDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        swichGroupName: name
        stateName: string
        onActivate: bool
        onDeactivate: bool

    CBTTaskSwarm:
      .extends: CBTTaskAttack
      .adds:
        lair: CFlyingSwarmMasterLair
        entities: array<CGameplayEntity>
        i: int

    CBTTaskSwarmDef:
      .extends: CBTTaskPlayAnimationEventDecoratorDef

    CBTTaskPlaySyncedAnimation:
      .extends: IBehTreeTask
      .adds:
        isRunning: bool
        shouldStartAnimation: bool
        syncInstance: CAnimationManualSlotSyncInstance
        sequenceIndex: int
        forceEventOnEnd: name
        gameplayEventOnEnd: name
        finisherSyncAnim: bool
        completeSuccess: bool

    CBTTaskPlaySyncedAnimationDef:
      .extends: IBehTreeTaskDefinition

    CBTTaskWait:
      .extends: IBehTreeTask
      .adds:
        Delay: float

    CBTTaskWaitDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        Delay: float

    CBTTaskForceWait:
      .extends: IBehTreeTask
      .adds:
        available: bool
        Delay: float
        Event: name

    CBTTaskForceWaitDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        Delay: float
        Event: name

    BTTask_DebugLog:
      .extends: IBehTreeTask
      .adds:
        taskName: string

    BTTask_DebugLogDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        taskName: string

    CBTTaskAnimalSetIsScared:
      .extends: IBehTreeTask
      .adds:
        value: bool
        setOnDeactivate: bool
        animalData: CAIStorageAnimalData

    CBTTaskAnimalSetIsScaredDef:
      .extends: IBehTreeHorseTaskDefinition
      .adds:
        value: bool
        setOnDeactivate: bool

    CBTCondAnimalIsScared:
      .extends: IBehTreeTask
      .adds:
        animalData: CAIStorageAnimalData

    CBTCondAnimalIsScaredDef:
      .extends: IBehTreeHorseConditionalTaskDefinition

    CBTCondAnimalFlee:
      .extends: IBehTreeTask
      .adds:
        chanceOfBeingScared: float
        chanceOfBeingScaredRerollTime: float
        scaredIfTargetRuns: bool
        maxTolerableTargetDistance: float
        rollSaysScared: bool
        rerollChanceTime: float

    CBTCondAnimalFleeDef:
      .extends: IBehTreeHorseConditionalTaskDefinition
      .adds:
        chanceOfBeingScared: CBehTreeValFloat
        chanceOfBeingScaredRerollTime: CBehTreeValFloat
        scaredIfTargetRuns: CBehTreeValBool
        maxTolerableTargetDistance: CBehTreeValFloat

    CBTTaskReactToHostility:
      .extends: IBehTreeTask

    CBTTaskReactToHostilityDef:
      .extends: IBehTreeTaskDefinition

    CBTTask3StageIdle:
      .extends: IBehTreeTask
      .adds:
        minTime: float
        maxTime: float
        loopTime: float

    CBTTask3StateIdleDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        minTime: float
        maxTime: float

    CMoveTRGAnimalFlee:
      .extends: CMoveTRGScript

    CBTTaskAnimalFlee:
      .extends: IBehTreeTask
      .adds:
        maxDistance: float
        heading: float
        initialPosCheck: bool
        isMoving: bool
        alertRadius: float
        ignoreEntitiesWithTag: name
        moveType: EMoveType
        initialPos: Vector
        checkPos: Vector

    CBTTaskAnimalFleeDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        maxDistance: float
        alertRadius: float
        ignoreEntitiesWithTag: name
        moveType: EMoveType

    CBTTaskAxiiCharmMonitor:
      .extends: IBehTreeTask
      .adds:
        wasCharmed: bool
        removeCharmCooldown: float

    CBTTaskAxiiCharmMonitorDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        removeCharmCooldown: float

    CBTTaskNervousState:
      .extends: IBehTreeTask
      .adds:
        dangerRadius: float
        rearingChance: float
        kickChance: float
        callFromQuestOnly: bool
        force: bool
        called: bool
        dangerNode: CNode

    CBTTaskNervousStateDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        callFromQuestOnly: bool
        dangerRadius: float
        rearingChance: float
        kickChance: float

    CBTTask3StateAttack:
      .extends: CBTTaskAttack
      .adds:
        loopTime: float
        endTaskWhenOwnerGoesPastTarget: bool
        endLoopOnDistance: bool
        distanceToTarget: float
        stopRotatingWhenTargetIsBehind: bool
        playFXOnLoopStart: name
        playLoopFXInterval: float
        raiseEventName: name
        startDeactivationEventName: name
        endDeactivationEventName: name
        startPos: Vector
        lastFXTime: float

    CBTTask3StateAttackDef:
      .extends: CBTTaskAttackDef
      .adds:
        loopTime: float
        endTaskWhenOwnerGoesPastTarget: bool
        endLoopOnDistance: bool
        distanceToTarget: float
        stopRotatingWhenTargetIsBehind: bool
        playFXOnLoopStart: name
        playLoopFXInterval: float
        raiseEventName: name
        startDeactivationEventName: name
        endDeactivationEventName: name

    CBTTask3StateWithRot:
      .extends: CBTTask3StateAttack
      .adds:
        endLeft: EAttackType
        endRight: EAttackType

    CBTTask3StateWithRotDef:
      .extends: CBTTask3StateAttackDef
      .adds:
        endLeft: EAttackType
        endRight: EAttackType

    CBTTask3StateWithDist:
      .extends: CBTTask3StateAttack
      .adds:
        distance: float
        endLess: EAttackType
        endMore: EAttackType

    CBTTask3StateWithDistDef:
      .extends: CBTTask3StateAttackDef
      .adds:
        distance: float
        endLess: EAttackType
        endMore: EAttackType

    CBTTask3StateWithDistAndRot:
      .extends: CBTTask3StateAttack
      .adds:
        distance: float
        endLeft: EAttackType
        endRight: EAttackType

    CBTTask3StateWithDistAndRotDef:
      .extends: CBTTask3StateAttackDef
      .adds:
        distance: float
        endLeft: EAttackType
        endRight: EAttackType

    CBTTask3StateAddEffectAttack:
      .extends: CBTTask3StateAttack
      .adds:
        applyEffectInRange: float
        applyEffectInCone: float
        applyEffectInterval: float
        effectType: EEffectType
        effectDuration: float
        effectValue: float
        effectPercentValue: float
        activated: bool

    CBTTask3StateAddEffectAttackDef:
      .extends: CBTTask3StateAttackDef
      .adds:
        applyEffectInRange: float
        applyEffectInCone: float
        applyEffectInterval: float
        effectType: EEffectType
        effectDuration: float
        effectValue: float
        effectPercentValue: float

    CBTTask3StateCharge:
      .extends: CBTTask3StateAttack
      .adds:
        differentChargeEndings: bool
        bCollisionWithActor: bool
        loopStart: bool
        isEnding: bool
        attached: bool
        cameraIndex: int
        collidedActor: CActor

    CBTTask3StateChargeDef:
      .extends: CBTTask3StateAttackDef
      .adds:
        differentChargeEndings: bool

    CBTTask3StateProjectileAttack:
      .extends: CBTTask3StateAttack
      .adds:
        attackRange: float
        projEntity: CEntityTemplate
        projectileName: name
        dodgeable: bool
        useLookatTarget: bool
        dontShootAboveAngleDistanceToTarget: float
        projectiles: array<W3AdvancedProjectile>
        collisionGroups: array<name>

    CBTTask3StateProjectileAttackDef:
      .extends: CBTTask3StateAttackDef
      .adds:
        attackRange: float
        projectileName: name
        dodgeable: bool
        useLookatTarget: bool
        dontShootAboveAngleDistanceToTarget: float

    CBTTask3StateTaunt:
      .extends: CBTTaskPlayAnimationEventDecorator
      .adds:
        tauntType: ETauntType
        raiseEventName: name
        minDuration: float
        maxDuration: float
        res: bool

    CBTTask3StateTauntDef:
      .extends: CBTTaskPlayAnimationEventDecoratorDef
      .adds:
        tauntType: ETauntType
        raiseEventName: name
        minDuration: float
        maxDuration: float

    CBTTaskAddEffectToTarget:
      .extends: IBehTreeTask
      .adds:
        onActivate: bool
        onEvent: bool
        onDeactivate: bool
        eventName: name
        useLookAt: bool
        applyEffectInterval: float
        applyEffectForTime: float
        applyEffectInRange: float
        applyEffectInCone: float
        effectType: EEffectType
        effectDuration: float
        effectValue: float
        effectValuePerc: float
        applyOnOwner: bool
        customFXName: name
        breakQuen: bool
        activated: bool
        timeStamp: float

    CBTTaskAddEffectToTargetDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        onActivate: bool
        onEvent: bool
        onDeactivate: bool
        useLookAt: bool
        applyEffectInterval: float
        applyEffectForTime: float
        applyEffectInRange: float
        applyEffectInCone: float
        eventName: name
        effectType: EEffectType
        effectDuration: float
        effectValue: float
        effectValuePerc: float
        applyOnOwner: bool
        customFXName: name
        breakQuen: bool

    BTTaskAdditiveHitListener:
      .extends: IBehTreeTask
      .adds:
        playHitSound: bool
        sounEventName: string
        boneName: name
        manageIgnoreSignsEvents: bool
        angleToIgnoreSigns: float
        chanceToUseAdditive: float
        increaseHitCounterOnlyOnMeleeDmg: bool
        processCounter: bool
        damageIsMelee: bool
        timeStamp: float
        hitsToRaiseGuard: float
        raiseGuardChance: float
        hitsToCounter: float
        counterChance: float
        counterStaminaCost: float

    BTTaskAdditiveHitListenerDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        playHitSound: bool
        sounEventName: string
        boneName: name
        manageIgnoreSignsEvents: bool
        angleToIgnoreSigns: float
        chanceToUseAdditive: float
        increaseHitCounterOnlyOnMeleeDmg: bool
        processCounter: bool

    BTTaskAdditiveTaunt:
      .extends: IBehTreeTask
      .adds:
        distMin: float
        distMax: float

    BTTaskAdditiveTauntDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        distMin: float
        distMax: float

    CBTTaskBoatAttack:
      .extends: IBehTreeTask
      .adds:
        m_TargetBoat: CEntity
        m_LockedSlot: name

    CBTTaskBoatAttackDef:
      .extends: IBehTreeTaskDefinition

    CBTTaskBoatGrab:
      .extends: IBehTreeTask
      .adds:
        m_Collided: bool
        m_TargetBoat: CEntity
        m_ClosestSlot: name

    CBTTaskBoatGrabDef:
      .extends: IBehTreeTaskDefinition

    CBTTaskCastSign:
      .extends: CBTTaskAttack
      .adds:
        resourceName: name
        entityTemplate: CEntityTemplate
        signEntity: W3SignEntity
        action: W3DamageAction
        signType: ESignType
        attackRangeName: name
        signOwner: W3SignOwnerBTTaskCastSign

    CBTTaskCastSignDef:
      .extends: CBTTaskPlayAnimationEventDecoratorDef

    CBTTaskCastAard:
      .extends: CBTTaskCastSign

    CBTTaskCastAardDef:
      .extends: CBTTaskCastSignDef

    CBTTaskCastIgni:
      .extends: CBTTaskCastSign

    CBTTaskCastIgniDef:
      .extends: CBTTaskCastSignDef

    CBTTaskCastQuen:
      .extends: CBTTaskCastSign
      .adds:
        completeAfterHit: bool
        alternateFireMode: bool
        processQuenOnCounterActivation: bool
        hitEventReceived: bool
        hitEntity: CEntity
        hitEntityTemplate: CEntityTemplate
        ownerBoneIndex: int
        shieldActive: bool
        humanCombatDataStorage: CHumanAICombatStorage
        playEffectTimeStamp: float

    CBTTaskCastQuenDef:
      .extends: CBTTaskCastSignDef
      .adds:
        completeAfterHit: bool
        alternateFireMode: bool
        processQuenOnCounterActivation: bool

    CBTTaskCharge:
      .extends: CBTTaskAttack
      .adds:
        raiseEventOnActivation: name
        raiseEventOnObstacleCollision: name
        handleCollisionWithObstacle: bool
        checkLineOfSight: bool
        dealDamage: bool
        endTaskWhenOwnerGoesPastTarget: bool
        chargeType: EChargeAttackType
        forceCriticalEffect: bool
        forceCriticalEffectNpcOnly: bool
        bCollisionWithActor: bool
        bCollisionWithObstacle: bool
        activated: bool
        xmlDamageName: name
        collidedActor: CActor
        collidedEntity: CGameplayEntity
        collidedProbedEntity: CGameplayEntity
        hadForceCriticalStates: bool

    CBTTaskChargeDef:
      .extends: CBTTaskAttackDef
      .adds:
        raiseEventOnActivation: name
        raiseEventOnObstacleCollision: name
        handleCollisionWithObstacle: bool
        checkLineOfSight: bool
        dealDamage: bool
        endTaskWhenOwnerGoesPastTarget: bool
        chargeType: EChargeAttackType
        forceCriticalEffect: bool
        forceCriticalEffectNpcOnly: bool

    CBTTaskCombatStorage:
      .extends: IBehTreeTask
      .adds:
        combatDataStorage: CBaseAICombatStorage
        setIsShooting: bool
        setIsAiming: bool

    CBTTaskCombatStorageDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        setIsShooting: bool
        setIsAiming: bool

    CBehTreeTaskCombatStorageCleanup:
      .extends: IBehTreeTask
      .adds:
        combatDataStorage: CHumanAICombatStorage

    CBehTreeTaskCombatStorageCleanupDef:
      .extends: IBehTreeTaskDefinition

    CBTTaskPreCombatWarning:
      .extends: IBehTreeTask
      .adds:
        combatDataStorage: CBaseAICombatStorage
        setFlagOnActivate: bool
        setFlagOnDectivate: bool
        flag: bool

    CBTTaskPreCombatWarningDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        setFlagOnActivate: bool
        setFlagOnDectivate: bool
        flag: bool

    CBTTaskGetPreCombatWarning:
      .extends: IBehTreeTask
      .adds:
        combatDataStorage: CBaseAICombatStorage
        setFlagOnActivate: bool
        setFlagOnDectivate: bool
        flag: bool

    CBTTaskGetPreCombatWarningDef:
      .extends: IBehTreeTaskDefinition

    CBehTreeCombatTargetSelectionTask:
      .extends: IBehTreeTask
      .adds:
        maxTargetDistance: float
        testMaxFrequency: float
        nextTestDelay: float
        nextTarget: CActor
        playerPriority: int
        targetOnlyPlayer: bool
        ForceTarget: CActor

    CBehTreeCombatTargetSelectionTaskDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        maxTargetDistance: float
        playerPriority: int
        targetOnlyPlayer: bool

    CBTTaskCounterDecorator:
      .extends: IBehTreeTask

    CBTTaskCounterDecoratorDef:
      .extends: IBehTreeTaskDefinition

    CBTCondIsCountering:
      .extends: IBehTreeTask

    CBTCondIsCounteringDef:
      .extends: IBehTreeTaskDefinition

    CBTTaskDash:
      .extends: IBehTreeTask
      .adds:
        slideBehindTarget: bool
        destinationOffset: float
        disableCollision: bool
        dealDamageOnContact: bool
        damageVal: float
        sideStepDist: float
        sideStepHeadingOffset: float
        disableGameplayVisibility: bool
        sendRotationEventAboveDashDist: float
        isSliding: bool
        hitEntities: array<CEntity>
        collisionGroupsNames: array<name>

    CBTTaskDashDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        slideBehindTarget: bool
        destinationOffset: float
        disableCollision: bool
        dealDamageOnContact: bool
        damageVal: float
        sideStepDist: float
        sideStepHeadingOffset: float
        disableGameplayVisibility: bool
        sendRotationEventAboveDashDist: float

    CBTTaskDefend:
      .extends: IBehTreeTask
      .adds:
        useCustomHits: bool
        listenToParryEvents: bool
        completeTaskOnIsDefending: bool
        minimumDuration: float
        playParrySound: bool
        m_activationTime: float

    CBTTaskDefendDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        useCustomHits: bool
        listenToParryEvents: bool
        completeTaskOnIsDefending: bool
        minimumDuration: float
        playParrySound: bool

    CBTTaskDelay:
      .extends: IBehTreeTask
      .adds:
        delay: float
        nextActionTime: float

    CBTTaskDelayDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        delay: float

    CBTTaskActivateOnlyOnce:
      .extends: IBehTreeTask
      .adds:
        successOnly: bool
        resetWhenReattachFromPool: bool
        resetOnGameplayEvent: name
        wasActivated: bool

    CBTTaskActivateOnlyOnceDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        successOnly: bool
        resetWhenReattachFromPool: bool
        resetOnGameplayEvent: name

    CBTTaskDodge:
      .extends: CBTTaskPlayAnimationEventDecorator
      .adds:
        dodgeChanceAttackLight: int
        dodgeChanceAttackHeavy: int
        dodgeChanceAard: int
        dodgeChanceIgni: int
        dodgeChanceBomb: int
        dodgeChanceProjectile: int
        dodgeChanceFear: int
        counterChance: float
        counterMultiplier: float
        hitsToCounter: int
        Time2Dodge: bool
        dodgeType: EDodgeType
        dodgeDirection: EDodgeDirection
        dodgeTime: float
        dodgeEventTime: float
        nextDodgeTime: float
        performDodgeDelay: float
        ownerPosition: Vector
        swingType: int
        swingDir: int
        navmeshCheckDist: float
        minDelayBetweenDodges: float
        maxDistanceFromTarget: float
        movementAdjustorSlideDistance: float
        disableIsDodgingFlagAfter: float
        allowDodgeWhileAttacking: bool
        signalGameplayEventWhileInHitAnim: bool
        alwaysAvailableOnDodgeType: EDodgeType
        allowDodgeOverlap: bool
        earlyDodgeActivation: bool
        interruptTaskToExecuteCounter: bool
        ignoreDodgeChanceStats: bool
        delayDodgeHeavyAttack: float

    CBTTaskDodgeDef:
      .extends: CBTTaskPlayAnimationEventDecoratorDef
      .adds:
        navmeshCheckDist: float
        minDelayBetweenDodges: float
        maxDistanceFromTarget: float
        movementAdjustorSlideDistance: float
        disableIsDodgingFlagAfter: float
        allowDodgeWhileAttacking: bool
        signalGameplayEventWhileInHitAnim: bool
        alwaysAvailableOnDodgeType: EDodgeType
        allowDodgeOverlap: bool
        earlyDodgeActivation: bool
        interruptTaskToExecuteCounter: bool
        ignoreDodgeChanceStats: bool
        delayDodgeHeavyAttack: float

    CBTTaskCombatStyleDodge:
      .extends: CBTTaskDodge
      .adds:
        parentCombatStyle: EBehaviorGraph
        humanCombatDataStorage: CHumanAICombatStorage

    CBTTaskCombatStyleDodgeDef:
      .extends: CBTTaskDodgeDef
      .adds:
        parentCombatStyle: CBTEnumBehaviorGraph

    CBTTaskCircularDodge:
      .extends: CBTTaskDodge
      .adds:
        angle: float

    CBTTaskCircularDodgeDef:
      .extends: CBTTaskDodgeDef
      .adds:
        angle: float

    CBehTreeTaskEquipMonsterWeapons:
      .extends: IBehTreeTask

    CBehTreeTaskEquipMonsterWeaponsDef:
      .extends: IBehTreeTaskDefinition

    CBTTaskEquipItem:
      .extends: IBehTreeTask
      .adds:
        itemCategory: name

    CBTTaskEquipItemDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        itemCategory: name

    CBTTaskFear:
      .extends: CBTTaskPlayAnimationEventDecorator
      .adds:
        useDirectionalAnims: bool

    CBTTaskFearDef:
      .extends: CBTTaskPlayAnimationEventDecoratorDef
      .adds:
        useDirectionalAnims: bool

    CBTTaskFinishable:
      .extends: IBehTreeTask
      .adds:
        finisherAnimName: name

    CBTTaskFinishableDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        finisherAnimName: name

    CBTTaskEndFinisherOnDeactivate:
      .extends: IBehTreeTask

    CBTTaskEndFinisherOnDeactivateDef:
      .extends: IBehTreeTaskDefinition

    BTTaskFrostAreaAttack:
      .extends: IBehTreeTask
      .adds:
        duration: SRangeF
        spreadingSpeed: float
        maxRadius: float
        spawnAtOnce: SRange
        createArena: bool
        arenaAngle: float
        scaleSpawnQuantityWithRadius: bool
        spawnAttackDelay: SRangeF
        spawnAttackOnTargetDelay: SRangeF
        spawnedEntityTemplates: array<CEntityTemplate>
        frostWallReloadDelay: float
        m_Npc: CNewNPC
        m_MinAttackRange: float
        m_FrostRange: float
        m_TimeToAttackOnTarget: float
        m_PostFxOnGroundCmp: W3PostFXOnGroundComponent

    BTTaskFrostAreaAttackDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        spawnedEntities: array<name>
        duration: SRangeF
        spreadingSpeed: float
        maxRadius: float
        spawnAtOnce: SRange
        createArena: bool
        arenaAngle: float
        scaleSpawnQuantityWithRadius: bool
        spawnAttackDelay: SRangeF
        spawnAttackOnTargetDelay: SRangeF
        frostWallReloadDelay: float

    BTTaskFrostSnakeAttack:
      .extends: CBTTaskAttack
      .adds:
        useActionTarget: bool
        spawnedEntityTemplates: array<CEntityTemplate>
        duration: SRangeF
        clampDurationWhenTargetReached: float
        speed: float
        radius: float
        spawnAtOnce: SRange
        spawnAttackDelay: SRangeF
        maxDistance: float
        abortAttackOnTargetReached: bool
        ThreeStateAttack: bool
        loopHeadFX: bool
        waitForAnimEventToSummon: name
        snakeHeadTemplate: CEntityTemplate
        playEffectOnOwner: name
        additionalSnakeHeadFXName: name
        destroyEffectDelay: float
        canTriggerFrenzySlowmo: bool
        m_Npc: CNewNPC
        m_SnakeHead: CEntity
        m_SnakeHeadPos: Vector
        m_LastSnakeHeadPos: Vector
        m_effectDummyComp: CEffectDummyComponent
        m_PlayEffect: bool
        m_CanStartSummon: bool

    BTTaskFrostSnakeAttackDef:
      .extends: CBTTaskAttackDef
      .adds:
        useActionTarget: bool
        spawnedEntityTemplates: array<CEntityTemplate>
        clampDurationWhenTargetReached: CBehTreeValFloat
        duration: SRangeF
        maxDistance: float
        speed: float
        radius: float
        spawnAtOnce: SRange
        spawnAttackDelay: SRangeF
        snakeHeadTemplate: CEntityTemplate
        additionalSnakeHeadFXName: name
        playEffectOnOwner: name
        ThreeStateAttack: bool
        loopHeadFX: bool
        destroyEffectDelay: float
        waitForAnimEventToSummon: name
        canTriggerFrenzySlowmo: bool

    CBTTaskImlerithShieldDestruction:
      .extends: IBehTreeTask
      .adds:
        firstTreshold: float
        secondTreshold: float
        thirdTreshold: float
        finalTreshold: float
        dropShield: bool
        shield: CEntity
        shieldState: int

    CBTTaskImlerithShieldDestructionDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        firstTreshold: float
        secondTreshold: float
        thirdTreshold: float
        finalTreshold: float
        dropShield: bool

    CBTTaskIsFriendlyNearTarget:
      .extends: IBehTreeTask
      .adds:
        useCombatTarget: bool
        considerOwnerAsFriendly: bool
        radius: float

    CBTTaskIsFriendlyNearTargetDef:
      .extends: IBehTreeConditionalTaskDefinition
      .adds:
        useCombatTarget: bool
        considerOwnerAsFriendly: bool
        radius: float

    CBTTaskIsHostileAndNoFriendlyNearTarget:
      .extends: IBehTreeTask
      .adds:
        useCombatTarget: bool
        radius: float

    CBTTaskIsHostileAndNoFriendlyNearTargetDef:
      .extends: IBehTreeConditionalTaskDefinition
      .adds:
        useCombatTarget: bool
        radius: float

    CBTTaskJumpBack:
      .extends: CBTTaskPlayAnimationEventDecorator
      .adds:
        chance: int
        checkRotation: bool
        distance: float

    CBTTaskJumpBackDef:
      .extends: CBTTaskPlayAnimationEventDecoratorDef
      .adds:
        checkRotation: bool
        chance: int
        distance: float

    CBTTaskKill:
      .extends: IBehTreeTask
      .adds:
        actor: CActor
        owner: CActor
        fact: string
        value: int
        validFor: int
        signalGameplayEvent: name
        playEffectOnKill: name
        self: bool
        target: bool
        player: bool
        onlyBelowHealthPercent: float
        onDamageTaken: bool
        onAardHit: bool
        onIgniHit: bool
        onAxiiHit: bool
        onHeadshot: bool
        onCustomHit: bool
        onActivate: bool
        onDeactivate: bool
        onListenToGameplayEvents: bool
        setBehVarOnKill: name
        behVarValue: float

    CBTTaskKillDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        fact: string
        value: int
        validFor: int
        signalGameplayEvent: name
        playEffectOnKill: name
        onActivate: bool
        onDeactivate: bool
        target: bool
        player: bool
        self: bool
        onlyBelowHealthPercent: float
        onAardHit: bool
        onIgniHit: bool
        onAxiiHit: bool
        onCustomHit: bool
        onHeadshot: bool
        onDamageTaken: bool
        onListenToGameplayEvents: bool
        setBehVarOnKill: name
        behVarValue: float

    CBTTaskCollisionAttack:
      .extends: CBTTaskAttack

    CBTTaskCollisionAttackDef:
      .extends: CBTTaskAttackDef

    CBTTaskMagicAttack:
      .extends: CBTTaskCollisionAttack
      .adds:
        dodgeable: bool
        fxDummyEntityTag: name
        effectName: name
        dummyEntityEffectName: name

    CBTTaskMagicAttackDef:
      .extends: CBTTaskCollisionAttackDef
      .adds:
        dodgeable: bool
        effectName: name
        fxDummyEntityTag: name
        dummyEntityEffectName: name

    CBTTaskMagicMeleeAttack:
      .extends: CBTTaskMagicAttack
      .adds:
        resourceName: name
        fxOnAnimEvent: array<SFxOnAnimEvent>
        effectEntityTemplate: CEntityTemplate
        entity: CEntity
        dealDmgOnDeactivate: bool
        couldntLoadResource: bool
        effectHitName: name
        foundPos: bool
        pos: Vector
        rot: EulerAngles

    CBTTaskMagicMeleeAttackDef:
      .extends: CBTTaskMagicAttackDef
      .adds:
        resourceName: CBehTreeValCName
        fxOnAnimEvent: array<SFxOnAnimEvent>

    CBTTaskMagicRangeAttack:
      .extends: CBTTaskMagicAttack

    CBTTaskMagicRangeAttackDef:
      .extends: CBTTaskMagicAttackDef

    CBTTaskMagicFXAttack:
      .extends: CBTTaskMagicAttack
      .adds:
        resourceName: name
        effectEntityTemplate: CEntityTemplate
        dealDmgOnDeactivate: bool
        couldntLoadResource: bool

    CBTTaskMagicFXAttackDef:
      .extends: CBTTaskMagicAttackDef
      .adds:
        resourceName: name

    CBTTaskMagicBomb:
      .extends: CBTTaskAttack
      .adds:
        resourceName: name
        targetPos: Vector
        targetRot: EulerAngles
        entity: CEntity
        entityTemplate: CEntityTemplate

    CBTTaskMagicBombDef:
      .extends: CBTTaskAttackDef
      .adds:
        resourceName: name

    BTTaskManageHPRegenEffects:
      .extends: BTTaskIrisTask
      .adds:
        ResumeEffect: bool
        OnDeactivate: bool

    BTTaskManageHPRegenEffectsDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        ResumeEffect: bool
        OnDeactivate: bool

    CBTTaskPerformParry:
      .extends: CBTTaskPlayAnimationEventDecorator
      .adds:
        activationTimeLimitBonusHeavy: float
        activationTimeLimitBonusLight: float
        checkParryChance: bool
        interruptTaskToExecuteCounter: bool
        allowParryOverlap: bool
        activationTimeLimit: float
        action: CName
        runMain: bool
        parryChance: float
        counterChance: float
        counterMultiplier: float
        hitsToCounter: int
        swingType: int
        swingDir: int

    CBTTaskPerformParryDef:
      .extends: CBTTaskPlayAnimationEventDecoratorDef
      .adds:
        activationTimeLimitBonusHeavy: CBehTreeValFloat
        activationTimeLimitBonusLight: CBehTreeValFloat
        checkParryChance: bool
        interruptTaskToExecuteCounter: bool
        allowParryOverlap: bool

    CBTTaskCombatStylePerformParry:
      .extends: CBTTaskPerformParry
      .adds:
        parentCombatStyle: EBehaviorGraph

    CBTTaskCombatStylePerformParryDef:
      .extends: CBTTaskPerformParryDef
      .adds:
        parentCombatStyle: CBTEnumBehaviorGraph

    CBTTaskPlayEventLatent:
      .extends: IBehTreeTask
      .adds:
        nodeDeactivationName: name
        playEventName: name
        eventIsForced: bool
        setVariable: bool
        variableName: name
        variableValue: float

    CBTTaskPlayEventLatentDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        nodeDeactivationName: name
        playEventName: name
        eventIsForced: bool
        setVariable: bool
        variableName: name
        variableValue: float

    CBTTaskProjectileAttack:
      .extends: CBTTaskAttack
      .adds:
        attackRange: float
        resourceName: name
        depotPathInsteadOfAlias: bool
        depotPath: string
        projEntity: CEntityTemplate
        wasShot: bool
        collisionGroups: array<name>
        homingProjectile: bool
        dodgeable: bool
        shootOnGround: bool
        useLookatTarget: bool
        startPosFrontOffset: float
        playFXOnShootProjectile: name
        shootOnEventName: name
        useCustomCollisionGroups: bool
        collideWithRagdoll: bool
        collideWithTerrain: bool
        collideWithStatic: bool
        collideWithWater: bool
        useCustomTargetWithTag: bool
        tagToFind: name
        distance: float
        couldntLoadResource: bool
        m_Projectiles: array<W3AdvancedProjectile>
        projectile: W3AdvancedProjectile

    CBTTaskProjectileAttackDef:
      .extends: CBTTaskAttackDef
      .adds:
        attackRange: CBehTreeValFloat
        resourceName: name
        depotPathInsteadOfAlias: bool
        depotPath: string
        parametrizedResourceName: CBehTreeValCName
        homingProjectile: bool
        dodgeable: bool
        shootOnGround: bool
        useLookatTarget: bool
        startPosFrontOffset: float
        playFXOnShootProjectile: name
        shootOnEventName: name
        useCustomCollisionGroups: bool
        collideWithRagdoll: bool
        collideWithTerrain: bool
        collideWithStatic: bool
        collideWithWater: bool
        useCustomTargetWithTag: bool
        tagToFind: name
        projEntity: CEntityTemplate

    CBTTaskProjectileAttackWithPrepare:
      .extends: CBTTaskProjectileAttack
      .adds:
        boneName: name
        rawTarget: bool
        shootInFront: bool
        shootInFrontOffset: float

    CBTTaskProjectileAttackWithPrepareDef:
      .extends: CBTTaskProjectileAttackDef
      .adds:
        boneName: name
        shootInFront: bool
        shootInFrontOffset: float
        rawTarget: bool
        useLookAtBone: bool
        lookAtBone: name

    CBTTaskReaction:
      .extends: IBehTreeTask
      .adds:
        counterChance: int
        dodgeChanceAttacks: int
        dodgeChanceAard: int
        dodgeChanceIgni: int
        dodgeChanceBomb: int
        dodgeChanceProjectile: int
        Time2Dodge: bool
        dodgeType: EDodgeType
        nextReactionTime: float
        reactionDelay: float

    CBTTaskReactionDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        counterChance: int
        dodgeChanceAttacks: int
        dodgeChanceAard: int
        dodgeChanceIgni: int
        dodgeChanceBomb: int
        dodgeChanceProjectile: int
        reactionDelay: float

    CBehTreeTaskRequiredItems:
      .extends: IBehTreeTask
      .adds:
        LeftItemType: CName
        RightItemType: CName
        chooseSilverIfPossible: bool
        destroyProjectileOnDeactivate: bool
        combatDataStorage: CHumanAICombatStorage
        processLeftItem: bool
        processRightItem: bool
        requiredItems: bool
        takeBowArrow: bool
        takeBolt: bool
        projResourceName: string
        projEntity: CEntityTemplate
        bolt: W3AdvancedProjectile

    CBehTreeTaskRequiredItemsDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        LeftItemType: CBehTreeValCName
        RightItemType: CBehTreeValCName
        chooseSilverIfPossible: CBehTreeValBool
        destroyProjectileOnDeactivate: bool

    IBehTreeTaskProcessProjectile:
      .extends: IBehTreeTask
      .adds:
        destroyProjectileOnDeactivate: bool
        combatDataStorage: CHumanAICombatStorage
        takeProjectile: bool
        projTemplate: CEntityTemplate

    IBehTreeTaskProcessProjectileDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        destroyProjectileOnDeactivate: bool
        projTemplate: CEntityTemplate

    CBehTreeTaskProcessArrows:
      .extends: IBehTreeTaskProcessProjectile

    CBehTreeTaskProcessArrowsDef:
      .extends: IBehTreeTaskProcessProjectileDef

    CBehTreeTaskProcessCrossbowBolts:
      .extends: IBehTreeTaskProcessProjectile
      .adds:
        bolt: W3AdvancedProjectile

    CBehTreeTaskProcessCrossbowBoltsDef:
      .extends: IBehTreeTaskProcessProjectileDef

    CBehTreeTaskSheathWeapons:
      .extends: IBehTreeTask
      .adds:
        processLeftItem: bool
        processRightItem: bool

    CBehTreeTaskSheathWeaponsDef:
      .extends: IBehTreeTaskDefinition

    CBehTreeTaskConditionalSheathWeapons:
      .extends: CBehTreeTaskSheathWeapons
      .adds:
        reactionDataStorage: CAIStorageReactionData

    CBehTreeTaskConditionalSheathWeaponsDef:
      .extends: IBehTreeTaskDefinition

    BTTaskSearchTarget:
      .extends: IBehTreeTask
      .adds:
        namedTarget: name
        m_LastKnowPosition: Vector

    BTTaskSearchTargetDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        namedTarget: name

    BTTaskSetAdditiveHitFlag:
      .extends: IBehTreeTask
      .adds:
        onDeactivate: bool
        onAnimEvent: name
        flag: bool
        additiveHits: bool
        additiveCriticalStates: bool
        overrideOnly: bool
        playNormalHitOnCritical: bool
        m_valueOnActivate: bool
        m_csValueOnActivate: bool
        m_waitingForEventEnd: bool

    BTTaskSetAdditiveHitFlagDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        onDeactivate: bool
        onAnimEvent: name
        flag: bool
        additiveHits: bool
        additiveCriticalStates: bool
        overrideOnly: bool
        playNormalHitOnCritical: bool

    CBTTaskShoot:
      .extends: CBTTaskPlayAnimationEventDecorator
      .adds:
        useCombatTarget: bool
        attackRange: float
        setArrowOnFire: bool
        dodgeable: bool
        arrow: W3ArrowProjectile
        projShot: bool

    CBTTaskShootDef:
      .extends: CBTTaskPlayAnimationEventDecoratorDef
      .adds:
        useCombatTarget: bool
        attackRange: CBehTreeValFloat
        dodgeable: bool
        setArrowOnFire: CBehTreeValBool

    CBTTaskSpawnEntityAttack:
      .extends: CBTTaskAttack
      .adds:
        offsetVector: Vector
        ressourceName: name
        entityTemplate: CEntityTemplate
        spawnAnimEventName: name
        completeAfterSpawn: bool
        m_summonerComponent: W3SummonerComponent
        couldntLoadResource: bool

    CBTTaskSpawnEntityAttackDef:
      .extends: CBTTaskAttackDef
      .adds:
        ressourceName: CBehTreeValCName
        spawnAnimEventName: name
        entityTemplate: CEntityTemplate
        offsetVector: Vector
        completeAfterSpawn: bool

    CBTTaskSpawnEntityOffset:
      .extends: CBTTaskPlayAnimationEventDecorator
      .adds:
        positionOffset: Vector
        npc: CNewNPC
        resourceName: name
        entityTemplate: CEntityTemplate
        completeAfterSpawn: bool
        complete: bool
        spawnEntityOnAnimEvent: bool
        addEntityToSummonerComponent: bool
        spawnAnimEventName: name
        tagToAdd: name
        onActivate: bool
        onDeactivate: bool
        addTagToEntity: bool
        destroyTaggedEntitiesOnDeactivate: bool
        entity: CEntity
        entities: array<CEntity>
        destroyEntityAfter: float
        spawnEntityAtNode: bool
        tagToFindNode: name
        m_summonerComponent: W3SummonerComponent
        couldntLoadResource: bool

    CBTTaskSpawnEntityOffsetDef:
      .extends: CBTTaskPlayAnimationEventDecoratorDef
      .adds:
        npc: CNewNPC
        resourceName: CBehTreeValCName
        entityTemplate: CEntityTemplate
        positionOffset: Vector
        completeAfterSpawn: bool
        complete: bool
        spawnEntityOnAnimEvent: bool
        spawnAnimEventName: name
        addEntityToSummonerComponent: bool
        addTagToEntity: bool
        tagToAdd: name
        onActivate: bool
        onDeactivate: bool
        destroyTaggedEntitiesOnDeactivate: bool
        destroyEntityAfter: float
        entity: CEntity
        entities: array<CEntity>
        spawnEntityAtNode: bool
        tagToFindNode: name

    CBTTaskSpawnSlidingEntity:
      .extends: CBTTaskSpawnEntityOffset
      .adds:
        component: CComponent
        slideComponent: W3SlideToTargetComponent
        targetNode: CNode
        timeToFollow: int
        timeStamp: float
        destroyAfter: float
        destroyAfterTimerEnds: bool
        destroyOnDeactivate: bool

    CBTTaskSpawnSlidingEntityDef:
      .extends: CBTTaskSpawnEntityOffsetDef
      .adds:
        slideComponent: W3SlideToTargetComponent
        targetNode: CNode
        timeToFollow: int
        destroyAfter: float
        destroyAfterTimerEnds: bool
        destroyOnDeactivate: bool

    CBTTaskSpawnMultipleEntitiesAttack:
      .extends: CBTTaskSpawnEntityAttack
      .adds:
        numberToSpawn: int
        numberOfCircles: int
        randomnessInCircles: float
        useRandomSpaceBetweenSpawns: bool
        spawnRadiusMin: float
        spawnRadiusMax: float
        spawnEntityRadius: float
        spawnPositionPattern: ESpawnPositionPattern
        spawnRotation: ESpawnRotation
        leaveOpenSpaceForDodge: bool
        spawnInRandomOrder: bool
        delayBetweenSpawn: float
        spawnOnGround: bool
        m_dodgeDistance: float
        m_dodgeSafeAreaRadius: float
        m_shouldSpawn: bool
        m_entitiesSpawned: int
        m_canComplete: bool

    CBTTaskSpawnMultipleEntitiesAttackDef:
      .extends: CBTTaskSpawnEntityAttackDef
      .adds:
        numberToSpawn: int
        numberOfCircles: int
        spawnPositionPattern: ESpawnPositionPattern
        randomnessInCircles: float
        useRandomSpaceBetweenSpawns: bool
        spawnRadiusMin: float
        spawnRadiusMax: float
        spawnEntityRadius: float
        spawnRotation: ESpawnRotation
        leaveOpenSpaceForDodge: bool
        delayBetweenSpawn: float
        spawnInRandomOrder: bool
        spawnOnGround: bool

    CBTTaskSpawnMultipleEntities3StateAttack:
      .extends: CBTTaskSpawnMultipleEntitiesAttack
      .adds:
        delayActivationTime: float
        loopTime: float
        endTime: float
        localTime: float
        spawnInterval: float
        decreaseLoopTimePerFailedCreateEntity: float
        spawnAdditionalEntityOnTargetPos: bool

    CBTTaskSpawnMultipleEntities3StateAttackDef:
      .extends: CBTTaskSpawnMultipleEntitiesAttackDef
      .adds:
        delayActivationTime: float
        loopTime: float
        spawnInterval: float
        decreaseLoopTimePerFailedCreateEntity: float
        spawnAdditionalEntityOnTargetPos: bool

    CBTTaskSpawnMultipleProjectilesAttack:
      .extends: CBTTaskSpawnMultipleEntitiesAttack
      .adds:
        projectileAngle: float
        projectileAngleRandomness: float
        projectileSpeed: float
        projectileSpeedRandomness: float
        dodgeable: bool

    CBTTaskSpawnMultipleProjectilesAttackDef:
      .extends: CBTTaskSpawnMultipleEntitiesAttackDef
      .adds:
        projectileAngle: float
        projectileAngleRandomness: float
        projectileSpeed: float
        projectileSpeedRandomness: float
        dodgeable: bool

    CBTTaskSpawnObject:
      .extends: IBehTreeTask
      .adds:
        useThisTask: bool
        objectTemplate: CEntityTemplate
        useAnimEvent: bool
        spawnAnimEventName: name
        useCombatTarget: bool
        spawnNodeTag: name
        spawnAtBonePosition: bool
        boneName: name
        spawnOnGround: bool
        groundZCheck: float
        spawnPositionOffset: Vector
        offsetInLocalSpace: bool
        randomizeOffset: bool
        spawnNodes: array<CNode>
        i: int
        size: int
        npc: CNewNPC

    CBTTaskSummonCreaturesDef:
      .extends: CBTTaskPlayAnimationEventDecoratorDef
      .adds:
        dontResummonUntilMinionsAreDead: bool
        preventActivationUntilMinionsAreDead: bool
        teleportOutsidePlayerFOV: bool
        killSummonedCreaturesOnSummonerDeath: bool
        spawnOnAnimEventName: name
        entityToSummonName: name
        raiseEventOnSummon: name
        overrideAttitude: bool
        attitudeToPlayer: EAIAttitude
        count: int
        minDistance: float
        maxDistance: float
        spawnAnimation: EExplorationMode
        forcedSpawnAnim: int
        spawnTag: name
        targetShouldBeAccessible: bool
        spawnerShouldBeAccessible: bool
        spawnConditionsCheckInterval: float
        spawnConditionsChecksNumber: int

    BTTaskSummonCreaturesOnSpots:
      .extends: IBehTreeTask
      .adds:
        entityToSpawn: CEntityTemplate
        summonOnAnimEvent: name
        spotTag: name
        minDistance: float
        maxDistance: float
        maxSpawnQuantity: int
        betweenSpawnDelay: SRangeF
        completeAfterSpawn: bool
        spawnAreaCenter: ETargetName
        minDistanceFromSpawner: float
        spawnBehVarName: name
        spawnBehVar: float
        shouldForceBehaviorOnSpawn: bool
        m_Npc: CNewNPC
        m_AllSpots: array<CNode>
        m_CreateEntityHelper: CCreateEntityHelper
        m_WaitingToSpawn: bool
        m_IsSpawned: bool

    BTTaskSummonCreaturesOnSpotsDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        entityToSpawn: CEntityTemplate
        summonOnAnimEvent: name
        spotTag: name
        minDistance: float
        maxDistance: float
        maxSpawnQuantity: int
        betweenSpawnDelay: SRangeF
        completeAfterSpawn: bool
        spawnAreaCenter: ETargetName
        minDistanceFromSpawner: float
        spawnBehVarName: name
        spawnBehVar: float
        shouldForceBehaviorOnSpawn: bool

    CBTTaskTaunt:
      .extends: CBTTaskPlayAnimationEventDecorator
      .adds:
        tauntType: ETauntType
        tauntDelay: float
        useXMLTauntChance: bool
        chance: int
        timeStamp: float

    CBTTaskTauntDef:
      .extends: CBTTaskPlayAnimationEventDecoratorDef
      .adds:
        tauntType: ETauntType
        tauntDelay: float
        useXMLTauntChance: bool

    CBTTaskThrowBomb:
      .extends: CBTTaskAttack
      .adds:
        thrownEntity: W3Petard
        inventory: CInventoryComponent
        bombs: array<SItemUniqueId>
        cachedTargetPos: Vector
        dontUseDiwmeritium: bool
        activationChance: float

    CBTTaskThrowBombDef:
      .extends: CBTTaskAttackDef
      .adds:
        dontUseDiwmeritium: bool
        activationChance: float

    CBTTaskThrowDwimeritiumBomb:
      .extends: CBTTaskThrowBomb

    CBTTaskThrowDwimeritiumBombDef:
      .extends: CBTTaskThrowBombDef

    CTicketAlgorithmSimple:
      .extends: ITicketAlgorithmScript

    CTicketAlgorithmSimpleDefinition:
      .extends: ITicketAlgorithmScriptDefinition

    CTicketAlgorithmCheckHP:
      .extends: ITicketAlgorithmScript

    CTicketAlgorithmCheckHPDefinition:
      .extends: ITicketAlgorithmScriptDefinition

    CTicketBaseAlgorithm:
      .extends: ITicketAlgorithmScript
      .adds:
        resetImportanceOnSpecialCombatAction: bool
        threatLevelBonus: float
        activationBonus: float

    CTicketBaseAlgorithmDefinition:
      .extends: ITicketAlgorithmScriptDefinition

    CTicketAlgorithmApproach:
      .extends: CTicketBaseAlgorithm

    CTicketAlgorithmApproachDefinition:
      .extends: CTicketBaseAlgorithmDefinition

    CTicketAttackAlgorithm:
      .extends: CTicketBaseAlgorithm
      .adds:
        invertDistanceImportance: bool
        overrideDefaultTicketCount: bool
        overridenValueWhenInFront: int
        overridenValueWhenInBack: int
        denyTicketWhenNotInFrame: bool

    CTicketAttackAlgorithmDefinition:
      .extends: CTicketBaseAlgorithmDefinition
      .adds:
        overrideDefaultTicketCount: CBehTreeValBool
        overridenValueWhenInFront: CBehTreeValInt
        overridenValueWhenInBack: CBehTreeValInt
        invertDistanceImportance: bool
        denyTicketWhenNotInFrame: bool

    CTicketAlgorithmMelee:
      .extends: ITicketAlgorithmScript
      .adds:
        priority: float
        activationBonus: float
        threatLevelBonus: float
        moraleBonus: float
        hpBonus: float
        timeBonus: float
        distanceBonus: float
        desiredDistance: float
        desiredTime: float
        isAttackedBonus: float
        isAttackedStateDuration: float
        isInVicinityBonus: float
        vicinityMax: float
        vicinityMin: float
        inTargetBackBonus: float

    CTicketAlgorithmMeleeDefinition:
      .extends: ITicketAlgorithmScriptDefinition
      .adds:
        priority: CBehTreeValFloat
        activationBonus: CBehTreeValFloat
        isInVicinityBonus: CBehTreeValFloat
        vicinityMax: CBehTreeValFloat
        vicinityMin: CBehTreeValFloat
        threatLevelBonus: CBehTreeValFloat
        moraleBonus: CBehTreeValFloat
        hpBonus: CBehTreeValFloat
        timeBonus: CBehTreeValFloat
        distanceBonus: CBehTreeValFloat
        desiredDistance: CBehTreeValFloat
        desiredTime: CBehTreeValFloat
        isAttackedBonus: CBehTreeValFloat
        isAttackedStateDuration: CBehTreeValFloat
        inTargetBackBonus: CBehTreeValFloat

    CBTTaskCustomApplyEffectAttack:
      .extends: CBTTaskAttack
      .adds:
        applyEffectInterval: float
        activateOnAnimEvent: name
        activationTimeStamp: float
        activated: bool

    CBTTaskCustomApplyEffectAttackDef:
      .extends: CBTTaskAttackDef
      .adds:
        applyEffectInterval: float
        activateOnAnimEvent: name

    CBTTaskPlaySyncAnim:
      .extends: IBehTreeTask
      .adds:
        useSetupSimpleSyncAnim2: bool
        syncAnimNameLeftStance: name
        syncAnimNameRightStance: name
        raiseForceIdle: bool
        denyWhenTargetIsDodging: bool
        denyIfTargetNotPlayer: bool
        onAnimEvent: name
        onGameplayEvent: name
        shouldComplete: bool
        activated: bool

    CBTTaskPlaySyncAnimDef:
      .extends: IBehTreeConditionalTaskDefinition
      .adds:
        useSetupSimpleSyncAnim2: bool
        syncAnimNameLeftStance: name
        syncAnimNameRightStance: name
        raiseForceIdle: bool
        denyWhenTargetIsDodging: bool
        denyIfTargetNotPlayer: bool
        onAnimEvent: name
        onGameplayEvent: name
        shouldComplete: bool

    CBTTaskPlaySyncAnimAttack:
      .extends: CBTTaskAttack
      .adds:
        useSetupSimpleSyncAnim2: bool
        overrideAttackTypes: bool
        disableCollision: bool
        syncAttackAnims: SSyncAttackTypes
        checkConditionsOnIsAvailable: bool
        syncAnimNameLeftStance: name
        syncAnimNameRightStance: name
        raiseForceIdle: bool
        denyWhenTargetIsDodging: bool
        denyWhenTargetIsGuarded: bool
        denyWhenTargetIsUsingQuen: bool
        permitOnlyWhenTargetIsGuarded: bool
        denyWhenCollidingWithVictirm: bool
        activateOnDistanceBelow: float
        activateOnDistanceAbove: float
        activateOnAngleBelow: float
        checkMoveType: bool
        activateOnGreaterEqualMoveType: EMoveType
        zTolerance: float
        denyIfTargetNotPlayer: bool
        onAnimEvent: name
        onGameplayEvent: name
        completeOnMainEnd: bool
        activated: bool
        npc: CNewNPC
        target: CActor
        component: CAnimatedComponent

    CBTTaskPlaySyncAnimAttackDef:
      .extends: CBTTaskAttackDef
      .adds:
        disableCollision: bool
        useSetupSimpleSyncAnim2: bool
        overrideAttackTypes: bool
        syncAttackAnims: SSyncAttackTypes
        checkConditionsOnIsAvailable: bool
        syncAnimNameLeftStance: name
        syncAnimNameRightStance: name
        raiseForceIdle: bool
        denyWhenTargetIsDodging: bool
        denyWhenTargetIsGuarded: bool
        denyWhenTargetIsUsingQuen: bool
        permitOnlyWhenTargetIsGuarded: bool
        denyWhenCollidingWithVictirm: bool
        activateOnDistanceBelow: float
        activateOnDistanceAbove: float
        activateOnAngleBelow: float
        checkMoveType: bool
        activateOnGreaterEqualMoveType: EMoveType
        zTolerance: float
        denyIfTargetNotPlayer: bool
        onAnimEvent: name
        onGameplayEvent: name
        completeOnMainEnd: bool

    BTCondCheckStatValue:
      .extends: IBehTreeTask
      .adds:
        checkedActor: EStatOwner
        baseStatType: EBaseCharacterStats
        autoCheckHPType: bool
        statValue: float
        percentage: bool
        operator: EOperator

    BTCondCheckStatValueDef:
      .extends: IBehTreeConditionalTaskDefinition
      .adds:
        checkedActor: EStatOwner
        baseStatType: EBaseCharacterStats
        autoCheckHPType: bool
        statValue: float
        percentage: bool
        operator: EOperator

    CBTCondCheckFact:
      .extends: IBehTreeTask
      .adds:
        fact: string
        value: int
        operator: EOperator

    CBTCondCheckFactDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        fact: string
        value: int
        operator: EOperator

    BTCondFinisherWasInterrupted:
      .extends: IBehTreeTask

    BTCondFinisherWasInterruptedDef:
      .extends: IBehTreeConditionalTaskDefinition

    BTCondIsPlayerInSpecialAttack:
      .extends: IBehTreeTask

    BTCondIsPlayerInSpecialAttackDef:
      .extends: IBehTreeTaskDefinition

    CBTCondLairEntityInRange:
      .extends: IBehTreeTask
      .adds:
        lair: CFlyingSwarmMasterLair
        checkCount: int
        timeStamp: float

    CBTCondLairEntityInRangeDef:
      .extends: IBehTreeConditionalTaskDefinition

    CBTTaskPlayAgonySyncedFinisher:
      .extends: CBTTaskPlaySyncedAnimation

    CBTTaskPlayAgonySyncedFinisherDef:
      .extends: CBTTaskPlaySyncedAnimationDef

    CBTTaskActionFail:
      .extends: CBTTaskPlayAnimationEventDecorator
      .adds:
        failedActionType: EActionFail

    CBTTaskActionFailDef:
      .extends: CBTTaskPlayAnimationEventDecoratorDef
      .adds:
        failedActionType: EActionFail

    CBTTaskActivateRift:
      .extends: CBTTaskAttack
      .adds:
        resourceNameRift: name
        resourceNameGround: name
        entityRiftTemplate: CEntityTemplate
        entityGroundTemplate: CEntityTemplate
        targetPos: Vector
        targetRot: EulerAngles
        heightOffset: float
        entityRift: CEntity
        entityGround: CEntity
        casterPos: Vector
        riftPos: Vector
        rift: CRiftEntity
        ground: CRiftEntity
        npc: CNewNPC
        couldntLoadResource: bool

    CBTTaskActivateRiftDef:
      .extends: CBTTaskAttackDef
      .adds:
        resourceNameRift: name
        resourceNameGround: name

    BTTaskAddBuffs:
      .extends: IBehTreeTask
      .adds:
        onDeactivate: bool
        buffs: array<EEffectType>
        duration: float
        customValue: SAbilityAttributeValue

    BTTaskAddBuffsDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        onDeactivate: bool
        buffs: array<EEffectType>
        duration: float
        customValue: SAbilityAttributeValue

    BTTaskAddRemoveAbility:
      .extends: IBehTreeTask
      .adds:
        abilityName: name
        allowMultiple: bool
        removeAbility: bool
        delayUntilInCameraFrame: bool
        onDeactivate: bool
        onAnimEventName: name
        eventReceived: bool

    BTTaskAddRemoveAbilityDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        abilityName: name
        allowMultiple: bool
        removeAbility: bool
        delayUntilInCameraFrame: bool
        onDeactivate: bool
        onAnimEventName: name

    CBehTreeTaskAgony:
      .extends: IBehTreeTask
      .adds:
        agonyTime: int
        syncInstance: CAnimationManualSlotSyncInstance
        disableAgony: bool
        chance: int
        forceAgony: bool

    CBehTreeAgonyDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        disableAgony: CBehTreeValBool
        agonyTime: int
        chance: int

    BTTaskArchesporManager:
      .extends: IBehTreeTask
      .adds:
        data: CArchesporeAICombatStorage
        npc: CNewNPC
        allBaseEntities: array<CGameplayEntity>
        usedPos: array<Vector>
        entityTemplate: CEntityTemplate
        anchorPos: Vector
        privateBulb: W3ArchesporBulb
        guardArea: CAreaComponent
        losTestCollisionGroups: array<name>
        baseEntitiesSearchingRange: float
        baseEntityTag: name
        resourceName: string
        baseEntitiesToSpawnCount: int
        minDistFromOwner: float
        maxDistFromOwner: float
        minDistFromEachOther: float
        maxDistFromAnchor: float
        spawnEntitiesAroundPlayer: bool

    BTTaskArchesporManagerDef:
      .extends: IBehTreeTaskDefinition

    CBehTreeTaskBehaviorGraph:
      .extends: IBehTreeTask
      .adds:
        graph: EBehaviorGraph
        forceHighPriority: bool
        res: bool
        graphName: name
        combatDataStorage: CHumanAICombatStorage

    CBehTreeBehaviorGraphDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        graph: CBTEnumBehaviorGraph
        forceHighPriority: CBehTreeValBool

    CBTTaskBombardmentAttack:
      .extends: IBehTreeTask
      .adds:
        npc: CNewNPC
        performBombardment: bool
        entityTemplate: CEntityTemplate
        resourceName: string
        afterSpawnDelay: float
        initialDelay: float
        yOffset: float
        fxName: name

    CBTTaskBombardmentAttackDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        initialDelay: float
        afterSpawnDelay: float
        yOffset: float
        fxName: name

    CBTIsPlayerInsideDiveAttackArea:
      .extends: IBehTreeTask

    CBTIsPlayerInsideDiveAttackAreaDef:
      .extends: IBehTreeTaskDefinition

    CBTIsPlayerInsideSelectedDiveAttackArea:
      .extends: IBehTreeTask
      .adds:
        areaNumber: int

    CBTIsPlayerInsideSelectedDiveAttackAreaDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        areaNumber: int

    CBTTaskBreakQuen:
      .extends: IBehTreeTask
      .adds:
        onActivate: bool

    CBTTaskBreakQuenDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        onActivate: bool

    CBTTaskBruxaSpawn:
      .extends: IBehTreeTask
      .adds:
        useNodeWithTag: bool
        referenceNodeTag: name
        useTargetInsteadOfOwner: bool
        useCombatTarget: bool
        baseOffsetOnCasterRotation: bool
        rotateEntityToTarget: bool
        resourceName: name
        spawnAfter: float
        validateSpawnPosition: bool
        spawnOnAnimEvent: name
        spawnOnGameplayEvent: name
        fxNameOnSpawnEntity: name
        fxNameOnSpawnOwner: name
        fxNameAfterSpawnOwner: name
        fxNameAfterSpawnDelay: float
        connectFxAfterSpawnWithEntity: bool
        bruxaEntityTag: name
        inheritTagsFromOwner: bool
        setBehVarOnSpawn: name
        setBehVarValue: float
        setAppearanceOnSpawn: name
        setEntityAsActionTarget: bool
        disableGameplayVisibility: bool
        disableVisibility: bool
        disableCollisionOnSpawn: bool
        stopAllEffectsAfter: float
        activeDuration: float
        teleportInterval: float
        minTeleportDistFromTarget: float
        maxTeleportDistFromTarget: float
        entityTemplate: CEntityTemplate
        entity: CEntity
        timeStamp: float
        spawned: bool
        eventReceived: bool

    CBTTaskBruxaSpawnDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        useNodeWithTag: bool
        referenceNodeTag: name
        useTargetInsteadOfOwner: bool
        useCombatTarget: bool
        baseOffsetOnCasterRotation: bool
        rotateEntityToTarget: bool
        resourceName: name
        spawnEntityOnDeathName: CBehTreeValCName
        spawnAfter: float
        validateSpawnPosition: bool
        spawnOnAnimEvent: name
        spawnOnGameplayEvent: name
        fxNameOnSpawnEntity: name
        fxNameOnSpawnOwner: name
        fxNameAfterSpawnOwner: name
        fxNameAfterSpawnDelay: float
        connectFxAfterSpawnWithEntity: bool
        bruxaEntityTag: name
        inheritTagsFromOwner: bool
        setBehVarOnSpawn: name
        setBehVarValue: float
        setAppearanceOnSpawn: name
        setEntityAsActionTarget: bool
        disableGameplayVisibility: bool
        disableVisibility: bool
        disableCollisionOnSpawn: bool
        stopAllEffectsAfter: float
        activeDuration: float
        teleportInterval: float
        minTeleportDistFromTarget: float
        maxTeleportDistFromTarget: float

    CBTTaskCaranthirMeteor:
      .extends: CBTTaskProjectileAttack
      .adds:
        riftResourceName: name
        targetPos: Vector

    CBTTaskCaranthirMeteorDef:
      .extends: CBTTaskProjectileAttackDef

    BTTaskCaretakerManager:
      .extends: IBehTreeTask
      .adds:
        drainTemplate: CEntityTemplate
        recoverPercPerHit: float
        shadesModifier: float
        m_Npc: CNewNPC
        m_HealthObjective: float
        m_DrainEffectEntity: CEntity
        m_SummonerComponent: W3SummonerComponent
        m_RefreshTargetDelay: float

    BTTaskCaretakerManagerDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        drainTemplate: CEntityTemplate
        recoverPercPerHit: float
        shadesModifier: float

    CBTTaskCarryBox:
      .extends: IBehTreeTask
      .adds:
        entityTemplate: CEntityTemplate
        pickUpPoint: name
        dropPoint: name
        box: CEntity

    CTTaskCarryBoxDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        entityTemplate: name
        pickUpPoint: CBehTreeValCName
        dropPoint: CBehTreeValCName

    CBTTaskRestBetweenBoxes:
      .extends: IBehTreeTask

    CBTTaskRestBetweenBoxesDef:
      .extends: IBehTreeTaskDefinition

    CBTTaskChance:
      .extends: IBehTreeTask
      .adds:
        ifNot: bool
        chance: int
        frequency: float
        scaleWithNumberOfOpponents: bool
        chancePerOpponent: int
        lastRollTime: float
        lastRollResult: bool

    CBTTaskChanceDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        chance: CBehTreeValInt
        frequency: float
        scaleWithNumberOfOpponents: bool
        chancePerOpponent: int

    CBTTaskChangeAppearance:
      .extends: IBehTreeTask
      .adds:
        appearanceName: name
        onActivate: bool
        onDectivate: bool
        onAnimEvent: name

    CBTTaskChangeAppearanceDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        appearanceName: name
        onActivate: bool
        onDectivate: bool
        onAnimEvent: name

    CBTTaskCheckActorSpeed:
      .extends: IBehTreeTask
      .adds:
        checkedActor: EStatOwner
        moveType: EMoveType
        operator: EOperator
        customSpeed: bool
        moveSpeed: float
        currentSpeed: float

    CBTTaskCheckActorSpeedDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        checkedActor: EStatOwner
        moveType: EMoveType
        operator: EOperator
        customSpeed: bool
        moveSpeed: float

    CBTTaskCheckFlyingActors:
      .extends: IBehTreeTask
      .adds:
        minFlyingActors: int
        maxFlyingActors: int
        flyingCheckType: EFlyingCheck
        nextActionTime: float
        delay: float
        ifNot: bool

    CBTTaskCheckFlyingActorsDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        minFlyingActors: int
        maxFlyingActors: int
        flyingCheckType: EFlyingCheck
        ifNot: bool

    CBTTaskSmartSetVisible:
      .extends: IBehTreeTask
      .adds:
        makeVisbleOnDeactivate: bool

    CBTTaskSmartSetVisibleDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        makeVisbleOnDeactivate: bool

    CBTTaskCollisionMonitor:
      .extends: CBTTaskPlayAnimationEventDecorator
      .adds:
        onActivate: bool
        onAnimEvent: bool
        dealDamage: bool
        soundEventOnCollidedActor: name
        destroyObstacleOnCollision: bool
        raiseEventOnObstacleCollision: name
        chargeType: EChargeAttackType
        forceCriticalEffect: bool
        forceCriticalEffectNpcOnly: bool
        completeOnCollisionWithObstacle: bool
        unavailableForOneFrameOnInterval: float
        bCollisionWithActor: bool
        bCollisionWithObstacle: bool
        bCollisionWithObstacleProbe: bool
        activated: bool
        xmlDamageName: name
        collidedActor: CActor
        collidedEntity: CGameplayEntity
        collidedProbedEntity: CGameplayEntity
        activationTimeStamp: float
        actorCollisionTimeStamp: float
        objectCollisionTimeStamp: float
        objectProbeCollisionTimeStamp: float
        intervalCheckTimeStamp: float
        hadForceCriticalStates: bool

    CBTTaskCollisionMonitorDef:
      .extends: CBTTaskPlayAnimationEventDecoratorDef
      .adds:
        onActivate: bool
        onAnimEvent: bool
        dealDamage: bool
        destroyObstacleOnCollision: bool
        chargeType: EChargeAttackType
        forceCriticalEffect: bool
        forceCriticalEffectNpcOnly: bool
        raiseEventOnObstacleCollision: name
        soundEventOnCollidedActor: name
        completeOnCollisionWithObstacle: bool
        unavailableForOneFrameOnInterval: float

    CBTTaskReactionToCollision:
      .extends: CBTTaskCollisionMonitor
      .adds:
        waitTimeout: float
        activationTimeout: float
        knockdownDuration: float
        timeStamp: float
        receivedEvent: bool
        isInCorrectBehGraphNode: bool
        activationScriptEvent: name
        deactivateScriptEvent: name

    CBTTaskReactionToCollisionDef:
      .extends: CBTTaskCollisionMonitorDef
      .adds:
        waitTimeout: float
        activationTimeout: float
        knockdownDuration: float
        activationScriptEvent: name
        deactivateScriptEvent: name

    CBehTreeCombatStyleManager:
      .extends: IBehTreeTask
      .adds:
        combatDataStorage: CHumanAICombatStorage
        preferedCombatStyle: EBehaviorGraph
        isRanged: bool
        rangedWeaponType: name

    CBehTreeCombatStyleManagerDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        preferedCombatStyle: CBTEnumBehaviorGraph

    BTTaskCompleteOnAnimEvent:
      .extends: IBehTreeTask
      .adds:
        animEvent: name
        sucess: bool

    BTTaskCompleteOnAnimEventDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        animEvent: name
        sucess: bool

    BTTaskCompleteOnGameplayEvent:
      .extends: IBehTreeTask
      .adds:
        gameplayEvent: name
        sucess: bool

    BTTaskCompleteOnGameplayEventDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        gameplayEvent: name
        sucess: bool

    CBTTaskCrabAttack:
      .extends: IBehTreeTask

    CBTTaskCrabAttackDef:
      .extends: IBehTreeTaskDefinition

    CBehTreeTaskCriticalState:
      .extends: IBehTreeTask
      .adds:
        activate: bool
        activateTimeStamp: float
        forceActivate: bool
        currentCS: ECriticalStateType

    CBehTreeTaskCriticalStateDef:
      .extends: IBehTreeTaskDefinition

    CBehTreeTaskCSEffect:
      .extends: IBehTreeTask
      .adds:
        CSType: ECriticalStateType
        requestedCSType: ECriticalStateType
        buffType: EEffectType
        buff: CBaseGameplayEffect
        finisherAnimName: name
        hasBuff: bool
        allowBlend: bool
        hitReactionDisabled: bool
        waitForDropItem: bool
        isInAir: bool
        heightDiff: float
        isInPotentialRagdoll: bool
        guardOpen: bool
        criticalStatesToResist: int
        resistCriticalStateChance: int
        combatDataStorage: CBaseAICombatStorage
        reactionDataStorage: CAIStorageReactionData
        finisherEnabled: bool
        forceFinisherActivation: bool
        finisherDisabled: bool
        pullToNavRadiusMult: float
        m_storedInteractionPri: EInteractionPriority
        armored: bool
        hitAnim: bool
        unstoppable: bool
        ragdollPullingEventReceived: bool
        distanceFromRootToBone: float
        boneIndex: int
        hitsToRaiseGuard: float
        raiseGuardChance: float
        hitsToCounter: float
        counterChance: float
        counterStaminaCost: float
        canCounter: bool
        counterRequested: bool
        counterRequestTimeStamp: float
        counterType: ECriticalEffectCounterType
        startAirPos: Vector
        endAirPos: Vector
        cachedInAir: bool
        airStartTime: float
        screamPlayed: bool
        fallingDamage: float
        maxFallingHeightDiff: float

    CBehTreeTaskCSEffectDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        finisherAnimName: CBehTreeValCName

    CBehTreeTaskCSEffectFlying:
      .extends: CBehTreeTaskCSEffect
      .adds:
        wasFlying: bool
        waitingForEndOfDisableHit: bool

    CBehTreeTaskCSEffectFlyingDef:
      .extends: CBehTreeTaskCSEffectDef

    CBTTaskDealDamageToOwner:
      .extends: CBTTaskPlayAnimationEventDecorator
      .adds:
        owner: CNewNPC
        attacker: CActor
        damageValue: float
        action: W3Action_Attack
        attackName: name
        skillName: name
        onAnimEventName: name

    CBTTaskDealDamageToOwnerDef:
      .extends: CBTTaskPlayAnimationEventDecoratorDef
      .adds:
        owner: CNewNPC
        attacker: CActor
        damageValue: float
        action: W3Action_Attack
        attackName: name
        skillName: name
        onAnimEventName: name

    CBTTaskDestroyEntity:
      .extends: IBehTreeTask
      .adds:
        entityTag: name
        playEffectName: name
        stopEffectName: name
        eventToRaise: name
        playEffect: bool
        stopEffect: bool
        destroyAfter: float
        onActivate: bool
        onDeactivate: bool

    CBTTaskDestroyEntityDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        entityTag: name
        playEffectName: name
        stopEffectName: name
        eventToRaise: name
        playEffect: bool
        stopEffect: bool
        destroyAfter: float
        onActivate: bool
        onDeactivate: bool

    CBTTaskDettlaffDash:
      .extends: CBTTaskAttack
      .adds:
        OpenForAard: bool
        action: W3DamageAction
        shouldCheckVisibility: bool
        shouldSignalGameplayEvent: bool
        actor: CActor

    CBTTaskDettlaffDashDef:
      .extends: CBTTaskAttackDef
      .adds:
        OpenForAard: bool
        shouldCheckVisibility: bool
        shouldSignalGameplayEvent: bool

    CBTTaskDisableHitReaction:
      .extends: IBehTreeTask
      .adds:
        onActivate: bool
        onDeactivate: bool
        overrideForThisTask: bool

    CBTTaskDisableHitReactionDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        onActivate: bool
        onDeactivate: bool
        overrideForThisTask: bool

    CBTTaskSetUnstoppable:
      .extends: IBehTreeTask
      .adds:
        onActivate: bool
        onDeactivate: bool
        onSuccess: bool
        overrideForThisTask: bool
        makeUnpushable: bool
        enable: bool
        m_savedPriority: EInteractionPriority

    CBTTaskSetUnstoppableDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        onActivate: bool
        onDeactivate: bool
        onSuccess: bool
        overrideForThisTask: bool
        makeUnpushable: bool
        enable: bool

    CBTTaskDisableHitReactionFor:
      .extends: IBehTreeTask
      .adds:
        time: float

    CBTTaskDisableHitReactionForDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        time: float

    CBTTaskDiveCheck:
      .extends: IBehTreeTask
      .adds:
        frontOffset: float
        minWaterDepth: float
        maxWaterDistance: float

    CBTTaskDiveCheckDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        frontOffset: float
        minWaterDepth: float
        maxWaterDistance: float

    BTTaskDrainStat:
      .extends: IBehTreeTask
      .adds:
        stat: EBaseCharacterStats
        val: float
        onActivate: bool

    BTTaskDrainStatDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        stat: EBaseCharacterStats
        val: float
        onActivate: bool

    CBTTaskDrink:
      .extends: IBehTreeTask
      .adds:
        available: bool
        Delay: float
        Event: name

    CBTTaskDrinkDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        Delay: float
        Event: name

    CBTTaskDropProjectilesFromAbove:
      .extends: IBehTreeTask
      .adds:
        resourceName: name
        activeOnAnimEvent: name
        chanceToGuaranteePlayerHit: float
        timeBetweenSpawn: float
        timeBetweenSpawnRandomizationPerc: float
        minDistFromTarget: float
        maxDistFromTarget: float
        minDistFromEachOther: float
        minYOffset: float
        maxYOffset: float
        useCombatTarget: bool
        useOwnerAsTarget: bool
        target: CActor
        entityTemplate: CEntityTemplate
        usedPos: array<Vector>
        activated: bool

    CBTTaskDropProjectilesFromAboveDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        resourceName: name
        activeOnAnimEvent: name
        chanceToGuaranteePlayerHit: float
        timeBetweenSpawn: float
        timeBetweenSpawnRandomizationPerc: float
        minDistFromTarget: float
        maxDistFromTarget: float
        minDistFromEachOther: float
        minYOffset: float
        maxYOffset: float
        useCombatTarget: bool
        useOwnerAsTarget: bool

    CBTTaskBaseDuration:
      .extends: IBehTreeTask
      .adds:
        duration: float
        chance: int
        endWithFailure: bool

    CBTTaskDuration:
      .extends: CBTTaskBaseDuration

    CBTTaskDurationDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        duration: float
        chance: int
        endWithFailure: bool

    CBTTaskXMLBasedDuration:
      .extends: CBTTaskBaseDuration
      .adds:
        xmlStatName: name

    CBTTaskXMLBasedDurationDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        xmlStatName: name
        chance: int
        endWithFailure: bool

    CBTTaskEventBasedDuration:
      .extends: CBTTaskDuration

    CBTTaskEventBasedDurationDef:
      .extends: CBTTaskDurationDef
      .adds:
        eventName: name

    CBTTaskEnableLookAt:
      .extends: IBehTreeTask
      .adds:
        duration: float
        owner: CActor
        useReactionTarget: bool
        useActionTarget: bool
        useAsDecorator: bool

    CBTTaskEnableLookAtDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        duration: float
        useReactionTarget: bool
        useActionTarget: bool
        useAsDecorator: bool

    CBTTaskEnterDrinkingMinigame:
      .extends: IBehTreeTask
      .adds:
        Event: name
        OffEvent: name
        available: bool

    CBTTaskEnterDrinkingMinigameDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        Event: name
        OffEvent: name

    CBTTaskChangePriority:
      .extends: IBehTreeTask
      .adds:
        priorityWhileActive: int
        defaultPriority: int

    CBTTaskChangePriorityDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        priorityWhileActive: int
        defaultPriority: int

    CBTTaskChangePriorityTillAnimEvent:
      .extends: IBehTreeTask
      .adds:
        highPriority: int
        defaultPriority: int
        animEventName: name
        allowBlend: bool

    CBTTaskChangePriorityTillAnimEventDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        highPriority: int
        defaultPriority: int
        animEventName: name

    CBTTaskFairytaleWitchActions:
      .extends: IBehTreeTask
      .adds:
        action: EFairytaleWitchAction
        npc: CNewNPC

    CBTTaskFairytaleWitchActionsDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        action: EFairytaleWitchAction

    BTTaskFairytaleWitchManager:
      .extends: IBehTreeTask
      .adds:
        npc: CNewNPC
        spawnedNpc: CNewNPC
        spawnedSecondNpc: CNewNPC
        nodeTags: array<name>
        resourceName: array<name>
        initialSleepTime: float
        firstNodeTag: name
        secondNodeTag: name
        thirdNodeTag: name
        finalNodeTag: name
        archesporResource: name
        pantherResource: name

    BTTaskFairytaleWitchManagerDef:
      .extends: IBehTreeTaskDefinition

    CBTTaskFalling:
      .extends: IBehTreeTask
      .adds:
        npc: CNewNPC
        drawableComp: CDrawableComponent
        fakeBroomHidden: bool
        attachedToGround: bool
        broomSpawned: bool

    CBTTaskFallingDef:
      .extends: IBehTreeTaskDefinition

    CBTTaskFindActorsByTag:
      .extends: IBehTreeTask
      .adds:
        tag: name
        actorsArray: array<CActor>
        operator: EOperator
        numberOfActors: int
        range: float
        oppNo: int
        onlyLiveActors: bool
        npc: CNewNPC

    CBTTaskFindActorsByTagDef:
      .extends: IBehTreeConditionalTaskDefinition
      .adds:
        tag: name
        foundActorsArray: array<CActor>
        operator: EOperator
        numberOfActors: int
        range: float
        onlyLiveActors: bool
        oppNo: int
        npc: CNewNPC

    CBTTaskFlightStyle:
      .extends: IBehTreeTask
      .adds:
        GlideChance: float
        BackToRegularChance: float
        onActivate: bool
        onDeactivate: bool
        onMain: bool
        glideCheck: bool
        backToRegularCheck: bool
        altitudeCheck: bool
        altitude: float
        frequency: float
        lastChange: float
        actorPosition: Vector

    CBTTaskFlightStyleDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        onActivate: bool
        onDeactivate: bool
        onMain: bool
        glideCheck: bool
        backToRegularCheck: bool
        altitudeCheck: bool
        GlideChance: float
        BackToRegularChance: float
        altitude: float
        frequency: float

    BTTaskForceFinisher:
      .extends: IBehTreeTask
      .adds:
        belowHealthPercent: float
        whenAlone: bool
        leftStanceFinisherAnimName: name
        rightStanceFinisherAnimName: name
        hasFinisherDLC: bool
        shouldCheckForFinisherDLC: bool
        m_Npc: CNewNPC

    BTTaskForceFinisherDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        belowHealthPercent: float
        whenAlone: bool
        leftStanceFinisherAnimName: name
        rightStanceFinisherAnimName: name
        shouldCheckForFinisherDLC: bool
        hasFinisherDLC: bool

    BTTaskForceHitReaction:
      .extends: IBehTreeTask
      .adds:
        hitReactionType: EHitReactionType
        hitReactionSide: EHitReactionSide
        hitReactionDirection: EHitReactionDirection
        hitSwingType: EAttackSwingType
        hitSwingDirection: EAttackSwingDirection

    BTTaskForceHitReactionDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        hitReactionType: CBTEnumHitReactionType
        hitReactionSide: CBTEnumHitReactionSide
        hitReactionDirection: CBTEnumHitReactionDirection
        hitSwingType: CBTEnumAttackSwingType
        hitSwingDirection: CBTEnumAttackSwingDriection

    CBTTaskForceSetStat:
      .extends: IBehTreeTask
      .adds:
        npc: CNewNPC
        percent: int
        onActivate: bool
        onDeactivate: bool

    CBTTaskForceSetStatDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        percent: int
        onActivate: bool
        onDeactivate: bool

    BTTaskGameplayEventListener:
      .extends: IBehTreeTask
      .adds:
        validFor: float
        activeFor: float
        activate: bool
        eventTime: float
        eventNam: name
        activationTime: float
        clearOnEvent: name

    BTTaskGameplayEventListenerDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        gameplayEventName: CBehTreeValCName
        validFor: float
        activeFor: float
        clearOnEvent: name

    BTTaskMultipleGameplayEventListener:
      .extends: BTTaskGameplayEventListener

    BTTaskMultipleGameplayEventListenerDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        gameplayEventsArray: array<name>
        validFor: float
        activeFor: float

    CBTTaskGesturesManager:
      .extends: IBehTreeTask
      .adds:
        disableGestures: bool
        removePlayedAnimationFromPool: bool
        gossipGesturesOnly: bool
        dontActivateGestureWhenNotTalking: bool
        onlyOneActorGesticulatingAtATime: bool
        stopGestureOnDeactivate: bool
        dontOverrideRightHand: bool
        dontOverrideLeftHand: bool
        cooldownBetweenGesture: float
        chanceToPlayGesture: float
        m_animListLeftHand: array<name>
        m_animListRightHand: array<name>
        m_animListBothHands: array<name>
        m_animList: array<name>
        animListLeftHand: array<name>
        animListRightHand: array<name>
        animListBothHands: array<name>
        animList: array<name>
        timeStamp: float
        reactionEventTimeStamp: float
        itemInLeftHand: bool
        itemInRightHand: bool

    CBTTaskGesturesManagerDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        disableGestures: CBehTreeValBool
        removePlayedAnimationFromPool: CBehTreeValBool
        gossipGesturesOnly: CBehTreeValBool
        cooldownBetweenGesture: CBehTreeValFloat
        chanceToPlayGesture: CBehTreeValFloat
        dontActivateGestureWhenNotTalking: CBehTreeValBool
        onlyOneActorGesticulatingAtATime: CBehTreeValBool
        stopGestureOnDeactivate: CBehTreeValBool
        dontOverrideRightHand: CBehTreeValBool
        dontOverrideLeftHand: CBehTreeValBool

    CBTTaskGuardChange:
      .extends: IBehTreeTask
      .adds:
        raiseGuardChance: int
        lowerGuardChance: int
        onActivate: bool
        onDectivate: bool
        onMain: bool
        raiseCheck: bool
        lowerCheck: bool
        frequency: float
        lastChange: float

    CBTTaskGuardChangeDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        onActivate: bool
        onDectivate: bool
        onMain: bool
        frequency: float
        raiseCheck: bool
        lowerCheck: bool

    CBTTaskForceChangeGuard:
      .extends: IBehTreeTask
      .adds:
        onActivate: bool
        onDectivate: bool
        raiseGuard: bool
        lowerGuard: bool

    CBTTaskForceChangeGuardDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        onActivate: bool
        onDectivate: bool
        raiseGuard: bool
        lowerGuard: bool

    BTTaskHandleHorseCollision:
      .extends: BTTaskGameplayEventListener

    BTTaskHandleHorseCollisionDef:
      .extends: BTTaskGameplayEventListenerDef

    CBTTaskHangingFromCeilingSpawn:
      .extends: CBTTaskPlayAnimationEventDecorator
      .adds:
        availableOnBehVarName: name
        availableOnBehVarValue: float
        spawnOnHit: bool
        spawnOnDistanceToHostile: float
        spawnOnGameplayEventName: name
        spawnOnAnimEventName: name
        traceToCeiling: bool
        verticalAdjustment: bool
        horizontalAdjustment: bool
        manageGravity: bool
        manageCollision: bool
        reenableCollisionAfter: float
        setCustomMovement: bool
        raiseEvent: name
        timeOfInitialPosCorrection: float
        reuseInitialSpawnPosition: bool
        activated: bool
        raisedEvent: bool
        slideEventReceived: bool
        actorPos: Vector
        initialPos: Vector
        animInfoCache: SAnimationEventAnimInfo
        collisionGroups: array<name>

    CBTTaskHangingFromCeilingSpawnDef:
      .extends: CBTTaskPlayAnimationEventDecoratorDef
      .adds:
        availableOnBehVarName: name
        availableOnBehVarValue: float
        spawnOnHit: bool
        spawnOnDistanceToHostile: float
        spawnOnGameplayEventName: name
        spawnOnAnimEventName: name
        traceToCeiling: bool
        verticalAdjustment: bool
        horizontalAdjustment: bool
        manageGravity: bool
        manageCollision: bool
        reenableCollisionAfter: float
        setCustomMovement: bool
        raiseEvent: name
        timeOfInitialPosCorrection: float
        reuseInitialSpawnPosition: bool

    CBTTaskHasAbility:
      .extends: IBehTreeTask
      .adds:
        abilityName: name
        behVariableName: name
        behVariableActivateValue: float
        behVariableDeactivateValue: float
        failAnim: bool
        turnOffOnDeactivate: bool
        turnedOff: bool

    CBTTaskHasAbilityDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        abilityName: name
        behVariableName: name
        behVariableActivateValue: float
        behVariableDeactivateValue: float
        failAnim: bool

    CBTTaskHasAvailableAbility:
      .extends: IBehTreeTask
      .adds:
        abilityName: name

    CBTTaskHasAvailableAbilityDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        abilityName: name

    CBTTaskHideAllWeapons:
      .extends: IBehTreeTask

    CBTTaskHideAllWeaponsDef:
      .extends: IBehTreeTaskDefinition

    CBTTaskHitReactionDecorator:
      .extends: CBTTaskPlayAnimationEventDecorator
      .adds:
        createHitReactionEvent: name
        increaseHitCounterOnlyOnMeleeDmg: bool
        hitsToRaiseGuard: int
        raiseGuardChance: int
        hitsToCounter: int
        counterChance: int
        counterStaminaCost: float
        damageData: CDamageData
        damageIsMelee: bool
        rotateNode: CNode
        lastAttacker: CGameplayEntity
        reactionDataStorage: CAIStorageReactionData

    CBTTaskHitReactionDecoratorDef:
      .extends: CBTTaskPlayAnimationEventDecoratorDef
      .adds:
        createHitReactionEvent: CBehTreeValCName
        increaseHitCounterOnlyOnMeleeDmg: CBehTreeValBool

    CBTCondBeingHit:
      .extends: IBehTreeTask
      .adds:
        timeOnLastHit: float
        beingHit: bool

    CBTCondBeingHitDef:
      .extends: IBehTreeConditionalTaskDefinition

    CBTCompleteOnHit:
      .extends: IBehTreeTask
      .adds:
        onlyIfCanPlayHitAnim: bool

    CBTCompleteOnHitDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        onlyIfCanPlayHitAnim: bool

    CBTTaskIfTargetHasEffect:
      .extends: IBehTreeTask
      .adds:
        effect: EEffectType
        useCombatTarget: bool

    CBTTaskIfTargetHasEffectDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        effect: EEffectType
        useCombatTarget: bool

    CBTTaskIfTargetHasEffects:
      .extends: IBehTreeTask
      .adds:
        effects: array<EEffectType>
        useCombatTarget: bool

    CBTTaskIfTargetHasEffectsDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        effects: array<EEffectType>
        useCombatTarget: bool

    CBTTaskHasEffects:
      .extends: IBehTreeTask
      .adds:
        effects: array<EEffectType>

    CBTTaskHasEffectsDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        effects: array<EEffectType>

    CBTTaskImlerithBreakAttachment:
      .extends: IBehTreeTask
      .adds:
        rigidMeshComp: CRigidMeshComponent

    CBTTaskImlerithBreakAttachmentDef:
      .extends: IBehTreeTaskDefinition

    CBTTaskKillEntityByTag:
      .extends: IBehTreeTask
      .adds:
        npc: array<CNewNPC>
        tag: name
        onActivate: bool
        onDeactivate: bool
        i: int

    CBTTaskKillEntityDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        entity: CNewNPC
        tag: name
        onActivate: bool
        onDeactivate: bool

    CBTTaskReactionSystemLogReport:
      .extends: IBehTreeTask
      .adds:
        reactionName: string
        message: string

    CBTTaskReactionSystemLogReportDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        reactionName: string
        message: string

    BTTaskLookat:
      .extends: IBehTreeTask
      .adds:
        lookatAtStart: bool
        useHeadBoneRotation: bool
        keepLooking: bool
        initKeeplooking: bool
        verticalLookAt: bool
        setAdditionalBehVar: bool
        keepLookingAngle: float
        additionalBehVarName: name
        headBoneName: name
        isCombatTask: bool
        lookAtTargetCheck: bool

    BTTaskLookatDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        lookatAtStart: bool
        headBoneName: name
        useHeadBoneRotation: bool
        keepLooking: bool
        verticalLookAt: bool
        setAdditionalBehVar: bool
        additionalBehVarName: name
        keepLookingAngle: float
        isCombatTask: bool

    BTTaskUpdateLookatTarget:
      .extends: IBehTreeTask
      .adds:
        combatDataStorage: CHumanAICombatStorage
        useCombatTarget: bool
        useCustomTarget: bool
        headBoneName: name
        usePrediction: bool
        addZOffsetValue: bool
        disableLookAtOnDeath: bool
        disableLookAtOnDeactivate: bool
        lookatTarget: CNode
        lookatActor: CActor
        targetBoneIndex: int
        targetPos: Vector

    BTTaskUpdateLookatTargetDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        useCombatTarget: bool
        headBoneName: name
        usePrediction: bool
        useCustomTarget: bool
        addZOffsetValue: bool
        disableLookAtOnDeath: bool
        disableLookAtOnDeactivate: bool

    BTTaskAimingUpdateLookatTarget:
      .extends: BTTaskUpdateLookatTarget

    BTTaskAimingUpdateLookatTargetDef:
      .extends: BTTaskUpdateLookatTargetDef

    BTTaskUpdateLookatTargetByTag:
      .extends: BTTaskUpdateLookatTarget
      .adds:
        targetTag: name

    BTTaskUpdateLookatTargetByTagDef:
      .extends: BTTaskUpdateLookatTargetDef
      .adds:
        targetTag: CBehTreeValCName

    CBTTaskActivateMagicBubble:
      .extends: IBehTreeTask
      .adds:
        entityTemplate: CEntityTemplate
        onAnimEvent: bool
        animEventName: name
        resourceName: name
        spawnedEntity: CEntity

    CBTTaskActivateMagicBubbleDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        resourceName: CBehTreeValCName
        onAnimEvent: bool
        animEventName: name

    CBTTaskDeactivateMagicBubble:
      .extends: IBehTreeTask
      .adds:
        tag: name
        onAnimEvent: bool
        animEventName: name

    CBTTaskDeactivateMagicBubbleDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        onAnimEvent: bool
        animEventName: name

    BTTaskManageAnimatedMovement:
      .extends: IBehTreeTask
      .adds:
        onDeactivate: bool
        flag: bool

    BTTaskManageAnimatedMovementDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        onDeactivate: bool
        overrideOnly: bool
        flag: bool

    CBTTaskManageBlindCreature:
      .extends: IBehTreeTask
      .adds:
        resourceName: name
        forgetTargetIfNPCSpeedLowerThan: float
        remberTargetIfCloserThan: float
        ignoreNoiseLowerThanWhenSprinting: float
        prioritizePlayerAsTarget: bool
        teleportEntity: bool
        checkedForActors: bool
        echoPingShot: bool
        echoTimeStamp: float
        delayEchoDetectionFX: float
        noiseSourceEntities: array<SNoiseEntity>
        actors: array<CActor>
        noiseSourceEntity: SNoiseEntity
        entity: CEntity
        entityTemplate: CEntityTemplate
        PING_SPEED: float
        PING_NOISE_LEVEL: float
        BOMB_NOISE_LEVEL: float
        SIGN_NOISE_LEVEL: float
        BATTLECRY_NOISE_LEVEL: float
        ATTACK_NOISE_LEVEL: float
        MOVE_NOISE_LEVEL: float
        Z_TOLERANCE: float
        NAVIGATION_SEARCH_RADIUS: float
        NAVIGATION_SEARCH_TIMEOUT: float

    CBTTaskManageBlindCreatureDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        resourceName: name
        forgetTargetIfNPCSpeedLowerThan: float
        remberTargetIfCloserThan: float
        ignoreNoiseLowerThanWhenSprinting: float
        prioritizePlayerAsTarget: CBehTreeValBool

    CBTTaskManageBuffImmunity:
      .extends: IBehTreeTask
      .adds:
        effects: array<EEffectType>
        onActivate: bool
        onDeactivate: bool
        bRemove: bool
        removeFromTemplate: bool

    CBTTaskManageBuffImmunityDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        effects: array<EEffectType>
        onActivate: bool
        onDeactivate: bool
        bRemove: bool
        removeFromTemplate: bool

    TaskManageCapsuleCollision:
      .extends: IBehTreeTask
      .adds:
        collision: bool
        allCollisionTypes: bool
        overrideForThisTaskOnly: bool
        onActivate: bool
        onDeactivate: bool
        onAnimEvent: bool
        switchVulnerability: bool
        effectLinkedToCollision: name

    TaskManageCapsuleCollisionDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        collision: bool
        allCollisionTypes: bool
        overrideForThisTaskOnly: bool
        onActivate: bool
        onDeactivate: bool
        onAnimEvent: bool
        switchVulnerability: bool
        effectLinkedToCollision: name

    BTTaskManageCombatPhases:
      .extends: IBehTreeTask
      .adds:
        rangedCombatPhaseParameters: SCombatPhaseParameters
        closeCombatPhaseParameters: SCombatPhaseParameters
        nonCombatPhaseParameters: SCombatPhaseParameters
        availableCombatPhasesArray: array<SCombatPhaseParameters>
        initialCombatPhasesArray: array<SCombatPhaseParameters>
        combatPhasesArray: array<SCombatPhaseParameters>
        setBehVariableName: name
        activationEventReceived: float
        rangedCombatTimeStamp: float
        closeCombatTimeStamp: float
        nonCombatTimeStamp: float
        currentCombatPhase: int
        afterFirstChoice: bool

    BTTaskManageCombatPhasesDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        rangedCombatPhaseParameters: SCombatPhaseParameters
        closeCombatPhaseParameters: SCombatPhaseParameters
        nonCombatPhaseParameters: SCombatPhaseParameters
        setBehVariableName: name

    BTTaskManageObjectsInPhantomComponentSlots:
      .extends: IBehTreeTask
      .adds:
        checkDistanceOnIsAvailable: bool
        createEntityResourceNames: array<name>
        attachSlotNames: array<name>
        activateOnAnimEvent: name
        drawEntitiesFromArea: bool
        drawEntitiesRadius: float
        drawEntitiesTag: name
        drawSpeedLimit: float
        snapDrawnEntityToGround: bool
        shootAtLookatTarget: bool
        destroyEntityOnAnimEvent: name
        shootEntityOnAnimEvent: name
        shootAllDrawnEntitiesAtOnce: bool
        disperseObjectsOnAnimEvent: name
        playEffectOnEntityPull: name
        playEffectOnEntityAttach: name
        playEffectOnDestroyEntity: name
        playEffectOnDisperseObjects: name
        m_Npc: CNewNPC
        m_CreateEntityTemplates: array<CEntityTemplate>
        m_EntitiesDrawnFromArea: array<CEntity>
        m_CurveComponents: array<CComponent>
        m_activateEventReceived: bool
        m_destroyEntityEventReceived: bool
        m_disperceObjectsEventReceived: bool
        m_shootEntityEventReceived: bool
        m_entityResourceNameFilled: bool
        m_prevDesiredAffectedEntityPos: Vector
        m_prevSpeed: float
        m_ClosestSlot: name
        m_attachEntitiesArray: array<CEntity>
        m_collisionGroups: array<name>
        m_drawnEntities: int
        m_checkedForEntities: bool

    BTTaskManageObjectsInPhantomComponentSlotsDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        checkDistanceOnIsAvailable: bool
        createEntityResourceNames: array<name>
        attachSlotNames: array<name>
        activateOnAnimEvent: name
        drawEntitiesFromArea: bool
        snapDrawnEntityToGround: bool
        shootAtLookatTarget: bool
        shootAllDrawnEntitiesAtOnce: bool
        drawEntitiesRadius: float
        drawEntitiesTag: name
        drawSpeedLimit: float
        destroyEntityOnAnimEvent: name
        shootEntityOnAnimEvent: name
        disperseObjectsOnAnimEvent: name
        playEffectOnEntityPull: name
        playEffectOnEntityAttach: name
        playEffectOnDestroyEntity: name
        playEffectOnDisperseObjects: name

    BTTaskManageDjinnRage:
      .extends: IBehTreeTask
      .adds:
        defaultFXName: name
        playFXOnAardHit: name
        playFXOnIgniHit: name
        weakenedFXName: name
        rageAbilityName: name
        weakenedAbilityName: name
        calmDownCooldown: float
        removeWeakenedStateOnCounter: bool
        m_isInYrden: bool
        m_inRageState: bool
        m_inWeakenedState: bool
        m_enterRageTimeStamp: float
        m_enterWeakendTimeStamp: float

    BTTaskManageDjinnRageDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        defaultFXName: name
        playFXOnAardHit: name
        playFXOnIgniHit: name
        weakenedFXName: name
        rageAbilityName: name
        weakenedAbilityName: name
        calmDownCooldown: float
        removeWeakenedStateOnCounter: bool

    CBTTaskManageFact:
      .extends: IBehTreeTask
      .adds:
        fact: string
        value: int
        validFor: int
        add: bool
        doNotCompleteAfter: bool
        onActivate: bool
        onAnimEvent: bool
        eventName: name

    CBTTaskManageFactDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        fact: string
        value: int
        add: bool
        validFor: int
        doNotCompleteAfter: bool
        onActivate: bool
        onAnimEvent: bool
        eventName: name

    BTTaskManageFXInstance:
      .extends: IBehTreeTask
      .adds:
        hasAbilityCondition: name
        fxName: name
        fxTickets: int
        distanceToAnotherFx: float
        fxInstanceCheckInterval: float
        stopFxAfterDeath: bool
        npcPos: Vector
        fxInstances: int

    BTTaskManageFXInstanceDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        hasAbilityCondition: name
        fxName: name
        fxTickets: int
        distanceToAnotherFx: float
        fxInstanceCheckInterval: float
        stopFxAfterDeath: bool

    CBTTaskManageGravity:
      .extends: IBehTreeTask
      .adds:
        manageGravity: EManageGravity
        onActivate: bool
        onDeactivate: bool
        onEvent: bool
        setCustomMovement: bool

    CBTTaskManageGravityDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        manageGravity: EManageGravity
        onActivate: bool
        onDeactivate: bool
        onEvent: bool
        setCustomMovement: bool

    CBTManageIsPlayerFollower:
      .extends: IBehTreeTask
      .adds:
        targetTagCondition: name
        overrideForThisTask: bool
        disable: bool
        onActivate: bool
        onDeactivate: bool
        targetTagCompare: name

    CBTManageIsPlayerFollowerDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        targetTagCondition: name
        overrideForThisTask: bool
        disable: bool
        onActivate: bool
        onDeactivate: bool
        params1: CAIFollowParams
        params2: CAIMoveAlongPathWithCompanionParams

    BTTaskManagePackLeader:
      .extends: IBehTreeTask
      .adds:
        packName: name
        leadingRadius: float
        forceMeAsLeader: bool
        m_checkDelay: float

    BTTaskManagePackLeaderDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        packName: CBehTreeValCName
        leadingRadius: float
        forceMeAsLeader: bool

    CBTTaskManageRepulseProjectileEvents:
      .extends: IBehTreeTask
      .adds:
        performRepulseProjectileDelay: float
        ownerPosition: Vector

    CBTTaskManageRepulseProjectileEventsDef:
      .extends: IBehTreeTaskDefinition

    BTTaskManageSnappingNavigableSpace:
      .extends: IBehTreeTask
      .adds:
        snap: bool
        onDeactivate: bool

    BTTaskManageSnappingNavigableSpaceDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        snap: bool
        onDeactivate: bool

    BTTaskManageSpectralForm:
      .extends: IBehTreeTask
      .adds:
        m_LastEnteredYrden: W3YrdenEntity
        m_IsInYrden: bool

    BTTaskManageSpectralFormDef:
      .extends: IBehTreeTaskDefinition

    BTTaskManageSplashEffect:
      .extends: IBehTreeTask
      .adds:
        m_SplashEntityTemplate: CEntityTemplate
        m_PreviousDistanceFromSurface: float
        m_CrossedOnce: bool
        couldntLoadResource: bool

    BTTaskManageSplashEffectDef:
      .extends: IBehTreeTaskDefinition

    TaskManageVisibility:
      .extends: IBehTreeTask
      .adds:
        visible: bool
        changeMeshVisibility: bool
        changeGameplayVisibility: bool
        onActivate: bool
        onDeactivate: bool
        onAnimEvent: bool
        onAnimEventName: name

    TaskManageVisibilityDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        visible: bool
        changeMeshVisibility: bool
        changeGameplayVisibility: bool
        onActivate: bool
        onDeactivate: bool
        onAnimEvent: bool
        onAnimEventName: name

    TaskManageVulnerability:
      .extends: IBehTreeTask
      .adds:
        vulnerable: bool
        onActivate: bool
        onDeactivate: bool
        overrideForThisTask: bool
        onEvent: bool
        m_waitingForEndOfAnimEvent: bool

    TaskManageVulnerabilityDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        vulnerable: bool
        onActivate: bool
        onDeactivate: bool
        overrideForThisTask: bool
        onEvent: bool

    CBehTreeTaskMonsterBehaviorGraph:
      .extends: IBehTreeTask
      .adds:
        graphName: name
        res: bool
        owner: CNewNPC

    CBehTreeMonsterBehaviorGraphDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        graphName: name

    CBTTaskNavTestToTarget:
      .extends: IBehTreeTask
      .adds:
        useCombatTarget: bool

    CBTTaskNavTestToTargetDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        useCombatTarget: bool

    CBTTaskNPCNotInFrontOfPLayer:
      .extends: IBehTreeTask
      .adds:
        coneAngle: float
        angleOffset: float
        coneRange: float
        playerHeading: float
        npc: CNewNPC
        distance: float
        testedAngle: float

    CBTTaskNPCNotInFrontOfPLayerDef:
      .extends: IBehTreeConditionalTaskDefinition
      .adds:
        coneAngle: float
        angleOffset: float
        coneRange: float

    CBTTaskOlgierdPhantomAttack:
      .extends: IBehTreeTask
      .adds:
        phantomTemplate: CEntityTemplate
        phantom: W3CiriPhantom

    CBTTaskOlgierdPhantomAttackDef:
      .extends: IBehTreeTaskDefinition

    CBTTaskPlayAnimationEventDecorator:
      .extends: IBehTreeTask
      .adds:
        finishTaskOnAllowBlend: bool
        rotateOnRotateEvent: bool
        disableHitOnActivation: bool
        disableLookatOnActivation: bool
        interruptOverlayAnim: bool
        checkStats: bool
        xmlMoraleCheckName: name
        xmlStaminaCostName: name
        drainStaminaOnUse: bool
        completeTaskOnRotateEnd: bool
        useCombatTargetForRotation: bool
        setIsImportantAnim: bool
        staminaCost: float
        moraleThreshold: float
        lookAt: bool
        hitAnim: bool
        additiveHits: bool
        slowMo: bool
        guardOpen: bool
        unstoppable: bool
        waitingForEndOfDisableHit: bool
        combatDataStorage: CBaseAICombatStorage

    CBTTaskPlayAnimationEventDecoratorDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        finishTaskOnAllowBlend: bool
        rotateOnRotateEvent: bool
        disableHitOnActivation: bool
        disableLookatOnActivation: bool
        interruptOverlayAnim: bool
        checkStats: bool
        xmlMoraleCheckName: name
        xmlStaminaCostName: name
        drainStaminaOnUse: bool
        completeTaskOnRotateEnd: bool
        useCombatTargetForRotation: bool
        setIsImportantAnim: bool

    CBTTaskPlayEffect:
      .extends: IBehTreeTask
      .adds:
        effectName: CName
        sfxInsteadOfVfx: bool
        owner: CNewNPC
        onTarget: bool
        onActionTarget: bool
        onWeaponItem: bool
        turnOff: bool
        connectEffectWithTarget: bool
        connectWithActionTarget: bool
        playEffectOnComponent: bool
        componentName: name
        onAnimEvent: name
        onGameplayEvent: name
        bothGameplayAndAnimEvent: bool
        onInitialize: bool
        onActivate: bool
        onDeactivate: bool
        onSuccess: bool
        onFailure: bool
        delayEffect: float
        checkIfEffectIsPlaying: bool
        cameraShakeStrength: float
        onTaggedEntity: bool
        tagToFind: name
        animEventReceived: bool
        gameplayEventReceived: bool

    CBTTaskPlayEffectDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        effectName: CBehTreeValCName
        sfxInsteadOfVfx: bool
        onWeaponItem: bool
        turnOff: bool
        onTarget: bool
        onActionTarget: bool
        connectEffectWithTarget: bool
        connectWithActionTarget: bool
        playEffectOnComponent: bool
        componentName: name
        onAnimEvent: name
        onGameplayEvent: name
        bothGameplayAndAnimEvent: bool
        onInitialize: bool
        onActivate: bool
        onDeactivate: bool
        onSuccess: bool
        onFailure: bool
        delayEffect: float
        checkIfEffectIsPlaying: bool
        cameraShakeStrength: float
        onTaggedEntity: bool
        tagToFind: name

    CBTTaskPlayerBehaviorMonitor:
      .extends: IBehTreeTask
      .adds:
        eventNameToRaise: name
        scanningCooldown: float
        extraWindow: float
        sendEvent: bool

    CBTTaskPlayerBehaviorMonitorDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        eventNameToRaise: name
        scanningCooldown: float

    CBTTaskFindNodeClosestToPlayer:
      .extends: IBehTreeTask
      .adds:
        nodeTag: name
        range: float

    CBTTaskFindNodeClosestToPlayerDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        nodeTag: name
        range: float

    BTTaskPlayHitOnShield:
      .extends: IBehTreeTask
      .adds:
        resourceName: name
        shieldFxName: name
        npc: CNewNPC
        entityTemplate: CEntityTemplate

    BTTaskPlayHitOnShieldDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        resourceName: name
        shieldFxName: name

    CBehTreeTaskPoseChangeMonitor:
      .extends: IBehTreeTask

    CBehTreeTaskPoseChangeMonitorDef:
      .extends: IBehTreeTaskDefinition

    BTTaskPullObjectsFromGroundAndShoot:
      .extends: IBehTreeTask
      .adds:
        createEntityResourceName: name
        numberToSpawn: int
        numberOfCircles: int
        spawnPositionPattern: ESpawnPositionPattern
        spawnRotation: ESpawnRotation
        spawnInTargetDirection: bool
        zAxisSpawnOffset: float
        raiseObjectsToCapsuleHeightRatio: float
        raiseObjectsHeightNoise: float
        spawnObjectsInConeAngle: float
        randomnessInCircles: float
        useRandomSpaceBetweenSpawns: bool
        spawnRadiusMin: float
        spawnRadiusMax: float
        spawnInRandomOrder: bool
        delayBetweenSpawn: float
        activateOnAnimEvent: name
        activateAfter: float
        calculateSpeedFromPullDuration: float
        drawSpeedLimit: float
        drawEntityRotationSpeed: float
        completeTaskAfterShooting: bool
        shootEntitiesInRandomOrder: bool
        shootAtLookatTarget: bool
        shootInAllDirections: bool
        shootDirectionNoise: float
        shootEntityOnAnimEvent: name
        shootEntityAfter: float
        shootEntitiesInterval: float
        playEffectOnEntityCreation: name
        stopEffectOnDeactivate: name
        m_Npc: CNewNPC
        m_CreateEntityTemplate: CEntityTemplate
        m_CreatedEntities: array<CEntity>
        m_entitiesToPull: array<CEntity>
        m_entitiesToShoot: array<CEntity>
        m_activateEventReceived: bool
        m_shootEntityEventReceived: bool
        m_aardHitEventReceived: bool
        m_initialPosArray: array<Vector>
        m_finalPosArray: array<Vector>
        m_prevSpeed: float
        m_lastShootTime: float
        m_collisionGroups: array<name>
        couldntLoadResource: bool

    BTTaskPullObjectsFromGroundAndShootDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        createEntityResourceName: name
        zAxisSpawnOffset: float
        raiseObjectsToCapsuleHeightRatio: float
        raiseObjectsHeightNoise: float
        numberToSpawn: int
        numberOfCircles: int
        spawnPositionPattern: ESpawnPositionPattern
        spawnRotation: ESpawnRotation
        spawnInTargetDirection: bool
        spawnObjectsInConeAngle: float
        randomnessInCircles: float
        useRandomSpaceBetweenSpawns: bool
        spawnRadiusMin: float
        spawnRadiusMax: float
        spawnInRandomOrder: bool
        delayBetweenSpawn: float
        activateOnAnimEvent: name
        activateAfter: float
        shootEntityOnAnimEvent: name
        shootEntityAfter: float
        drawSpeedLimit: float
        calculateSpeedFromPullDuration: float
        drawEntityRotationSpeed: float
        shootAtLookatTarget: bool
        shootEntitiesInRandomOrder: bool
        shootInAllDirections: bool
        completeTaskAfterShooting: bool
        shootDirectionNoise: float
        shootEntitiesInterval: float
        playEffectOnEntityCreation: name
        stopEffectOnDeactivate: name

    BTTaskRaiseEventOnEntity:
      .extends: IBehTreeTask
      .adds:
        entityTag: name
        eventName: name
        forceEvent: bool
        maxDistFromNpc: float
        raiseSameEventOnOwner: bool

    BTTaskRaiseEventOnEntityDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        entityTag: name
        eventName: name
        forceEvent: bool
        maxDistFromNpc: float
        raiseSameEventOnOwner: bool

    BTTaskPlaySyncedAnimWithEntity:
      .extends: IBehTreeTask
      .adds:
        entityTag: name
        syncAnimName: name

    BTTaskPlaySyncedAnimWithEntityDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        entityTag: name
        syncAnimName: name

    CBTTaskReactionToGiantWeaponMonitor:
      .extends: IBehTreeTask
      .adds:
        effectResourceName: name
        playFxOnEffectEntity: name
        spawnZOffset: float
        effectEntity: CEntityTemplate
        victim: CActor
        victimsArray: array<CActor>
        actorEventReceived: bool
        entityPos: Vector
        entityRot: EulerAngles

    CBTTaskReactionToGiantWeaponMonitorDef:
      .extends: IBehTreeConditionalTaskDefinition
      .adds:
        effectResourceName: name
        playFxOnEffectEntity: name
        spawnZOffset: float

    BTTaskRecoverStat:
      .extends: IBehTreeTask
      .adds:
        npc: CNewNPC
        percentReturn: int
        onActivate: bool
        onDeactivate: bool

    BTTaskRecoverStatDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        percentReturn: int
        onActivate: bool
        onDeactivate: bool

    CBTTaskRootPitch:
      .extends: IBehTreeTask
      .adds:
        mac: CMovingPhysicalAgentComponent

    CBTTaskRootPitchDef:
      .extends: IBehTreeTaskDefinition

    CBTTaskSearchForThrowable:
      .extends: IBehTreeTask
      .adds:
        range: float
        tag: name
        selectedObject: CNode
        physicalComponent: CComponent
        activate: bool
        findTime: float

    CBTTaskSearchForThrowableDef:
      .extends: IBehTreeTaskDefinition

    CBTTaskSendInfo:
      .extends: IBehTreeTask
      .adds:
        onIsAvailable: bool
        onActivate: bool
        onDectivate: bool
        infoType: EActionInfoType
        useCombatTarget: bool
        distanceToBecomeUnawareOfOldTarget: float
        lastTarget: CNode

    CBTTaskSendInfoDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        onIsAvailable: bool
        onActivate: bool
        onDectivate: bool
        infoType: EActionInfoType
        useCombatTarget: bool

    CBTTaskStopMovingBack:
      .extends: IBehTreeTask
      .adds:
        compTime: float

    CBTTaskStopMovingBackDef:
      .extends: IBehTreeTaskDefinition

    BTTaskEredinChangeArena:
      .extends: IBehTreeTask
      .adds:
        resourceName: name
        eventName: name
        spawnPortalInTaggedNode: bool
        nodeTag: name
        destinationTag: name
        factOnPlayerTeleport: string
        entityTemplate: CEntityTemplate
        shouldCreateRift: bool

    BTTaskEredinChangeArenaDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        resourceName: name
        eventName: name
        spawnPortalInTaggedNode: bool
        nodeTag: name
        destinationTag: name
        factOnPlayerTeleport: string

    BTTaskSpawnEntitiesAttack:
      .extends: IBehTreeTask
      .adds:
        resourceName: name
        eventName: name
        numberOfEntities: int
        timeBetweenSpawn: float
        minDistFromTarget: float
        maxDistFromTarget: float
        minDistFromEachOther: float
        initialDelay: float
        behVariableToSetOnEnd: name
        shouldStart: bool
        lastSpawnTimestamp: float
        spawnTimeout: float
        checkDistanceOfNpcToTarget: bool
        spawnEntitiesAroundOwner: bool
        entityTemplate: CEntityTemplate
        usedPos: array<Vector>

    BTTaskSpawnEntitiesAttackDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        resourceName: name
        eventName: name
        numberOfEntities: int
        timeBetweenSpawn: float
        minDistFromTarget: float
        maxDistFromTarget: float
        minDistFromEachOther: float
        initialDelay: float
        behVariableToSetOnEnd: name
        checkDistanceOfNpcToTarget: bool
        spawnEntitiesAroundOwner: bool

    BTTaskEredinIceSpikesAttack:
      .extends: BTTaskSpawnEntitiesAttack

    BTTaskEredinIceSpikesAttackDef:
      .extends: BTTaskSpawnEntitiesAttackDef

    BTTaskEredinMeteoriteAttack:
      .extends: BTTaskSpawnEntitiesAttack
      .adds:
        collisionGroups: array<name>

    BTTaskEredinMeteoriteAttackDef:
      .extends: BTTaskSpawnEntitiesAttackDef

    BTTaskEredinSummonMeteoriteStorm:
      .extends: IBehTreeTask
      .adds:
        resourceName: name
        eventName: name
        shouldSpawn: bool
        entityTemplate: CEntityTemplate

    BTTaskEredinSummonMeteoriteStormDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        resourceName: name
        eventName: name

    BTTaskBlockPlayerActions:
      .extends: IBehTreeTask
      .adds:
        block: bool
        onActivate: bool

    BTTaskBlockPlayerActionsDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        block: bool
        onActivate: bool

    BTTaskEredinMonitorSignCast:
      .extends: IBehTreeTask

    BTTaskEredinMonitorSignCastDef:
      .extends: IBehTreeTaskDefinition

    BTTaskEredinCanSpawnRift:
      .extends: IBehTreeTask

    BTTaskEredinCanSpawnRiftDef:
      .extends: IBehTreeTaskDefinition

    BTTaskEredinCanPerformAction:
      .extends: IBehTreeTask
      .adds:
        combatDataStorage: CBossAICombatStorage
        action: EBossAction

    BTTaskEredinCanPerformActionDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        action: EBossAction

    BTTaskEredinSetCanPerformAction:
      .extends: IBehTreeTask
      .adds:
        combatDataStorage: CBossAICombatStorage
        npc: CNewNPC
        action: EBossAction
        value: bool
        onActivate: bool

    BTTaskEredinSetCanPerformActionDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        action: EBossAction
        value: bool
        onActivate: bool

    BTTaskEredinIsAttackAvailable:
      .extends: IBehTreeTask
      .adds:
        combatDataStorage: CBossAICombatStorage
        attack: EBossSpecialAttacks

    BTTaskEredinIsAttackAvailableDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        attack: EBossSpecialAttacks

    BTTaskEredinSetIsAttackAvailable:
      .extends: IBehTreeTask
      .adds:
        combatDataStorage: CBossAICombatStorage
        attack: EBossSpecialAttacks
        val: bool
        onActivate: bool

    BTTaskEredinSetIsAttackAvailableDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        attack: EBossSpecialAttacks
        val: bool
        onActivate: bool

    BTTaskEredinSetIsInSpecialAttack:
      .extends: IBehTreeTask
      .adds:
        combatDataStorage: CBossAICombatStorage

    BTTaskEredinSetIsInSpecialAttackDef:
      .extends: IBehTreeTaskDefinition

    BTTaskEredinGetIsInSpecialAttack:
      .extends: IBehTreeTask
      .adds:
        combatDataStorage: CBossAICombatStorage

    BTTaskEredinGetIsInSpecialAttackDef:
      .extends: IBehTreeTaskDefinition

    BTTaskEredinIsTaunting:
      .extends: IBehTreeTask
      .adds:
        combatDataStorage: CBossAICombatStorage

    BTTaskEredinIsTauntingDef:
      .extends: IBehTreeTaskDefinition

    BTTaskEredinPhaseChange:
      .extends: IBehTreeTask
      .adds:
        action: EEredinPhaseChangeAction

    BTTaskEredinPhaseChangeDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        action: EEredinPhaseChangeAction

    BTTaskLockCameraToTarget:
      .extends: IBehTreeTask
      .adds:
        lock: bool
        onActivate: bool

    BTTaskLockCameraToTargetDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        lock: bool
        onActivate: bool

    BTTaskIsPlayerReachable:
      .extends: IBehTreeTask
      .adds:
        playerPos: Vector

    BTTaskIsPlayerReachableDef:
      .extends: IBehTreeTaskDefinition

    BTCondIsInvulnerable:
      .extends: IBehTreeTask

    BTCondIsInvulnerableDef:
      .extends: IBehTreeTaskDefinition

    CBTTaskSetAppearance:
      .extends: IBehTreeTask
      .adds:
        appearanceName: name
        previousAppearance: name
        onActivate: bool
        onDeactivate: bool
        onSuccess: bool
        onAnimEvent: bool
        overrideForTask: bool
        eventName: name

    CBTTaskSetAppearanceDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        appearanceName: name
        onActivate: bool
        onDeactivate: bool
        onSuccess: bool
        onAnimEvent: bool
        overrideForTask: bool
        eventName: name

    CBTTaskSetBehVar:
      .extends: IBehTreeTask
      .adds:
        behVarName: name
        behVarValue: float
        inAllBehGraphs: bool
        onDeactivate: bool
        onSuccess: bool

    CBTTaskSetBehVarDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        behVarName: CBehTreeValCName
        behVarValue: CBehTreeValFloat
        inAllBehGraphs: bool
        onDeactivate: bool
        onSuccess: bool

    CBTTaskSetBehVarOnAnimEvent:
      .extends: IBehTreeTask
      .adds:
        npc: CNewNPC
        eventName: name
        behVarName: name
        behVarValue: float
        eventReceived: bool
        onDurationEvent: bool
        behValueOnDurationEventStart: float
        behValueOnDurationEventEnd: float

    CBTTaskSetBehVarOnAnimEventDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        eventName: name
        behVarName: name
        behVarValue: float
        onDurationEvent: bool
        behValueOnDurationEventStart: float
        behValueOnDurationEventEnd: float

    CBTTaskSetBehVarOnScriptEvent:
      .extends: IBehTreeTask
      .adds:
        activationEventName: name
        behVarName: name
        behVarValue: float
        prevBehVarValue: float
        delay: float
        activationEventReceived: bool
        previousValueOnDurationEnd: bool

    CBTTaskSetBehVarOnScriptEventDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        activationEventName: name
        behVarName: name
        behVarValue: float
        delay: float
        previousValueOnDurationEnd: bool

    CBTTaskSetBoatAsActionTarget:
      .extends: IBehTreeTask

    CBTTaskSetBoatAsActionTargetDef:
      .extends: IBehTreeTaskDefinition

    CBTTaskSetCanBeFollowed:
      .extends: IBehTreeTask
      .adds:
        setCanBeFollowed: bool

    CBTTaskSetCanBeFollowedDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        setCanBeFollowed: CBehTreeValBool

    BTTaskSetEncounterAsActionTarget:
      .extends: IBehTreeTask
      .adds:
        onDeactivate: bool
        encounter: CEncounter

    BTTaskSetEncounterAsActionTargetDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        onDeactivate: bool

    BTTaskSetEntityAsActionTarget:
      .extends: IBehTreeTask
      .adds:
        targetTag: name
        multipleTargetsTags: array<name>
        completeImmediately: bool

    BTTaskSetEntityAsActionTargetDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        targetTag: CBehTreeValCName
        multipleTargetsObjectName: name
        completeImmediately: bool

    BTTaskSetFlyingBossCamera:
      .extends: IBehTreeTask
      .adds:
        val: bool
        onActivate: bool

    BTTaskSetFlyingBossCameraDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        val: bool
        onActivate: bool

    BTTaskSetGuardAreaAsActionTarget:
      .extends: IBehTreeTask
      .adds:
        onDeactivate: bool

    BTTaskSetGuardAreaAsActionTargetDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        onDeactivate: bool

    BTTaskSetIsTargetableByPlayer:
      .extends: IBehTreeTask
      .adds:
        value: bool
        onActivate: bool

    BTTaskSetIsTargetableByPlayerDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        value: bool
        onActivate: bool

    BTTaskSetMorph:
      .extends: IBehTreeTask
      .adds:
        morphOnAnimEvent: bool
        time: float
        ratio: float
        morphOnActivate: bool
        ratioOnActivate: float
        timeOnActivate: float
        morphOnDeactivate: bool
        ratioOnDeactivate: float
        timeOnDeactivate: float
        m_morphIsLaunched: bool

    BTTaskSetMorphDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        morphOnAnimEvent: bool
        time: float
        ratio: float
        morphOnActivate: bool
        ratioOnActivate: float
        timeOnActivate: float
        morphOnDeactivate: bool
        ratioOnDeactivate: float
        timeOnDeactivate: float

    BTTaskSetThreatLevel:
      .extends: IBehTreeTask
      .adds:
        threatLevel: int
        addToCurrent: bool

    BTTaskSetThreatLevelDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        threatLevel: int
        addToCurrent: bool

    BTTaskSetWeakenedState:
      .extends: IBehTreeTask
      .adds:
        value: bool
        onActivate: bool

    BTTaskSetWeakenedStateDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        value: bool
        onActivate: bool

    BTTaskSetHitWindowOpened:
      .extends: IBehTreeTask
      .adds:
        value: bool
        onActivate: bool

    BTTaskSetHitWindowOpenedDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        value: bool
        onActivate: bool

    BTTaskActivateEthereal:
      .extends: IBehTreeTask
      .adds:
        onActivate: bool

    BTTaskActivateEtherealDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        onActivate: bool

    CBTTaskShootProjectileAtColumn:
      .extends: IBehTreeTask
      .adds:
        l_npc: CNewNPC
        l_projRot: EulerAngles
        l_projPos: Vector
        l_projectile: W3AdvancedProjectile
        projEntity: CEntityTemplate
        l_columnArray: array<CEntity>

    CBTTaskShootProjectileAtColumnDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        l_npc: CNewNPC
        l_projRot: EulerAngles
        l_projPos: Vector
        l_projectile: W3AdvancedProjectile
        l_columnArray: array<CEntity>
        projEntity: CEntityTemplate

    CBTTaskSignalDettlaffColumns:
      .extends: IBehTreeTask
      .adds:
        npc: CNewNPC
        summonerComponent: W3SummonerComponent
        summonsArray: array<CEntity>
        columnEntity: CDettlaffColumn
        cocoonEntity: CEntity
        shouldComplete: bool
        startPumping: bool
        stopPumping: bool

    CBTTaskSignalDettlaffColumnsDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        npc: CNewNPC
        summonerComponent: W3SummonerComponent
        summonsArray: array<CEntity>
        columnEntity: CDettlaffColumn
        shouldComplete: bool
        startPumping: bool
        stopPumping: bool

    CBTTaskSignalDettlaffArenaDestruction:
      .extends: IBehTreeTask
      .adds:
        npc: CNewNPC
        entity: CEntity
        destroyTime: float

    CBTTaskSignalDettlaffArenaDestructionDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        npc: CNewNPC
        entity: CEntity
        destroyTime: float

    CBTTaskLockViewToDettlaff:
      .extends: IBehTreeTask
      .adds:
        actor: CActor
        lock: bool

    CBTTaskLockViewToDettlaffDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        lock: bool
        actor: CActor

    ManageProjectilesDettlaff:
      .extends: IBehTreeTask

    ManageProjectilesDettlaffDef:
      .extends: IBehTreeTaskDefinition

    CBTTaskSignalGameplayEvent:
      .extends: IBehTreeTask
      .adds:
        onActivate: bool
        onDeactivate: bool
        onSuccess: bool
        onTaggedEntity: bool
        tagToFind: name
        eventName: name

    CBTTaskSignalGameplayEventDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        eventName: name
        onActivate: bool
        onDeactivate: bool
        onSuccess: bool
        onTaggedEntity: bool
        tagToFind: name

    CBTTaskSimpleEvent:
      .extends: IBehTreeTask
      .adds:
        available: bool
        Delay: float
        Event: name

    CBTTaskSimpleEventDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        Delay: float
        Event: name

    CBTTaskSirenTakeOff:
      .extends: IBehTreeTask
      .adds:
        eventReceived: bool

    CBTTaskSirenTakeOffDef:
      .extends: IBehTreeTaskDefinition

    CBTTaskSlideToTarget:
      .extends: IBehTreeTask
      .adds:
        minDistance: float
        maxDistance: float
        maxSpeed: float
        onAnimEvent: name
        adjustVertically: bool
        useCombatTarget: bool

    CBTTaskSlideToTargetDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        minDistance: float
        maxDistance: float
        maxSpeed: float
        onAnimEvent: name
        adjustVertically: bool
        rotateToTarget: bool
        useCombatTarget: bool

    CBTTaskShadowDash:
      .extends: IBehTreeTask
      .adds:
        slideSpeed: float
        slideBehindTarget: bool
        distanceOffset: float
        disableCollision: bool
        dealDamageOnContact: bool
        damageVal: float
        maxDist: float
        sideStepDist: float
        sideStepHeadingOffset: float
        minDuration: float
        maxDuration: float
        slideBlendInTime: float
        disableGameplayVisibility: bool
        isSliding: bool
        hitEntities: array<CEntity>
        collisionGroupsNames: array<name>

    CBTTaskShadowDashDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        slideSpeed: float
        slideBehindTarget: bool
        distanceOffset: float
        disableCollision: bool
        dealDamageOnContact: bool
        damageVal: float
        maxDist: float
        sideStepDist: float
        sideStepHeadingOffset: float
        minDuration: float
        maxDuration: float
        slideBlendInTime: float
        disableGameplayVisibility: bool

    CBTTaskSorceressAttacksBoid:
      .extends: CBTTaskMagicMeleeAttack
      .adds:
        attackAngle: float
        attackDist: float

    CBTTaskSorceressAttacksBoidDef:
      .extends: CBTTaskMagicMeleeAttackDef
      .adds:
        attackAngle: CBehTreeValFloat
        attackDist: CBehTreeValFloat

    CBTTaskSpawnAnim:
      .extends: IBehTreeTask
      .adds:
        spawnCondition: ESpawnCondition
        delayMain: float
        time: float
        distToActors: float
        manageGravity: bool
        raiseEventName: name
        fxName: name
        initialAppearance: name
        setAppearanceTo: name
        playFXOnAnimEvent: bool
        animEventNameActivator: name
        monitorGroundContact: bool
        dealDamageOnAnimEvent: name
        becomeVisibleOnAnimEvent: name
        tagToBeDamaged: name
        spawned: bool
        canPlayHitAnim: bool
        animEventOccured: bool
        isVisible: bool

    CBTTaskSpawnAnimDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        useSwarms: bool
        manageGravity: bool
        spawnCondition: ESpawnCondition
        distToActors: float
        delayMain: float
        raiseEventName: name
        dealDamageOnAnimEvent: CBehTreeValCName
        fxName: CBehTreeValCName
        initialAppearance: name
        setAppearanceTo: name
        playFXOnAnimEvent: CBehTreeValBool
        animEventNameActivator: CBehTreeValCName
        monitorGroundContact: CBehTreeValBool
        becomeVisibleOnAnimEvent: CBehTreeValCName
        tagToBeDamaged: name

    CBTTaskSpawnDettlaffColumns:
      .extends: IBehTreeTask
      .adds:
        owner: CNewNPC
        tempActor: CActor
        entity: CEntity
        amountToSpawn: int
        minDistanceFromTarget: float
        maxDistanceFromTarget: float
        minDistFromEachOther: float
        tagToFind: name
        entityToFind: CEntity
        entityTemplate: CEntityTemplate
        shouldComplete: bool
        summonerComponent: W3SummonerComponent
        usedPos: array<Vector>

    CBTTaskSpawnDettlaffColumnsDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        owner: CNewNPC
        tempActor: CActor
        entity: CEntity
        amountToSpawn: int
        minDistanceFromTarget: float
        maxDistanceFromTarget: float
        minDistFromEachOther: float
        tagToFind: name
        entityToFind: CEntity
        entityTemplate: CEntityTemplate
        shouldComplete: bool
        summonerComponent: W3SummonerComponent
        usedPos: array<Vector>

    CBTTaskSpawnFXEntity:
      .extends: IBehTreeTask
      .adds:
        attachToActor: bool
        useNodeWithTag: bool
        referenceNodeTag: name
        useOnlyOneFXEntity: bool
        useTargetInsteadOfOwner: bool
        useCombatTarget: bool
        baseOffsetOnCasterRotation: bool
        receiveRotationFromGameplayEvent: bool
        rotateEntityToTarget: bool
        capRotationFromOwnerToTarget: float
        zeroPitchAndRoll: bool
        attachToSlotName: name
        teleportToComponentName: name
        toComponentOnWeapon: bool
        teleportToBoneName: name
        continuousTeleport: bool
        snapToGround: bool
        resourceName: name
        spawnAfter: float
        spawnOnAnimEvent: name
        spawnOnGameplayEvent: name
        delayEntitySpawn: float
        fxNameOnSpawn: name
        continuousPlayEffectInInterval: float
        fxEntityTag: name
        destroyEntityAfter: float
        destroyEntityOnAnimEvent: name
        destroyEntityOnDeact: bool
        stopAllEffectsOnDeact: bool
        stopAllEffectsAfter: float
        zToleranceFromActorRoot: float
        offsetVector: Vector
        additionalRotation: EulerAngles
        attachedTo: CEntity
        entity: CEntity
        entityTemplate: CEntityTemplate
        timeStamp: float
        fxRotation: float
        spawned: bool
        eventReceived: bool
        receivedRotationEvent: bool
        stopped: bool
        boneIdx: int

    CBTTaskSpawnFXEntityDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        resourceName: name
        attachToActor: bool
        useNodeWithTag: bool
        useOnlyOneFXEntity: bool
        referenceNodeTag: name
        useTargetInsteadOfOwner: bool
        useCombatTarget: bool
        attachToSlotName: name
        teleportToBoneName: name
        teleportToComponentName: name
        toComponentOnWeapon: bool
        snapToGround: bool
        continuousTeleport: bool
        spawnAfter: float
        spawnOnAnimEvent: name
        spawnOnGameplayEvent: name
        delayEntitySpawn: float
        fxNameOnSpawn: name
        continuousPlayEffectInInterval: float
        fxEntityTag: name
        destroyEntityAfter: float
        destroyEntityOnAnimEvent: name
        destroyEntityOnDeact: bool
        stopAllEffectsOnDeact: bool
        stopAllEffectsAfter: float
        zToleranceFromActorRoot: float
        offsetVector: Vector
        additionalRotation: EulerAngles
        baseOffsetOnCasterRotation: bool
        rotateEntityToTarget: bool
        capRotationFromOwnerToTarget: float
        receiveRotationFromGameplayEvent: bool
        zeroPitchAndRoll: bool

    CBTTaskManageSpawnFXEntity:
      .extends: CBTTaskSpawnFXEntity
      .adds:
        activateOnAnimEvent: name
        activateOnGameplayEvent: name
        activeDuration: float
        activationCooldown: float
        teleportFXEntityOnAnimEvent: name
        teleportFXEntityOnGameplayEvent: name
        teleportInRandomDirection: bool
        randomPositionPattern: ESpawnPositionPattern
        randomTeleportMinRange: float
        randomTeleportMaxRange: float
        randomTeleportInterval: float
        teleportZAxisOffsetMin: float
        teleportZAxisOffsetMax: float
        fxNameOnRandomTeleportOnNPC: name
        fxNameOnRandomTeleportOnFXEntity: name
        fxNameOnTeleportToTargetOnNPC: name
        fxNameOnTeleportToTargetOnFXEntity: name
        connectFXWithTarget: bool
        destroyEntityOnCombatEnd: bool
        activated: bool
        lastActivation: float
        lastDeactivation: float

    CBTTaskManageSpawnFXEntityDef:
      .extends: CBTTaskSpawnFXEntityDef
      .adds:
        activateOnAnimEvent: name
        activateOnGameplayEvent: name
        activeDuration: float
        activationCooldown: float
        teleportFXEntityOnAnimEvent: name
        teleportFXEntityOnGameplayEvent: name
        teleportInRandomDirection: bool
        randomPositionPattern: ESpawnPositionPattern
        randomTeleportMinRange: float
        randomTeleportMaxRange: float
        randomTeleportInterval: float
        teleportZAxisOffsetMin: float
        teleportZAxisOffsetMax: float
        fxNameOnRandomTeleportOnNPC: name
        fxNameOnRandomTeleportOnFXEntity: name
        fxNameOnTeleportToTargetOnNPC: name
        fxNameOnTeleportToTargetOnFXEntity: name
        connectFXWithTarget: bool
        destroyEntityOnCombatEnd: bool

    CBTTaskStopEffectIfActive:
      .extends: IBehTreeTask
      .adds:
        entity: CEntity
        effectName: name
        onActivate: bool
        onDeactivate: bool
        allEffects: bool
        findActorByTag: bool
        tagToFind: name

    CBTTaskStopEffectIfActiveDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        entity: CEntity
        effectName: name
        onActivate: bool
        onDeactivate: bool
        allEffects: bool
        findActorByTag: bool
        tagToFind: name

    CBTTaskIsEffectActive:
      .extends: IBehTreeTask
      .adds:
        target: CNewNPC
        effectName: name

    CBTTaskIsEffectActiveDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        target: CNewNPC
        effectName: name

    CBTTaskStopYrden:
      .extends: IBehTreeTask
      .adds:
        npc: CNewNPC
        yrden: W3YrdenEntity
        yrdenIsActionTarget: bool
        range: float
        useYrdenRadiusAsRange: bool
        maxResults: int
        onActivate: bool
        onDeactivate: bool
        onAnimEvent: bool
        eventName: name
        stopYrdenShock: bool

    CBTTaskStopYrdenDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        yrdenIsActionTarget: bool
        range: float
        useYrdenRadiusAsRange: bool
        maxResults: int
        onActivate: bool
        onDeactivate: bool
        onAnimEvent: bool
        eventName: name
        stopYrdenShock: bool

    CBTTaskIsInYrden:
      .extends: IBehTreeTask

    CBTTaskIsInYrdenDef:
      .extends: IBehTreeTaskDefinition

    BTTaskSummonsManager:
      .extends: IBehTreeTask
      .adds:
        npc: CNewNPC
        summonedEntities: array<CGameplayEntity>
        summonedEntitiesSearchingRange: float
        summonedEntitiesTag: name
        killEntitiesOnDistance: bool
        killDistance: float

    BTTaskSummonsManagerDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        summonedEntitiesTag: name
        killEntitiesOnDistance: bool
        killDistance: float

    CBTTaskSwarmMonitor:
      .extends: IBehTreeTask
      .adds:
        monitorShieldSwarm: bool
        respawnShieldBirds: bool
        respawnThreshold: float
        respawnCooldown: float
        disableBoidPOIComponents: bool
        lair: CFlyingSwarmMasterLair
        boidPOIComponents: array<CComponent>

    CBTTaskSwarmMonitorDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        monitorShieldSwarm: bool
        respawnShieldBirds: bool
        disableBoidPOIComponents: bool
        respawnThreshold: float
        respawnCooldown: float

    CBTTaskSwarmShield:
      .extends: CBTTaskPlayAnimationEventDecorator
      .adds:
        lair: CFlyingSwarmMasterLair
        stabilizationTimer: float
        disperse: bool

    CBTTaskSwarmShieldDef:
      .extends: CBTTaskPlayAnimationEventDecoratorDef
      .adds:
        stabilizationTimer: float
        disperse: bool

    CBTTaskSwarmSpawnAnim:
      .extends: IBehTreeTask
      .adds:
        spawned: bool
        spawnCondition: ESpawnCondition
        lair: CFlyingSwarmMasterLair
        swarmStabilizeTime: float
        delayMain: float
        time: float
        distToActors: float
        currTime: float
        initialTime: float
        useSwarms: bool
        manageGravity: bool
        animEventOccured: bool
        despawnCalled: bool
        raiseEventName: name
        fxName: name
        initialAppearance: name
        setAppearanceTo: name
        playFXOnAnimEvent: bool
        res: bool
        fail: bool
        despawn: bool
        animEventNameActivator: name
        spawnCount: int

    CBTTaskSwarmSpawnAnimDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        useSwarms: bool
        manageGravity: bool
        spawnCondition: ESpawnCondition
        swarmStabilizeTime: float
        distToActors: float
        delayMain: float
        raiseEventName: name
        fxName: name
        initialAppearance: name
        setAppearanceTo: name
        playFXOnAnimEvent: bool
        animEventNameActivator: name

    CBTTaskTackle:
      .extends: IBehTreeTask
      .adds:
        dealDamage: bool
        activeOnAnimEvent: bool
        bCollisionWithActor: bool
        activated: bool
        xmlDamageName: name
        collidedActor: CActor

    CBTTaskTackleDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        dealDamage: bool
        activeOnAnimEvent: bool

    CBTTaskTeleportPlayerToNode:
      .extends: IBehTreeTask
      .adds:
        nodeToFind: name
        shouldComplete: bool
        node: CNode
        pos: Vector
        rot: EulerAngles

    CBTTaskTeleportPlayerToNodeDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        nodeToFind: name
        shouldComplete: bool
        node: CNode
        pos: Vector
        rot: EulerAngles

    CBTTaskToadBackProjectiles:
      .extends: CBTTaskProjectileAttackWithPrepare
      .adds:
        minDistFromTarget: float
        maxDistFromTarget: float
        range: float
        animEvent: array<name>
        boneNames: array<name>
        projectilesShot: bool
        npc: CNewNPC

    CBTTaskToadBackProjectilesDef:
      .extends: CBTTaskProjectileAttackWithPrepareDef
      .adds:
        minDistFromTarget: float
        maxDistFromTarget: float
        range: float
        animEvent: array<name>
        boneNames: array<name>

    CBTTaskToadEatCorpse:
      .extends: IBehTreeTask
      .adds:
        npc: CNewNPC
        corpsePos: Vector
        corpse: CEntity
        distance: float

    CBTTaskToadEatCorpseDef:
      .extends: IBehTreeTaskDefinition

    CBTTaskToadFindCorpses:
      .extends: IBehTreeTask
      .adds:
        corpsesArray: array<CGameplayEntity>
        closestCorpse: CGameplayEntity
        searchRange: float
        maxResults: int
        tag: name
        i: int
        npc: CNewNPC
        tempMinDist: float
        minDist: float
        closestCorpsePos: Vector

    CBTTaskToadFindCorpsesDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        searchRange: float
        maxResults: int
        tag: name

    CBTTaskToadYrden:
      .extends: IBehTreeTask
      .adds:
        npc: CNewNPC
        leftYrden: bool
        leaveAfter: float
        enterTimestamp: float
        l_effect: bool

    CBTTaskToadYrdenDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        npc: CActor
        leftYrden: bool
        leaveAfter: float
        enterTimestamp: float
        l_effect: bool

    CBTTaskUpdateBehGraphVariables:
      .extends: IBehTreeTask
      .adds:
        updateOnlyOnActivate: bool
        DistanceToTarget: bool
        AngleToTarget: bool
        TargetIsOnGround: bool
        predictionDelay: float
        useCombatTarget: bool

    CBTTaskUpdateBehGraphVariablesDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        updateOnlyOnActivate: bool
        DistanceToTarget: bool
        AngleToTarget: bool
        TargetIsOnGround: bool
        predictionDelay: float
        useCombatTarget: bool

    CBTTaskWasInCriticalState:
      .extends: IBehTreeTask
      .adds:
        timeDifference: float
        maxTimeDifference: float
        criticalState: ECriticalStateType
        timeOfLastCSDeactivation: float
        combatDataStorage: CBaseAICombatStorage

    CBTTaskWasInCriticalStateDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        maxTimeDifference: float
        criticalState: ECriticalStateType

    BTTaskRotateOnRotateEvent:
      .extends: IBehTreeTask

    BTTaskRotateOnRotateEventDef:
      .extends: IBehTreeTaskDefinition

    CBTTaskGroundTrapAttack:
      .extends: CBTTaskAttack
      .adds:
        allowDamageSelf: bool
        guaranteeSelfHitChance: float
        randomizePosition: bool
        guaranteeTargetHitChance: float
        guaranteeToHitEntityWithTag: float
        entityTag: name
        preferTargetsInCameraFrame: bool
        navigationSafeSpotRadius: float
        minDistFromTarget: float
        maxDistFromTarget: float
        camShakeStrength: float
        activateOnAnimEvent: name
        affectEnemiesInRange: float
        damageTypeName: name
        delayDamage: float
        debuffType: EEffectType
        raiseEventOnDamageNPC: name
        debuffDuration: float
        trapResourceName: name
        playFxOnTrapSpawn: name
        playFxDamage: name
        delayDamageFx: float
        playFxOnDamageVictim: name
        completeAfterMain: bool
        onActivateFromTaskAttack: bool
        m_trapEntity: CEntityTemplate
        m_trap: CGameplayEntity
        m_activated: bool
        guaranteedHit: bool

    CBTTaskGroundTrapAttackDef:
      .extends: CBTTaskAttackDef
      .adds:
        randomizePosition: bool
        allowDamageSelf: bool
        guaranteeSelfHitChance: float
        guaranteeTargetHitChance: float
        guaranteeToHitEntityWithTag: float
        entityTag: name
        preferTargetsInCameraFrame: bool
        navigationSafeSpotRadius: float
        minDistFromTarget: float
        maxDistFromTarget: float
        camShakeStrength: float
        activateOnAnimEvent: name
        affectEnemiesInRange: float
        raiseEventOnDamageNPC: name
        damageTypeName: name
        delayDamage: float
        debuffType: EEffectType
        debuffDuration: float
        trapResourceName: name
        playFxOnTrapSpawn: name
        playFxDamage: name
        playFxOnDamageVictim: name
        delayDamageFx: float
        completeAfterMain: bool
        onActivateFromTaskAttack: bool

    CBTTaskReactionToCustomHit:
      .extends: CBTTaskPlayAnimationEventDecorator
      .adds:
        raiseEventName: name
        waitTimeout: float
        activationTimeout: float
        timeStamp: float
        receivedEvent: bool
        isInCorrectBehGraphNode: bool
        activationScriptEvent: name
        deactivateScriptEvent: name

    CBTTaskReactionToCustomHitDef:
      .extends: CBTTaskPlayAnimationEventDecoratorDef
      .adds:
        raiseEventName: name
        waitTimeout: float
        activationTimeout: float
        activationScriptEvent: name
        deactivateScriptEvent: name

    CBTTaskTornadoAttack:
      .extends: CBTTaskAttack
      .adds:
        minCameraShakeStrength: float
        maxCameraShakeStrength: float
        cameraShakeRange: float
        cameraShakeInterval: float
        victimTestInterval: float
        debuffInterval: float
        damageInterval: float
        damageMultiplier: float
        affectEnemiesInRangeMin: float
        affectEnemiesInRangeMax: float
        castingLoopTime: float
        setBehVarOnDeactivation: name
        setBehVarValueOnDeactivation: float
        debuffTypeInRangeMin: EEffectType
        rotateToNodeByTagOnDebuffMin: name
        debuffTypeInRangeMax: EEffectType
        debuffDurationInRangeMin: float
        debuffDurationInRangeMax: float
        activateOnAnimEvent: name
        additionalFxOnDamageVictim: name
        m_activated: bool

    CBTTaskTornadoAttackDef:
      .extends: CBTTaskAttackDef
      .adds:
        minCameraShakeStrength: float
        maxCameraShakeStrength: float
        cameraShakeRange: float
        cameraShakeInterval: float
        victimTestInterval: float
        debuffInterval: float
        damageInterval: float
        damageMultiplier: float
        affectEnemiesInRangeMin: float
        affectEnemiesInRangeMax: float
        castingLoopTime: float
        setBehVarOnDeactivation: name
        setBehVarValueOnDeactivation: float
        debuffTypeInRangeMin: EEffectType
        rotateToNodeByTagOnDebuffMin: name
        debuffTypeInRangeMax: EEffectType
        debuffDurationInRangeMin: float
        debuffDurationInRangeMax: float
        activateOnAnimEvent: name
        additionalFxOnDamageVictim: name

    CBTTasFollowerShouldAttack:
      .extends: IBehTreeTask
      .adds:
        combatDataStorage: CHumanAICombatStorage

    CBTTasFollowerShouldAttackDef:
      .extends: IBehTreeFollowerTaskDefinition

    CBTTasFollowerShouldKeepDistanceToPlayer:
      .extends: IBehTreeTask
      .adds:
        combatDataStorage: CHumanAICombatStorage

    CBTTasFollowerShouldKeepDistanceToPlayerDef:
      .extends: IBehTreeFollowerTaskDefinition

    CBTTaskShouldBecomeAFollower:
      .extends: IBehTreeTask
      .adds:
        combatDataStorage: CHumanAICombatStorage

    CBTTaskShouldBecomeAFollowerDef:
      .extends: IBehTreeFollowerTaskDefinition

    CBTHackDef:
      .extends: IBehTreeTaskDefinition

    CBTCondIsMan:
      .extends: IBehTreeTask

    CBTCondIsManDef:
      .extends: CBTHackDef

    CBTTaskMaintainSpeed:
      .extends: IBehTreeTask
      .adds:
        moveType: EMoveType
        moveSpeed: float
        manageFlySpeed: bool
        onActivate: bool
        onDeactivate: bool
        speedDecay: bool
        speedDecayOnDeactivate: bool
        overrideForThisTask: bool
        decayAfter: float
        previousSpeed: float

    CBTTaskMaintainSpeedDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        moveType: EMoveType
        manageFlySpeed: bool
        onActivate: bool
        onDeactivate: bool
        speedDecay: bool
        speedDecayOnDeactivate: bool
        overrideForThisTask: bool
        decayAfter: float

    CBehTreeHLTaskCombatBase:
      .extends: IBehTreeTask
      .adds:
        wasHit: bool

    CBehTreeHLTaskCombatBaseDef:
      .extends: IBehTreeHLTaskDefinition

    CBehTreeHLTaskCombat:
      .extends: CBehTreeHLTaskCombatBase

    CBehTreeHLTaskCombatDef:
      .extends: IBehTreeHLTaskDefinition

    CBehTreeHLTaskAnimalCombat:
      .extends: CBehTreeHLTaskCombatBase

    CBehTreeHLTaskAnimalCombatDef:
      .extends: IBehTreeHLTaskDefinition

    CBehTreeTaskFlyingMonsterDeath:
      .extends: IBehTreeTask
      .adds:
        wasFlying: bool
        forceDeath: bool
        onGround: bool

    CBehTreeTaskFlyingMonsterDeathDef:
      .extends: IBehTreeTaskDefinition

    CBehTreeCondChooseUnconscious:
      .extends: IBehTreeTask

    CBehTreeCondChooseUnconsciousDef:
      .extends: IBehTreeConditionalTaskDefinition

    CBehTreeCondWasDefeatedFromFistFight:
      .extends: IBehTreeTask

    CBehTreeCondWasDefeatedFromFistFightDef:
      .extends: IBehTreeConditionalTaskDefinition

    CBehTreeTaskDeathState:
      .extends: IBehTreeTask
      .adds:
        destroyAfterAnimDelay: float
        destroyAnimEvent: bool
        fxName: name
        setAppearanceTo: name
        createReactionEvent: name
        changeAppearanceAfter: float
        saveLockID: int
        dropWeapons: bool
        deadDestructSquaredDist: float

    CBehTreeTaskDeathStateDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        destroyAfterAnimDelay: CBehTreeValFloat
        fxName: CBehTreeValCName
        setAppearanceTo: CBehTreeValCName
        changeAppearanceAfter: CBehTreeValFloat
        createReactionEvent: CBehTreeValCName

    CBehTreeTaskDeathIdle:
      .extends: IBehTreeTask
      .adds:
        setAppearanceTo: name
        changeAppearanceAfter: float
        disableRagdollAfter: float
        disableCollision: bool
        disableCollisionDelay: float
        tag: array<name>
        timeStamp: float

    CBehTreeTaskDeathIdleDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        setAppearanceTo: CBehTreeValCName
        changeAppearanceAfter: CBehTreeValFloat
        disableCollision: CBehTreeValBool
        disableCollisionDelay: CBehTreeValFloat
        disableRagdollAfter: CBehTreeValFloat

    CBTTaskDropLoot:
      .extends: IBehTreeTask
      .adds:
        onActivate: bool
        delay: float
        lootDropped: bool
        attacker: CGameplayEntity
        causer: IScriptable
        saveLockID: int

    CBTTaskDropLootDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        onActivate: bool
        delay: float

    CBehTreeHLTaskUnconscious:
      .extends: IBehTreeTask
      .adds:
        syncInstance: CAnimationManualSlotSyncInstance
        finisherEnabled: bool

    CBehTreeHLTaskUnconsciousDef:
      .extends: IBehTreeHLTaskDefinition

    CBehTreeTaskRevive:
      .extends: IBehTreeTask

    CBehTreeTaskReviveDef:
      .extends: IBehTreeTaskDefinition

    CBehTreeTaskDeathAnimDecorator:
      .extends: IBehTreeTask
      .adds:
        disableThisBranch: bool
        enabledRagdoll: bool
        disableCollisionOnAnim: bool
        ignoreForceFinisher: bool
        disableCollisionOnAnimDelay: float
        completeTimer: float
        playFXOnActivate: name
        playFXOnDeactivate: name
        stopFXOnActivate: name
        stopFXOnDeactivate: name
        playSFXOnActivate: name
        syncInstance: CAnimationManualSlotSyncInstance
        finisherEnabled: bool

    CBehTreeTaskDeathAnimDecoratorDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        completeTimer: float
        disableCollisionOnAnim: CBehTreeValBool
        disableCollisionOnAnimDelay: CBehTreeValFloat
        stopFXOnActivate: CBehTreeValCName
        stopFXOnDeactivate: CBehTreeValCName
        playFXOnActivate: CBehTreeValCName
        playFXOnDeactivate: CBehTreeValCName
        playSFXOnActivate: CBehTreeValCName

    CBehTreeHLTaskWander:
      .extends: IBehTreeTask

    CBehTreeHLTaskWanderDef:
      .extends: IBehTreeHLTaskDefinition

    IBehTreeHorseTaskDefinition:
      .extends: IBehTreeTaskDefinition

    IBehTreeHorseConditionalTaskDefinition:
      .extends: IBehTreeConditionalTaskDefinition

    CBTCondHorseIsMounted:
      .extends: IBehTreeTask
      .adds:
        waitForMountEnd: Bool
        waitForDismountEnd: Bool

    CBTCondHorseIsMountedDef:
      .extends: IBehTreeHorseConditionalTaskDefinition
      .adds:
        waitForMountEnd: Bool
        waitForDismountEnd: Bool

    CBTCondHorseIsMountedByPlayer:
      .extends: CBTCondHorseIsMounted

    CBTCondHorseIsMountedByPlayerDef:
      .extends: CBTCondHorseIsMountedDef

    CBTCondHorseCanDoIdle:
      .extends: IBehTreeTask
      .adds:
        waitForMountEnd: Bool
        waitForDismountEnd: Bool

    CBTCondHorseCanDoIdleDef:
      .extends: IBehTreeHorseConditionalTaskDefinition
      .adds:
        waitForMountEnd: Bool
        waitForDismountEnd: Bool

    CBTCondHorsePerformingAction:
      .extends: IBehTreeTask
      .adds:
        mounting: bool
        dismounting: bool
        inAir: bool

    CBTCondHorsePerformingActionDef:
      .extends: IBehTreeHorseConditionalTaskDefinition
      .adds:
        mounting: bool
        dismounting: bool
        inAir: bool

    CBTCondHorsePlayingAnimWithRider:
      .extends: IBehTreeTask

    CBTCondHorsePlayingAnimWithRiderDef:
      .extends: IBehTreeHorseConditionalTaskDefinition

    CBTCondHorseShouldShakeOffRider:
      .extends: IBehTreeTask
      .adds:
        activate: bool

    CBTCondHorseShouldShakeOffRiderDef:
      .extends: IBehTreeHorseConditionalTaskDefinition

    CBTTaskHorseForceStop:
      .extends: IBehTreeTask

    CBTTaskHorseForceStopDef:
      .extends: IBehTreeHorseTaskDefinition

    CBTTaskHorseForceDismount:
      .extends: IBehTreeTask

    CBTTaskHorseForceDismountDef:
      .extends: IBehTreeHorseTaskDefinition

    CBTTaskHorseForceIdle:
      .extends: IBehTreeTask

    CBTTaskHorseForceIdleDef:
      .extends: IBehTreeHorseTaskDefinition

    CBTTaskHorseTame:
      .extends: IBehTreeTask

    CBTTaskHorseTameDef:
      .extends: IBehTreeHorseTaskDefinition

    CBTCondHorseIsTamed:
      .extends: IBehTreeTask
      .adds:
        isTamed: Bool

    CBTCondHorseIsTamedDef:
      .extends: IBehTreeHorseConditionalTaskDefinition

    CBTCondHorseIsGeralts:
      .extends: IBehTreeTask

    CBTCondHorseIsGeraltsDef:
      .extends: IBehTreeHorseConditionalTaskDefinition

    CBTCondHorseParking:
      .extends: IBehTreeTask

    CBTCondHorseParkingDef:
      .extends: IBehTreeHorseConditionalTaskDefinition

    CBTTaskHorseReassure:
      .extends: IBehTreeTask
      .adds:
        animalData: CAIStorageAnimalData

    CBTTaskHorseReassureDef:
      .extends: IBehTreeHorseTaskDefinition

    CBTTaskHorseTurnAwayFromTarget:
      .extends: IBehTreeTask
      .adds:
        direction: Float
        init: Bool

    CBTTaskHorseTurnAwayFromTargetDef:
      .extends: IBehTreeHorseTaskDefinition

    CBTTaskHorseUncontrolable:
      .extends: IBehTreeTask

    CBTTaskHorseUncontrolableDef:
      .extends: IBehTreeHorseTaskDefinition

    CBTCondHorseIsNervous:
      .extends: IBehTreeTask
      .adds:
        isNervous: bool
        waitForAxiiCalmDownEnd: bool

    CBTCondHorseIsNervousDef:
      .extends: IBehTreeHorseConditionalTaskDefinition
      .adds:
        waitForAxiiCalmDownEnd: bool

    CBTTaskHorseNervous:
      .extends: IBehTreeTask
      .adds:
        timeTillNextNervous: float

    CBTTaskHorseNervousDef:
      .extends: IBehTreeHorseTaskDefinition

    CBTTaskHorseAxiiCalmDown:
      .extends: IBehTreeTask
      .adds:
        inProgress: bool
        horseMounted: Bool

    CBTTaskHorseAxiiCalmDownDef:
      .extends: IBehTreeHorseTaskDefinition

    CBTTaskHorsePlayAnimWithRider:
      .extends: IBehTreeTask
      .adds:
        eventName: CName
        deactivationEventName: CName
        workDone: bool

    CBTTaskHorsePlayAnimWithRiderDef:
      .extends: IBehTreeHorseTaskDefinition
      .adds:
        eventName: CName
        deactivationEventName: CName

    CBTTaskHorseSummon:
      .extends: IBehTreeTask
      .adds:
        horseSummonner: CEntity

    CBTTaskHorseSummonDef:
      .extends: IBehTreeHorseTaskDefinition

    CBTTaskHorseCharge:
      .extends: IBehTreeTask
      .adds:
        dealDamage: bool
        collisionWithActor: bool
        xmlDamageName: name
        collidedActor: CActor

    CBTTaskHorseChargeDef:
      .extends: IBehTreeHorseTaskDefinition

    CBTCondHorseScriptedActionPending:
      .extends: IBehTreeTask
      .adds:
        scriptedActionPending: bool

    CBTCondHorseScriptedActionPendingDef:
      .extends: IBehTreeHorseConditionalTaskDefinition

    CBTTaskHorseRequiredItemsForRider:
      .extends: IBehTreeTask
      .adds:
        processLeftItem: bool
        processRightItem: bool
        LeftItemType: CName
        RightItemType: CName

    CBTTaskHorseRequiredItemsForRiderDef:
      .extends: IBehTreeHorseTaskDefinition
      .adds:
        RightItemType: name

    CBTTaskHorseSheathWeaponsForRider:
      .extends: IBehTreeTask
      .adds:
        processLeftItem: bool
        processRightItem: bool
        rider: CActor

    CBTTaskHorseSheathWeaponsForRiderDef:
      .extends: IBehTreeHorseTaskDefinition

    CBTCondRiderCanPerformAttack:
      .extends: IBehTreeTask
      .adds:
        rider: CActor

    CBTCondRiderCanPerformAttackDef:
      .extends: IBehTreeHorseTaskDefinition

    CBTTaskHorseManageRiderPosition:
      .extends: IBehTreeTask
      .adds:
        rider: CActor
        activation_distance: float

    CBTTaskHorseManageRiderPositionDef:
      .extends: IBehTreeHorseTaskDefinition

    CBTTaskHorsePerformRiderAttack:
      .extends: IBehTreeTask
      .adds:
        rider: CActor

    CBTTaskHorsePerformRiderAttackDef:
      .extends: IBehTreeHorseTaskDefinition

    CBTCondIsHorseInAreaWithObstacles:
      .extends: IBehTreeTask
      .adds:
        testRadius: float
        testFreq: float
        lastTestTime: float
        lastResult: bool

    CBTCondIsHorseInAreaWithObstaclesDef:
      .extends: IBehTreeHorseTaskDefinition
      .adds:
        testRadius: float

    CBTTaskHorseUpdateRiderLookat:
      .extends: IBehTreeTask
      .adds:
        rider: CActor
        boneName: name
        useCombatTarget: bool
        useCustomTarget: bool

    CBTTaskHorseUpdateRiderLookatDef:
      .extends: IBehTreeHorseTaskDefinition
      .adds:
        useCombatTarget: bool
        useCustomTarget: bool
        boneName: name

    CBTTaskHorseSetRiderCombatTarget:
      .extends: IBehTreeTask
      .adds:
        wannaActivate: bool

    CBTTaskHorseSetRiderCombatTargetDef:
      .extends: IBehTreeHorseTaskDefinition

    CBTTaskHorseHasRiderCombatTarget:
      .extends: IBehTreeTask

    CBTTaskHorseHasRiderCombatTargetDef:
      .extends: IBehTreeHorseTaskDefinition

    CBTTaskHorseSendInfo:
      .extends: CBTTaskSendInfo

    CBTTaskHorseSendInfoDef:
      .extends: IBehTreeHorseTaskDefinition
      .adds:
        onIsAvailable: bool
        onActivate: bool
        onDectivate: bool
        infoType: EActionInfoType
        notifyPlayerInsteadOfCombatTarget: bool

    CBTTaskHorseChangeAttitudeGroup:
      .extends: IBehTreeTask

    CBTTaskHorseChangeAttitudeGroupDef:
      .extends: IBehTreeHorseTaskDefinition

    CBTTaskHorseSetCurrentPlayerInteriorAsActionTarget:
      .extends: IBehTreeTask

    CBTTaskHorseSetCurrentPlayerInteriorAsActionTargetDef:
      .extends: IBehTreeHorseTaskDefinition

    CBTCondIsHorseOnNavMesh:
      .extends: IBehTreeTask

    CBTCondIsHorseOnNavMeshDef:
      .extends: IBehTreeConditionalTaskDefinition

    CBTTaskBroadcastEvent:
      .extends: IBehTreeTask
      .adds:
        owner: CNewNPC
        eventName: name
        lifetime: float
        distance: float
        broadcastInterval: float
        recipientCount: int
        broadcastScene: bool
        skipInvoker: bool

    CBTTaskBroadcastEventDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        eventName: name
        lifetime: float
        distance: float
        broadcastInterval: float
        recipientCount: int
        broadcastScene: bool
        skipInvoker: bool

    CBTTaskRemoveReactionEvent:
      .extends: IBehTreeTask
      .adds:
        owner: CNewNPC
        eventName: name

    CBTTaskRemoveReactionEventDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        eventName: name

    CBTTaskCollideWithCharacterDef:
      .extends: IBehTreeTaskDefinition

    CBTTaskCollideWithCharacter:
      .extends: IBehTreeTask
      .adds:
        isAvailable: bool
        collideEndListenEventName: name
        collideBehGrapEventName: name
        collidedConfirmedEvent: name
        collidedDirBehGraphVar: name
        collidedPushBehGraphVar: name
        cooldownToRestartTotal: float
        cooldownToStartTotal: float
        cooldownToRetryTotal: float
        cooldownToPlayCur: float
        cooldownToRestartCur: float
        cooldownToRetryCur: float
        collidedActor: CActor
        otherIsPlayer: bool
        otherIsHorse: bool
        ignoreBumpOnOneGoingAway: bool
        ignoreBumpOnBothGoingAway: bool
        ignoreBumpOnBothStopped: bool
        ignoreMinCoefToGoAway: float
        ignoreMinSpeedSqr: float

    CBTTaskFlyAround:
      .extends: CBTTaskVolumetricMove
      .adds:
        distance: float
        altitude: float
        tolerance: float
        frontalHeadingOffset: int
        landingGroundOffset: float
        randomHeight: int
        anchorPoint: CEncounter
        anchorPointAC: CAreaComponent
        anchorPointPos: Vector
        anchorPointToNpcVector: Vector
        anchorPointToNpcHeight: float
        anchorPointToNpcDistance2D: float
        npcToDestVector: Vector
        npcToDestVector2: Vector
        npcToDestDistance: float
        npcToDestAngle: float
        flightMaxDuration: float
        flightStartTime: float
        flightDuration: float

    CBTTaskFlyAroundDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        distance: CBehTreeValFloat
        altitude: CBehTreeValFloat
        tolerance: CBehTreeValFloat
        frontalHeadingOffset: CBehTreeValInt
        landingGroundOffset: CBehTreeValFloat
        randomHeight: CBehTreeValInt
        flightMaxDuration: CBehTreeValFloat
        anchorPoint: CEncounter
        anchorPointAC: CComponent

    BTTaskGetFoodNearby:
      .extends: IBehTreeTask
      .adds:
        foodToLookFor: int
        completeIfTargetChange: bool
        m_foodFound: W3FoodComponent
        m_scentFound: W3ScentComponent
        m_alreadyTrackedScents: array<W3ScentComponent>
        m_timeAtLastCheck: float
        m_delayBetweenChecks: float
        m_WasFalse: bool
        m_EntitiesAround: array<CGameplayEntity>
        m_delayBetweenUpdateEntities: float
        m_timeAtLastUpdateEntities: float

    BTTaskGetFoodNearbyDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        corpse: CBehTreeValBool
        meat: CBehTreeValBool
        vegetable: CBehTreeValBool
        water: CBehTreeValBool
        monster: CBehTreeValBool
        completeIfTargetChange: bool

    CBTTaskGuard:
      .extends: IBehTreeTask
      .adds:
        guardArea: CAreaComponent
        pursuitArea: CAreaComponent
        pursuitRange: float
        retreatType: EMoveType
        retreatSpeed: float
        intruderTestFrequency: float
        intruderTestTimeout: float
        guardState: EGuardState
        intruders: array<CGameplayEntity>
        target: CActor

    CBTTaskGuardDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        guardArea_var: name
        guardPursuitArea_var: name
        guardPursuitRange: CBehTreeValFloat
        guardRetreatType: CBTEnumMoveType
        guardRetreatSpeed: CBehTreeValFloat
        guardIntruderTestFrequency: CBehTreeValFloat

    BTTaskCheckDelaySinceLastMeal:
      .extends: IBehTreeTask
      .adds:
        value: float
        operator: EOperator

    BTTaskCheckDelaySinceLastMealDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        value: float
        operator: EOperator

    BTTaskResetLastMealDelay:
      .extends: IBehTreeTask

    BTTaskResetLastMealDelayDef:
      .extends: IBehTreeTaskDefinition

    CBTTaskHasVoiceSet:
      .extends: IBehTreeTask
      .adds:
        voiceSet: string

    CBTTaskHasVoiceSetDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        voiceSet: CBehTreeValString

    CBTTaskDrawItem:
      .extends: IBehTreeTask
      .adds:
        owner: CNewNPC
        inventory: CInventoryComponent
        temp: array<SItemUniqueId>
        itemName: CName
        eventName: CName

    CBTTaskDrawItemDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        itemName: CName
        eventName: CName

    CBTTaskHideItem:
      .extends: IBehTreeTask
      .adds:
        owner: CNewNPC
        eventName: CName

    CBTTaskHideItemDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        eventName: CName

    CBTTaskOpenDoors:
      .extends: IBehTreeTask

    CBTTaskOpenDoorsDef:
      .extends: IBehTreeTaskDefinition

    CBTTaskPlayHorseBumpSound:
      .extends: IBehTreeTask
      .adds:
        actor: CActor

    CBTTaskPlayHorseBumpSoundDef:
      .extends: IBehTreeTaskDefinition

    CBTTaskPlayVoiceSet:
      .extends: IBehTreeTask
      .adds:
        voiceSet: string
        priority: int
        waitUntilSpeechIsFinished: bool
        randomizeSpeechStart: bool
        dontActivateWhileSpeaking: bool
        speachStartDelay: float
        playOnDeactivate: bool
        playAfterXtimes: int
        breakCurrentSpeach: bool
        iterator: int

    CBTTaskPlayVoiceSetDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        voiceSet: CBehTreeValString
        priority: CBehTreeValInt
        waitUntilSpeechIsFinished: bool
        randomizeSpeechStart: bool
        dontActivateWhileSpeaking: bool
        speachStartDelay: float
        playOnDeactivate: bool
        playAfterXtimes: int
        breakCurrentSpeach: bool

    CBTTaskSetAttitude:
      .extends: IBehTreeTask
      .adds:
        towardsActionTarget: bool
        attitude: EAIAttitude
        currentAttitude: EAIAttitude
        sender: CActor
        petard: W3Petard
        reactionDataStorage: CAIStorageReactionData

    CBTTaskSetAttitudeDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        towardsActionTarget: bool
        gameplayEventName: CBehTreeValCName
        attitude: EAIAttitude

    CBTTaskUseInteractiveEntitiesInRange:
      .extends: IBehTreeTask
      .adds:
        animationEventName: name
        usableEntityTag: name
        maxTriggeredEntities: int
        delayBetweenUses: float
        checkDistance: float
        minDistanceToSelf: float
        targetType: EChosenTarget
        targetTag: name
        betweenTargetAndSelf: bool
        chosenEntities: array<W3UsableEntity>
        interactiveNodes: array<CNode>
        lastUsedTime: EngineTime
        npc: CNewNPC

    CBTTaskUseInteractiveEntitiesInRangeDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        animationEventName: name
        usableEntityTag: name
        maxTriggeredEntities: int
        delayBetweenUses: float
        checkDistance: float
        minDistanceToSelf: float
        targetType: EChosenTarget
        targetTag: name
        betweenTargetAndSelf: bool

    CBTTaskWaitFor:
      .extends: IBehTreeTask
      .adds:
        waitForTag: CName
        timeout: float
        testDistance: float
        timeoutCounter: float

    CBTTaskWaitForDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        waitForTag: CBehTreeValCName
        timeout: CBehTreeValFloat
        testDistance: CBehTreeValFloat

    BTTaskIrisGoToPainting:
      .extends: BTTaskIrisTask

    BTTaskIrisGoToPaintingDef:
      .extends: IBehTreeTaskDefinition

    BTCondIrisPaintingIsAvailable:
      .extends: BTTaskIrisTask

    BTCondIrisPaintingIsAvailableDef:
      .extends: IBehTreeConditionalTaskDefinition

    BTCondIrisPortalIsReady:
      .extends: IBehTreeTask
      .adds:
        returnTrueIfOpen: bool

    BTCondIrisPortalIsReadyDef:
      .extends: IBehTreeConditionalTaskDefinition
      .adds:
        returnTrueIfOpen: bool

    BTTaskIrisTeleportToPainting:
      .extends: BTTaskIrisTask
      .adds:
        percentageToHeal: float

    BTTaskIrisTeleportToPaintingDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        percentageToHeal: float

    CBTTaskArachasPull:
      .extends: CBTTask3StateProjectileAttack
      .adds:
        finishAttack: bool
        m_projectilesShot: int
        m_projectilesMissed: int

    CBTTaskArachasPullDef:
      .extends: CBTTask3StateProjectileAttackDef

    CBTTaskBiesCharge:
      .extends: CBTTask3StateAttack
      .adds:
        endStuck: EAttackType
        endHit: EAttackType
        bCollisionWithObstacle: bool
        bCollisionWithActor: bool
        stuckTime: float
        loopStart: bool
        cameraIndex: int
        isEnding: bool
        collidedActor: CActor

    CBTTaskBiesChargeDef:
      .extends: CBTTask3StateAttackDef
      .adds:
        endStuck: EAttackType
        endHit: EAttackType
        stuckTime: float

    CBTTaskBiesHypnotize:
      .extends: CBTTask3StateAttack
      .adds:
        cameraIndex: int
        ignoreConeCheck: bool
        done: bool

    CBTTaskBiesHypnotizeDef:
      .extends: CBTTask3StateAttackDef
      .adds:
        ignoreConeCheck: bool

    CBTTaskElementalDaoStoneSmash:
      .extends: CBTTaskAttack
      .adds:
        stoneEntityTemplate: CEntityTemplate
        Stone1: CEntity
        Stone2: CEntity
        execute: bool
        spawnDist: float
        dodgeable: bool
        targetPos: Vector

    CBTTaskElementalDaoStoneSmashDef:
      .extends: CBTTaskAttackDef
      .adds:
        stoneEntityTemplate: CEntityTemplate
        dodgeable: bool

    CBTTaskElementalThrowFire:
      .extends: CBTTaskAttack
      .adds:
        projectileEntity: CEntityTemplate
        projectile: CProjectileTrajectory
        dodgeable: bool
        projectileShot: bool

    CBTTaskElementalThrowFireDef:
      .extends: CBTTaskAttackDef
      .adds:
        projectileEntity: CEntityTemplate
        dodgeable: bool

    CBTTaskElementalThrow:
      .extends: IBehTreeTask
      .adds:
        physicalComponent: CMeshComponent
        objectEntity: CEntityTemplate
        object: CEntity

    CBTTaskElementalThrowDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        objectEntity: CEntityTemplate

    BTTaskExplodeAtDeath:
      .extends: IBehTreeTask
      .adds:
        requiredAbility: name
        damageRadius: float
        damageValue: float
        weaponSlot: name
        m_hasExploded: bool

    BTTaskExplodeAtDeathDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        requiredAbility: name
        damageRadius: float
        damageValue: float
        weaponSlot: name

    CBTTaskHarpyDustAttack:
      .extends: CBTTaskAttack
      .adds:
        addtionalFX: name
        effectRange: float
        effectAngle: float
        eventReceived: bool

    CBTTaskHarpyDustAttackDef:
      .extends: CBTTaskAttackDef
      .adds:
        addtionalFX: name
        effectRange: float
        effectAngle: float

    CBTTaskIceGiantFallingIcicles:
      .extends: CBTTaskAttack
      .adds:
        icicles: array<CGameplayEntity>
        rangeForIcyclesActivation: float
        npc: CNewNPC

    CBTTaskIceGiantFallingIciclesDef:
      .extends: CBTTaskAttackDef
      .adds:
        rangeForIcyclesActivation: float

    BTTaskIrisDeath:
      .extends: IBehTreeTask

    BTTaskIrisDeathDef:
      .extends: IBehTreeTaskDefinition

    BTTaskIrisRequestPortal:
      .extends: IBehTreeTask
      .adds:
        onDeactivate: bool
        onAnimEvent: CName
        m_Npc: W3NightWraithIris

    BTTaskIrisRequestPortalDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        onDeactivate: bool
        onAnimEvent: CName

    BTTaskIrisSetClosestPaintingAsTarget:
      .extends: BTTaskIrisTask

    BTTaskIrisSetClosestPaintingAsTargetDef:
      .extends: IBehTreeTaskDefinition

    BTTaskIrisTask:
      .extends: IBehTreeTask

    BTTaskIrisSpawn:
      .extends: BTTaskIrisTask
      .adds:
        m_Painting: CEntity

    BTTaskIrisSpawnDef:
      .extends: IBehTreeTaskDefinition

    CBTTaskLeshyGrabAttack:
      .extends: IBehTreeTask
      .adds:
        attackType: EAttackType
        stopTaskAfterDealingDmg: bool
        useDirectionalAttacks: bool
        fxOnDamageInstigated: name
        slave: CActor
        slaveComponent: CEffectDummyComponent

    CBTTaskLeshyGrabAttackDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        attackType: EAttackType
        stopTaskAfterDealingDmg: bool
        useDirectionalAttacks: bool
        fxOnDamageInstigated: name

    CBTTaskLeshyRootAttack:
      .extends: CBTTaskAttack
      .adds:
        loopTime: float
        attackRange: float
        dodgeable: float
        projEntity: CEntityTemplate
        collisionGroups: array<name>

    CBTTaskLeshyRootAttackDef:
      .extends: CBTTaskAttackDef
      .adds:
        loopTime: float
        attackRange: float
        dodgeable: float
        projEntity: CEntityTemplate

    CBTTaskLeshyStageMonitor:
      .extends: IBehTreeTask

    CBTTaskLeshyStageMonitorDef:
      .extends: IBehTreeTaskDefinition

    CBTCondLeshyStage:
      .extends: IBehTreeTask
      .adds:
        activeInStage: ENPCFightStage
        equalHigherThanStage: bool

    CBTCondLeshyStageDef:
      .extends: IBehTreeConditionalTaskDefinition
      .adds:
        equalHigherThanStage: bool
        activeInStage: ENPCFightStage

    CBTTaskLeshyBirdAttack:
      .extends: CBTTaskSwarm
      .adds:
        loopTime: float
        attackRange: float
        time: float
        startingTime: float
        attackGroupID: CFlyingGroupId
        activeSwarm: bool
        projEntity: CEntityTemplate
        raiseEventName: name
        dodgeable: bool

    CBTTaskLeshyBirdAttackDef:
      .extends: CBTTaskAttackDef
      .adds:
        loopTime: float
        attackRange: float
        projEntity: CEntityTemplate
        raiseEventName: name
        dodgeable: bool

    BTTaskManageFlies:
      .extends: IBehTreeTask
      .adds:
        entityToSummon: CEntityTemplate
        maxFliesAlive: int
        delayBetweenSpawns: SRangeF
        delayToRespawn: SRangeF
        m_summonerCmp: W3SummonerComponent
        m_DelayToNextSpawn: float

    BTTaskManageFliesDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        entityToSummon: CEntityTemplate
        maxFliesAlive: int
        delayBetweenSpawns: SRangeF
        delayToRespawn: SRangeF

    BTTaskManageMistForm:
      .extends: CBTTaskPlayAnimationEventDecorator
      .adds:
        manageMistFormOnAnimEvents: bool
        enableOnActivate: bool
        enableOnMain: bool
        disableOnDeactivate: bool
        affectVisibility: bool
        affectGameplayVisibility: bool
        affectCollision: bool
        affectHitAnims: bool
        affectImmortality: bool
        delayExecutionInMain: float
        appearanceOnActivate: name
        appearanceOnMain: name
        restoreAppearanceOnDeactivate: bool
        appearanceOnDeactivate: name
        previousAppearanceName: name

    BTTaskManageMistFormDef:
      .extends: CBTTaskPlayAnimationEventDecoratorDef
      .adds:
        enableOnActivate: bool
        enableOnMain: bool
        disableOnDeactivate: bool
        affectVisibility: bool
        affectGameplayVisibility: bool
        affectCollision: bool
        affectHitAnims: bool
        affectImmortality: bool
        delayExecutionInMain: float
        appearanceOnActivate: name
        appearanceOnMain: name
        restoreAppearanceOnDeactivate: bool
        appearanceOnDeactivate: name

    CBTTaskPickUpAndThrow:
      .extends: IBehTreeTask
      .adds:
        projectileTemplate: CEntityTemplate
        proj: W3AdvancedProjectile
        range: float
        tag: name
        angleDist: float
        slotName: name
        pickUp: bool
        dodgeable: bool
        physicalComponent: CComponent
        wantedHeadingVec: Vector

    CBTTaskPickUpAndThrowDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        projectileTemplate: CEntityTemplate
        dodgeable: bool

    CBTTaskSearchForObject:
      .extends: IBehTreeTask
      .adds:
        range: float
        tag: name
        selectRandomObject: bool
        avoidSelectingPreviousOne: bool
        dontSelectClosestOneIfPossible: bool
        addFactOnLastObject: bool
        setActionTargetOnIsAvailable: bool
        cooldown: float
        selectedObject: CNode
        previouslySelectedObject: CGameplayEntity
        searchTimeStamp: float

    CBTTaskSearchForObjectDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        range: float
        tag: CBehTreeValCName
        selectRandomObject: bool
        avoidSelectingPreviousOne: bool
        dontSelectClosestOneIfPossible: bool
        addFactOnLastObject: bool
        setActionTargetOnIsAvailable: bool
        cooldown: float

    CBTTaskSearchForOilBarrel:
      .extends: CBTTaskSearchForObject

    CBTTaskSearchForOilBarrelDef:
      .extends: CBTTaskSearchForObjectDef

    CBTTaskSearchForRift:
      .extends: IBehTreeTask
      .adds:
        selectedObject: CNode
        range: float
        searchOnlyForActiveRifts: bool

    CBTTaskSearchForRiftDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        range: float
        searchOnlyForActiveRifts: bool

    CBTTaskSirenAttack:
      .extends: CBTTaskAttack

    CBTTaskSirenAttackDef:
      .extends: CBTTaskAttackDef

    CBTTaskTrollAttack:
      .extends: CBTTaskAttack
      .adds:
        getStats: bool

    CBTTaskTrollAttackDef:
      .extends: CBTTaskAttackDef

    CBTTaskWraithDrainDance:
      .extends: CBTTaskPlayAnimationEventDecorator
      .adds:
        drainDistance: float
        drainTemplate: CEntityTemplate
        m_isDraining: bool
        m_DrainEffectEntity: CEntity
        m_Disappeared: bool

    CBTTaskWraithDrainDanceDef:
      .extends: CBTTaskPlayAnimationEventDecoratorDef
      .adds:
        drainTemplate: CEntityTemplate

    CBTTaskWraithManageDoppelgangers:
      .extends: IBehTreeTask
      .adds:
        killDoppelgangersAtDeath: bool
        killDoppelgangersAfterTime: float
        splitEffectEntityTemplate: CEntityTemplate
        healthPercentageToRegen: float
        m_spawnTime: float
        m_SplitEntities: array<CEntity>
        m_MergeReceived: int
        m_HealthPercToReach: float
        m_MergingStarted: bool

    CBTTaskWraithManageDoppelgangersDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        killDoppelgangersAtDeath: bool
        killDoppelgangersAfterTime: float
        splitEffectEntityTemplate: CEntityTemplate
        healthPercentageToRegen: float

    CBTTaskWraithSummonDoppelganger:
      .extends: CBTTaskPlayAnimationEventDecorator
      .adds:
        splitEffectEntityTemplate: CEntityTemplate
        numberToSummon: int
        summonOnAnimEvent: name
        summonPositionPattern: ESpawnPositionPattern
        summonMaxDistance: float
        summonMinDistance: float
        entityToSummonName: name
        splitEffectEntity: name
        applyBlindnessRange: float
        entityToSummon: CEntityTemplate
        m_shouldSummon: bool
        m_hasSummoned: bool
        m_createEntityHelper: CCreateEntityHelper

    CBTTaskWraithSummonDoppelgangerDef:
      .extends: CBTTaskPlayAnimationEventDecoratorDef
      .adds:
        entityToSummonName: name
        entityToSummon: name
        splitEffectEntityTemplate: CEntityTemplate
        summonOnAnimEvent: name
        numberToSummon: int
        summonPositionPattern: ESpawnPositionPattern
        summonMaxDistance: float
        summonMinDistance: float
        applyBlindnessRange: float

    CBTTaskWyvernTakeOffEffect:
      .extends: CBTTaskPlayAnimationEventDecorator
      .adds:
        effectRange: float
        effectAngle: float
        eventReceived: bool

    CBTTaskWyvernTakeOffEffectDef:
      .extends: CBTTaskPlayAnimationEventDecoratorDef
      .adds:
        effectRange: float
        effectAngle: float

    CBTTaskFlashStep:
      .extends: IBehTreeTask
      .adds:
        vanish: bool
        disallowInPlayerFOV: bool
        teleportOutsidePlayerFOV: bool
        alreadyTeleported: bool
        teleportType: ETeleportType
        disappearfxName: name
        appearFXName: name
        emptyName: name
        minDistance: float
        maxDistance: float
        distFromLastTelePos: float
        cameraToPlayerDistance: float
        cooldown: float
        isTeleporting: bool
        nextTeleTime: float
        angle: float
        heading: Vector
        lastTelePos: Vector
        randVec: Vector
        whereTo: Vector
        teleportEventName: name
        behEventName: name

    CBTTaskFlashStepDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        minDistance: float
        maxDistance: float
        cooldown: float
        teleportEventName: name
        disallowInPlayerFOV: bool
        teleportOutsidePlayerFOV: bool
        teleportType: ETeleportType
        disappearfxName: name
        appearFXName: name

    CBTTaskAdjustVertically:
      .extends: IBehTreeTask
      .adds:
        maxSlidingSpeed: float

    CBTTaskAdjustVerticallyDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        maxSlidingSpeed: CBehTreeValFloat

    CBTTaskChangeAltitude:
      .extends: IBehTreeTask
      .adds:
        HighFlightChance: float
        LowFlightChance: float
        LandChance: float
        onActivate: bool
        onDeactivate: bool
        onMain: bool
        frequency: float
        lastChange: float

    CBTTaskChangeAltitudeDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        onActivate: bool
        onDeactivate: bool
        onMain: bool
        HighFlightChance: float
        LowFlightChance: float
        LandChance: float
        frequency: float

    CBTTaskChangeStance:
      .extends: IBehTreeTask
      .adds:
        newStance: ENpcStance
        setPrevStanceOnDeactivation: bool
        oldStance: ENpcStance
        onDeactivate: bool
        changeToFlyOnlyIfAboveGround: bool

    CBTTaskChangeStanceDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        newStance: ENpcStance
        setPrevStanceOnDeactivation: bool
        onDeactivate: bool
        changeToFlyOnlyIfAboveGround: bool

    CMoveTRGActorFlee:
      .extends: CMoveTRGScript
      .adds:
        dangerNode: CNode
        distance: float
        pursue: bool

    CBehTreeActorTaskRunFromDanger:
      .extends: IBehTreeTask
      .adds:
        dangerRadius: float
        fleeDistance: float
        dangerNode: CNode
        pursue: bool

    CBehTreeActorTaskRunFromDangerDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        dangerRadius: float
        fleeDistance: float
        pursue: bool

    CBTTaskFlyAroundTarget:
      .extends: CBTTaskVolumetricMove
      .adds:
        distance: float
        frontalHeadingOffset: int
        randomFactor: int
        height: float
        randomHeightAmplitude: float
        collisionGroupsNames: array<name>

    CBTTaskFlyAroundTargetDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        distance: CBehTreeValFloat
        frontalHeadingOffset: CBehTreeValInt
        randomFactor: CBehTreeValInt
        height: CBehTreeValFloat
        randomHeightAmplitude: CBehTreeValFloat

    CBTTaskIdle:
      .extends: IBehTreeTask
      .adds:
        toleranceAngle: float
        checkRotation: bool
        isMoving: bool

    CBTTaskIdleDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        toleranceAngle: float
        checkRotation: bool

    BTTaskMaintainDistance:
      .extends: IBehTreeTask
      .adds:
        minDistance: float
        maxDistance: float
        faceTarget: bool
        fromOutsideDuration: float
        forceTarget: CName
        m_Npc: CNewNPC

    BTTaskMaintainDistanceDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        minDistance: float
        maxDistance: float
        faceTarget: bool
        fromOutsideDuration: float
        forceTarget: CName

    CBTTaskManageSwimming:
      .extends: IBehTreeTask
      .adds:
        onActivate: bool
        isSwimmingValue: bool
        m_isInWater: bool
        m_isWaitingForWater: bool

    CBTTaskManageSwimmingDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        onActivate: bool
        isSwimmingValue: bool

    CBTTaskMoveToEnemy:
      .extends: IBehTreeTask
      .adds:
        maxDistance: float
        moveType: EMoveType
        absSpeed: float
        isMoving: bool

    CBTTaskMoveToEnemyDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        maxDistance: float
        moveType: EMoveType
        absSpeed: float

    CBTTaskPursueTarget:
      .extends: IBehTreeTask
      .adds:
        moveType: EMoveType
        minDistance: float
        keepDistance: bool
        isMoving: bool

    CBTTaskPursueTargetDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        moveType: EMoveType
        minDistance: CBehTreeValFloat
        keepDistance: CBehTreeValBool

    CBTTaskFlyPursueTarget:
      .extends: IBehTreeTask
      .adds:
        useCustom: bool
        distanceFromTarget: float
        heightFromTarget: float
        distanceTolerance: float
        predictPositionTime: float
        multiplyPredictTimeByDistance: float
        npcPosition: Vector
        targetPosition: Vector
        npcToTargetDistance2D: float
        movePos: Vector
        cachedTime: float
        randomHeight: int
        randomVectorFromTarget: Vector
        flySpeed: float

    CBTTaskFlyPursueTargetDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        useCustom: bool
        distanceFromTarget: float
        heightFromTarget: float
        distanceTolerance: float
        randomHeight: int
        predictPositionTime: float

    CBTTaskUnderwaterPursueTarget:
      .extends: IBehTreeTask
      .adds:
        useCustom: bool
        distanceFromTarget: float
        heightFromTarget: float
        distanceTolerance: float
        npcPosition: Vector
        targetPosition: Vector
        npcToTargetDistance2D: float
        movePos: Vector
        cachedTime: float
        randomHeight: int
        flySpeed: float

    CBTTaskUnderwaterPursueTargetDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        useCustom: bool
        distanceFromTarget: float
        heightFromTarget: float
        distanceTolerance: float
        randomHeight: int

    CMoveTRGPursueFlee:
      .extends: CMoveTRGScript
      .adds:
        dangerNode: CNode
        distance: float
        flee: bool

    CBTTaskMoveTRG:
      .extends: IBehTreeTask
      .adds:
        activationDistance: float
        fleeDistance: float
        ignoreEntityWithTag: name
        dangerNode: CNode
        flee: bool

    CBTTaskMoveTRGDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        fleeDistance: float
        activationDistance: float
        ignoreEntityWithTag: name
        flee: bool

    CMoveTRGFollowLocomotion:
      .extends: CMoveTRGScript
      .adds:
        attractor: CNode
        minimumDistance: float

    CBTTaskFollowOwnerTRG:
      .extends: IBehTreeTask
      .adds:
        activationDistance: float
        minimumDistance: float
        ignoreEntityWithTag: name
        attractor: CActor

    CBTTaskFollowOwnerTRGDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        activationDistance: float
        minimumDistance: float
        ignoreEntityWithTag: name

    CBTTaskMoveToWaypoint:
      .extends: IBehTreeTask
      .adds:
        waypoint: name
        moveType: EMoveType
        moveSpeed: float
        isMoving: bool
        gotTarget: bool

    CBTTaskMoveToWaypointDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        waypoint: name
        moveType: EMoveType
        moveSpeed: float

    CBTTaskRotateToEnemy:
      .extends: IBehTreeTask
      .adds:
        toleranceAngle: float
        isMoving: bool
        rotateOnRotateEvent: bool

    CBTTaskRotateToEnemyDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        toleranceAngle: float
        rotateOnRotateEvent: bool

    CBTTaskRotateNPCbyMovementAdjustor:
      .extends: IBehTreeTask
      .adds:
        npc: CNewNPC
        target: CActor
        active: bool
        onAnimEvent: bool
        eventName: name
        finishTaskOnAllowBlend: bool

    CBTTaskRotateNPCbyMovementAdjustorDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        npc: CNewNPC
        target: CActor
        active: bool
        onAnimEvent: bool
        eventName: name
        finishTaskOnAllowBlend: bool

    CBTTaskSetTargetDirection:
      .extends: IBehTreeTask
      .adds:
        npcPos: Vector
        vec: Vector
        curRot: EulerAngles
        rot: EulerAngles
        angleDistance: float
        useCombatTarget: bool
        setRotationOnActivate: bool
        setOnAnimEvent: bool
        animationEventName: name
        useTargetsTarget: bool
        completeOnAllowBlend: bool

    CBTTaskSetTargetDirectionDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        useCombatTarget: bool
        setRotationOnActivate: bool
        setOnAnimEvent: bool
        animationEventName: name
        useTargetsTarget: bool
        completeOnAllowBlend: bool

    TaskSetIsTeleporting:
      .extends: IBehTreeTask
      .adds:
        SetToFalseOnDeactivate: bool

    TaskSetIsTeleportingDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        SetToFalseOnDeactivate: bool

    TaskTeleportInWaterAction:
      .extends: TaskTeleportAction
      .adds:
        waterDepthNeeded: float

    TaskTeleportInWaterActionDef:
      .extends: TaskTeleportActionDef
      .adds:
        waterDepthNeeded: float

    TaskTeleportAction:
      .extends: IBehTreeTask
      .adds:
        teleportType: ETeleportType
        teleportToActorHeading: bool
        teleportAwayFromActorHeading: bool
        teleportInFrontOfTarget: bool
        teleportInFrontOfOwner: bool
        teleportOutsidePlayerFOV: bool
        teleportWithinPlayerFOV: bool
        teleportBehindTarget: bool
        requestedFacingDirectionNoiseAngle: float
        minDistance: float
        maxDistance: float
        minDistanceFromLastPosition: float
        setIsTeleportingFlag: bool
        minWaterDepthToAppear: float
        maxWaterDepthToAppear: float
        zTolerance: float
        rotateToTarget: bool
        testLOSforNewPosition: bool
        testNavigationBetweenCombatTargetAndNewPosition: bool
        overrideActorRadiusForNavigationTests: bool
        actorRadiusForNavigationTests: float
        checkWaterLevel: bool
        searchingTimeout: float
        nodeTag: name
        shouldSpawnMarkers: bool
        useCombatTarget: bool
        paramsOverriden: bool
        cashedBool: bool
        setInvulnerable: bool
        dontTeleportOutsideGuardArea: bool
        minDistanceFromEnititesWithTag: name
        minDistanceFromTaggedEntities: float
        alreadyTeleported: bool
        isTeleporting: bool
        distFromLastTelePos: float
        dangerZone: float
        angle: float
        lastTelePos: Vector
        lastPos: Vector
        guardArea: CAreaComponent

    TaskTeleportActionDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        setIsTeleportingFlag: bool
        minDistance: float
        maxDistance: float
        minDistanceFromLastPosition: float
        teleportToActorHeading: bool
        teleportAwayFromActorHeading: bool
        teleportInFrontOfTarget: bool
        teleportInFrontOfOwner: bool
        requestedFacingDirectionNoiseAngle: float
        teleportBehindTarget: bool
        teleportOutsidePlayerFOV: bool
        teleportWithinPlayerFOV: bool
        teleportType: ETeleportType
        minWaterDepthToAppear: float
        maxWaterDepthToAppear: float
        zTolerance: float
        rotateToTarget: bool
        testLOSforNewPosition: bool
        useCombatTarget: bool
        testNavigationBetweenCombatTargetAndNewPosition: bool
        overrideActorRadiusForNavigationTests: bool
        actorRadiusForNavigationTests: float
        checkWaterLevel: bool
        searchingTimeout: float
        nodeTag: name
        shouldSpawnMarkers: bool
        setInvulnerable: bool
        dontTeleportOutsideGuardArea: bool
        minDistanceFromEnititesWithTag: name
        minDistanceFromTaggedEntities: float

    CBTTaskTeleport:
      .extends: TaskTeleportAction
      .adds:
        vanish: bool
        forceInvisible: bool
        disallowInPlayerFOV: bool
        slideInsteadOfTeleport: bool
        cooldown: float
        nextTeleTime: float
        delayActivation: float
        delayReappearance: float
        disableGameplayVisibility: bool
        disableInvisibilityAfterReappearance: bool
        disableImmortalityAfterReappearance: bool
        disappearfxName: name
        appearFXName: name
        stopEffectAppearFXName: bool
        additionalAppearFXName: name
        performPosCheckOnTeleportEventName: bool
        performLastMomentPosCheck: bool
        activated: bool
        activationEventName: name
        teleportEventName: name
        raiseEventImmediately: bool
        raiseEventName: name
        appearRaiseEventName: name
        enableCollisionAfterReappearance: bool
        enableCollisionsOnDeactivate: bool
        appearFXPlayed: bool
        shouldPlayHitAnim: bool
        sendRotationEventAboveTeleportDist: float
        appearRaiseEventNameOnFailure: name
        setBehVarNameOnRaiseEvent: name
        setBehVarValueOnRaiseDisappearEvent: float
        setBehVarValueOnRaiseAppearEvent: float
        cameraToPlayerDistance: float
        heading: Vector
        randVec: Vector
        playerPos: Vector
        whereTo: Vector
        canBeStrafed: bool
        appearRaiseEventLaunched: bool
        disappearRaiseEventLaunched: bool
        newPosition: Vector
        rotated: bool

    CBTTaskTeleportDef:
      .extends: TaskTeleportActionDef
      .adds:
        cooldown: float
        delayActivation: float
        delayReappearance: float
        slideInsteadOfTeleport: bool
        forceInvisible: bool
        disableGameplayVisibility: bool
        disableInvisibilityAfterReappearance: bool
        disableImmortalityAfterReappearance: bool
        enableCollisionAfterReappearance: bool
        enableCollisionsOnDeactivate: bool
        disallowInPlayerFOV: bool
        performPosCheckOnTeleportEventName: bool
        performLastMomentPosCheck: bool
        activationEventName: name
        teleportEventName: name
        appearRaiseEventName: name
        appearRaiseEventNameOnFailure: name
        setBehVarNameOnRaiseEvent: name
        setBehVarValueOnRaiseDisappearEvent: float
        setBehVarValueOnRaiseAppearEvent: float
        disappearfxName: name
        appearFXName: name
        stopEffectAppearFXName: bool
        additionalAppearFXName: name
        raiseEventName: name
        raiseEventImmediately: bool
        shouldPlayHitAnim: bool
        sendRotationEventAboveTeleportDist: float

    CBTTaskTeleportDecorator:
      .extends: CBTTaskTeleport
      .adds:
        finished: bool
        completeWhenTeleported: bool

    CBTTaskTeleportDecoratorDef:
      .extends: CBTTaskTeleportDef
      .adds:
        completeWhenTeleported: bool

    CBTTaskFlyingSwarmTeleport:
      .extends: CBTTaskTeleport
      .adds:
        lair: CFlyingSwarmMasterLair
        useAnimations: bool
        attackTeleport: bool
        res: bool
        fail: bool
        despawnCalled: bool
        disableBoidPOIComponents: bool
        delayVanish: float
        fxTime: float
        spawnedBirdCount: int
        boidPOIComponents: array<CComponent>
        appearFXLoopInterval: float
        forcedDespawnTime: float

    CBTTaskFlyingSwarmTeleportDef:
      .extends: CBTTaskTeleportDef
      .adds:
        useAnimations: bool
        spawnedBirdCount: int
        delayVanish: float
        forcedDespawnTime: float
        appearFXLoopInterval: float
        disableBoidPOIComponents: bool

    CBTTaskFlyingSwarmTeleportAttack:
      .extends: CBTTaskFlyingSwarmTeleport
      .adds:
        boidRequestCompletedEvents: int
        despawnAfterAttackTime: float
        attackCompleted: bool
        res2: bool
        attackTimeStamp: float

    CBTTaskFlyingSwarmTeleportAttackDef:
      .extends: CBTTaskFlyingSwarmTeleportDef
      .adds:
        despawnAfterAttackTime: float

    CBTTaskUnderwaterSwimAroundTarget:
      .extends: CBTTaskVolumetricMove
      .adds:
        distance: float
        frontalHeadingOffset: int
        randomFactor: int
        randomHeightAmplitude: float
        minimumWaterDepth: float
        useActionTarget: bool
        maxProximityToSurface: float

    CBTTaskUnderwaterSwimAroundTargetDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        distance: CBehTreeValFloat
        frontalHeadingOffset: CBehTreeValInt
        randomFactor: CBehTreeValInt
        randomHeightAmplitude: CBehTreeValFloat
        minimumWaterDepth: CBehTreeValFloat
        useActionTarget: CBehTreeValBool
        maxProximityToSurface: float

    CBTTaskUnderwaterSwimInRandomDirection:
      .extends: CBTTaskVolumetricMove
      .adds:
        stayInGuardArea: bool
        maxProximityToSurface: float
        minimumWaterDepth: float
        randomizeDirectionDelay: SRangeF
        m_destinationDistance: float

    CBTTaskUnderwaterSwimInRandomDirectionDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        stayInGuardArea: bool
        maxProximityToSurface: float
        minimumWaterDepth: float
        randomizeDirectionDelay: SRangeF

    CBTTaskVolumetricPursueTarget:
      .extends: CBTTaskVolumetricMove
      .adds:
        distanceOffset: float
        heightOffset: float
        minDistance: float
        minHeight: float
        completeWithSucces: bool
        useAbsoluteHeightDifference: bool
        checkDistanceWithoutOffsets: bool
        skipHeightCheck: bool
        distanceDiff: float
        heightDiff: float
        isMinHeightNegative: bool

    CBTTaskVolumetricPursueTargetDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        distanceOffset: float
        heightOffset: float
        minDistance: float
        minHeight: float
        completeWithSucces: bool
        useAbsoluteHeightDifference: bool
        checkDistanceWithoutOffsets: bool
        skipHeightCheck: bool
        useCombatTarget: bool

    CBTTaskVolumetricFlyAroundTarget:
      .extends: CBTTaskVolumetricMove
      .adds:
        distance: float
        height: float
        flightMaxDuration: float
        npcToDestDistance: float
        flightStartTime: float
        flightDuration: float

    CBTTaskVolumetricFlyAroundTargetDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        distance: float
        height: float
        flightMaxDuration: float
        useCombatTarget: bool

    CBTTaskWander:
      .extends: IBehTreeTask
      .adds:
        minDistance: float
        maxDistance: float
        minSpeed: float
        maxSpeed: float
        absSpeed: float
        headingChange: float
        heading: float
        initialPosCheck: bool
        isMoving: bool
        moveType: EMoveType
        initialPos: Vector
        newHeading: Vector
        checkPos: Vector

    CBTTaskWanderDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        maxDistance: float
        minDistance: float
        moveType: EMoveType
        minSpeed: float
        maxSpeed: float

    CBTTaskVolumetricMove:
      .extends: IBehTreeTask
      .adds:
        useCombatTarget: bool
        npc: CNewNPC
        target: CNode
        dest: Vector
        npcPos: Vector
        targetPos: Vector
        targetToNpcVec: Vector
        npcToTargetVec: Vector
        path: array<Vector>
        m_collisionGroupsNames: array<name>
        m_resetSweep: bool
        m_sweepId: SScriptSweepId
        m_traceManager: CScriptBatchQueryAccessor
        m_lastSweepResult: bool

    IBehTreePlayerTaskDefinition:
      .extends: IBehTreeTaskDefinition

    IBehTreePlayerConditionalTaskDefinition:
      .extends: IBehTreeConditionalTaskDefinition

    CBTTaskPlayerActionDecorator:
      .extends: IBehTreeTask
      .adds:
        completeOnInput: bool
        prevContext: name

    CBTTaskPlayerActionDecoratorDef:
      .extends: IBehTreePlayerTaskDefinition
      .adds:
        completeOnInput: CBehTreeValBool

    CBTIsPlayerInIdle:
      .extends: IBehTreeTask

    CBTIsPlayerInIdleDef:
      .extends: IBehTreeTaskDefinition

    CBTTaskMiscreantCrying:
      .extends: IBehTreeTask
      .adds:
        miscreantName: name
        miscreant: CActor
        isAvailable: bool
        cryStartEventName: name
        cryStopEventName: name

    CBTTaskMiscreantCryingDef:
      .extends: CBTTaskQuestDef

    CBTTaskCarryMiscreant:
      .extends: IBehTreeTask
      .adds:
        attachmentBone: name
        miscreantName: name
        miscreant: CActor

    CBTTaskCarryMiscreantDef:
      .extends: CBTTaskQuestDef

    CBTTaskChangeCaranthirStaff:
      .extends: IBehTreeTask
      .adds:
        wasActivated: bool
        startEffect: bool

    CBTTaskChangeCaranthirStaffDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        startEffect: bool

    CBTTaskQuestDef:
      .extends: IBehTreeTaskDefinition

    BTTaskRaiseEventOnDeactivate:
      .extends: IBehTreeTask
      .adds:
        eventName: name

    BTTaskRaiseEventOnDeactivateDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        eventName: CBehTreeValCName

    CBTCondCheckJobType:
      .extends: IBehTreeTask
      .adds:
        jobType: EJobTreeType

    CBTCondCheckJobTypeDef:
      .extends: IBehTreeReactionTaskDefinition
      .adds:
        jobType: EJobTreeType

    CBTCondCheckNPCType:
      .extends: IBehTreeTask
      .adds:
        npcType: ENPCGroupType

    CBTCondCheckNPCTypeDef:
      .extends: IBehTreeReactionTaskDefinition
      .adds:
        npcType: ENPCGroupType

    CBTCondIsActionTargetPlayer:
      .extends: IBehTreeTask

    CBTCondIsActionTargetPlayerDef:
      .extends: IBehTreeReactionTaskDefinition

    CBTCondIsInSettlement:
      .extends: IBehTreeTask

    CBTCondIsInSettlementDef:
      .extends: IBehTreeReactionTaskDefinition

    CBTCondIsPlayerCiri:
      .extends: IBehTreeTask

    CBTCondIsPlayerCiriDef:
      .extends: IBehTreeReactionTaskDefinition

    CBTCondIsReactionTargetInCombat:
      .extends: IBehTreeTask

    CBTCondIsReactionTargetInCombatDef:
      .extends: IBehTreeReactionTaskDefinition

    CBTCondIsReactionTargetInTheSameAttitudeGroup:
      .extends: IBehTreeTask

    CBTCondIsReactionTargetInTheSameAttitudeGroupDef:
      .extends: IBehTreeReactionTaskDefinition

    CBTCondPlayerHasSwordInHand:
      .extends: IBehTreeTask

    CBTCondPlayerHasSwordInHandDef:
      .extends: IBehTreeReactionTaskDefinition

    CBTTaskChangeInteractionPriority:
      .extends: IBehTreeTask
      .adds:
        previousInteractionPriority: EInteractionPriority
        priorityChanged: bool

    CBTTaskChangeInteractionPriorityDef:
      .extends: IBehTreeReactionTaskDefinition

    CBTTaskCheckAttitudes:
      .extends: IBehTreeTask
      .adds:
        onlyHelpActorsFromTheSameAttidueGroup: bool
        useReactionTarget: bool
        owner: CActor
        sender: CActor
        sendersTarget: CActor
        attitudeToSender: EAIAttitude
        attitudeToSendersTarget: EAIAttitude
        senderAttitudeGroup: name
        sendersTargetAttitudeGroup: name
        ownerAttitudeGroup: name
        actorToChangeAttitude: CActor
        reactionDataStorage: CAIStorageReactionData

    CBTTaskCheckAttitudesDef:
      .extends: IBehTreeReactionTaskDefinition
      .adds:
        useReactionTarget: bool

    CBTTaskCheckAttitudeToTarget:
      .extends: IBehTreeTask
      .adds:
        attitude: EAIAttitude

    CBTTaskCheckAttitudeToTargetDef:
      .extends: IBehTreeReactionTaskDefinition
      .adds:
        attitude: EAIAttitude

    CBTTaskCondReactionEvent:
      .extends: IBehTreeTask
      .adds:
        reactionEventName: name
        eventReceived: bool

    CBTTaskCondReactionEventDef:
      .extends: IBehTreeReactionTaskDefinition
      .adds:
        reactionEventName: name

    CBTTaskDisableTalkInteraction:
      .extends: IBehTreeTask

    CBTTaskDisableTalkInteractionDef:
      .extends: IBehTreeReactionTaskDefinition

    CBTTaskEventsBroadcaster:
      .extends: IBehTreeTask
      .adds:
        broadcastedEvents: array<SReactionEventData>
        rescanInterval: float
        minIntervalBetweenScenes: float
        owner: CNewNPC
        i: int
        eventsCount: int
        currentTime: float
        timeOfLastScene: float

    CBTTaskEventsBroadcasterDef:
      .extends: IBehTreeReactionTaskDefinition
      .adds:
        broadcastedEvents: array<SReactionEventData>
        rescanInterval: float
        minIntervalBetweenScenes: float

    CBTTaskIsAlarmed:
      .extends: IBehTreeTask
      .adds:
        reactionDataStorage: CAIStorageReactionData

    CBTTaskIsAlarmedDef:
      .extends: IBehTreeReactionTaskDefinition

    CBTTaskIsAngry:
      .extends: IBehTreeTask
      .adds:
        reactionDataStorage: CAIStorageReactionData

    CBTTaskIsAngryDef:
      .extends: IBehTreeReactionTaskDefinition

    CBTTaskIsSpeaking:
      .extends: IBehTreeTask

    CBTTaskIsSpeakingDef:
      .extends: IBehTreeReactionTaskDefinition

    CBTTaskIsInChatScene:
      .extends: IBehTreeTask

    CBTTaskIsInChatSceneDef:
      .extends: IBehTreeReactionTaskDefinition

    CBTTaskStopAllScenes:
      .extends: IBehTreeTask

    CBTTaskStopAllScenesDef:
      .extends: IBehTreeReactionTaskDefinition

    CBTTaskPlayScreamSound:
      .extends: IBehTreeTask
      .adds:
        minFrequency: float
        maxFrequency: float
        actor: CActor

    CBTTaskPlayScreamSoundDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        minFrequency: float
        maxFrequency: float

    CBTTaskRainReaction:
      .extends: IBehTreeTask
      .adds:
        reactionDataStorage: CAIStorageReactionData

    CBTTaskRainReactionDef:
      .extends: IBehTreeReactionTaskDefinition

    CBTTaskReactionStorage:
      .extends: IBehTreeTask
      .adds:
        reactionDataStorage: CAIStorageReactionData
        onActivate: bool
        onDeactivate: bool
        onCompletion: bool
        setIsAlarmed: bool
        setTaunted: bool
        reset: bool

    CBTTaskReactionStorageDef:
      .extends: IBehTreeReactionTaskDefinition
      .adds:
        onActivate: bool
        onDeactivate: bool
        onCompletion: bool
        setIsAlarmed: bool
        setTaunted: bool
        reset: bool

    CBehTreeTaskReactionStorageCleanup:
      .extends: IBehTreeTask
      .adds:
        reactionDataStorage: CAIStorageReactionData

    CBehTreeTaskReactionStorageCleanupDef:
      .extends: IBehTreeReactionTaskDefinition

    CBTTaskResetAttitudes:
      .extends: IBehTreeTask
      .adds:
        reactionDataStorage: CAIStorageReactionData

    CBTTaskResetAttitudesDef:
      .extends: IBehTreeReactionTaskDefinition

    CBTTaskShouldBeScaredOnOverlay:
      .extends: IBehTreeTask
      .adds:
        infantInHand: bool
        catOnLap: bool
        jobTreeType: EJobTreeType

    CBTTaskScaredWhileSitting:
      .extends: CBTTaskShouldBeScaredOnOverlay
      .adds:
        leftItem: CDrawableComponent
        rightItem: CDrawableComponent
        entity: CEntity

    CBTTaskScaredWhileSittingDef:
      .extends: IBehTreeReactionTaskDefinition

    CBTCondIsSittingInInterior:
      .extends: CBTTaskShouldBeScaredOnOverlay

    CBTCondIsSittingInInteriorDef:
      .extends: IBehTreeReactionTaskDefinition

    CBTTaskSetReactionTarget:
      .extends: IBehTreeTask
      .adds:
        useCombatTarget: bool

    CBTTaskSetReactionTargetDef:
      .extends: IBehTreeReactionTaskDefinition
      .adds:
        useCombatTarget: bool

    CBTTaskSetActionTargetFromGameplayEvent:
      .extends: IBehTreeTask
      .adds:
        sender: CActor

    CBTTaskSetActionTargetFromGameplayEventDef:
      .extends: IBehTreeReactionTaskDefinition
      .adds:
        gameplayEventName: CBehTreeValCName

    CBTTaskShouldUseReactionOneLiners:
      .extends: IBehTreeTask

    CBTTaskShouldUseReactionOneLinersDef:
      .extends: IBehTreeReactionTaskDefinition

    CBTTaskSignalReactionEvent:
      .extends: IBehTreeTask
      .adds:
        reactionEventName: name
        lifeTime: float
        distanceRange: float
        broadcastInterval: float
        recipientCount: int
        skipInvoker: bool
        setActionTargetOnBroadcast: bool
        disableOnDeactivate: bool
        onActivate: bool
        onDeactivate: bool
        onSuccess: bool
        onFailure: bool
        onAnimEvent: bool
        eventName: name

    CBTTaskSignalReactionEventDef:
      .extends: IBehTreeReactionTaskDefinition
      .adds:
        reactionEventName: CBehTreeValCName
        lifeTime: float
        distanceRange: CBehTreeValFloat
        broadcastInterval: float
        recipientCount: CBehTreeValInt
        setActionTargetOnBroadcast: bool
        skipInvoker: bool
        disableOnDeactivate: bool
        onActivate: bool
        onDeactivate: bool
        onSuccess: bool
        onFailure: bool
        onAnimEvent: bool
        eventName: name

    CBTTaskStopBeingScared:
      .extends: IBehTreeTask

    CBTTaskStopBeingScaredDef:
      .extends: IBehTreeReactionTaskDefinition

    CBTTaskRidingManagerVehicleMount:
      .extends: IBehTreeTask
      .adds:
        mountType: name
        riderData: CAIStorageRiderData
        attachSlot: name

    CBTTaskRidingManagerVehicleMountDef:
      .extends: IBehTreeTaskDefinition

    CBTTaskRidingManagerVehicleDismount:
      .extends: IBehTreeTask
      .adds:
        riderData: CAIStorageRiderData

    CBTTaskRidingManagerVehicleDismountDef:
      .extends: IBehTreeTaskDefinition

    CBTTaskRidingManagerBoatMount:
      .extends: CBTTaskRidingManagerVehicleMount
      .adds:
        behGraphAlias: name

    CBTTaskRidingManagerBoatMountDef:
      .extends: CBTTaskRidingManagerVehicleMountDef

    CBTTaskRidingManagerPlayerBoatMount:
      .extends: CBTTaskRidingManagerBoatMount

    CBTTaskRidingManagerPlayerBoatMountDef:
      .extends: CBTTaskRidingManagerBoatMountDef

    CBTTaskRidingManagerNPCBoatMount:
      .extends: CBTTaskRidingManagerBoatMount

    CBTTaskRidingManagerNPCBoatMountDef:
      .extends: CBTTaskRidingManagerBoatMountDef

    CBTTaskRidingManagerBoatDismount:
      .extends: CBTTaskRidingManagerVehicleDismount

    CBTTaskRidingManagerBoatDismountDef:
      .extends: CBTTaskRidingManagerVehicleDismountDef

    CBTTaskRidingManagerPlayerBoatDismount:
      .extends: CBTTaskRidingManagerBoatDismount

    CBTTaskRidingManagerPlayerBoatDismountDef:
      .extends: CBTTaskRidingManagerBoatDismountDef

    CBTTaskRidingManagerNPCBoatDismount:
      .extends: CBTTaskRidingManagerBoatDismount

    CBTTaskRidingManagerNPCBoatDismountDef:
      .extends: CBTTaskRidingManagerBoatDismountDef

    CBTTaskRidingManagerHorseMount:
      .extends: CBTTaskRidingManagerVehicleMount

    CBTTaskRidingManagerHorseMountDef:
      .extends: CBTTaskRidingManagerVehicleMountDef

    CBTTaskRidingManagerNPCHorseMount:
      .extends: CBTTaskRidingManagerHorseMount

    CBTTaskRidingManagerNPCHorseMountDef:
      .extends: CBTTaskRidingManagerHorseMountDef

    CBTTaskRidingManagerPlayerHorseMount:
      .extends: CBTTaskRidingManagerHorseMount

    CBTTaskRidingManagerPlayerHorseMountDef:
      .extends: CBTTaskRidingManagerHorseMountDef

    CBTTaskRidingManagerHorseDismount:
      .extends: CBTTaskRidingManagerVehicleDismount

    CBTTaskRidingManagerHorseDismountDef:
      .extends: CBTTaskRidingManagerVehicleDismountDef

    CBTTaskRidingManagerNPCHorseDismount:
      .extends: CBTTaskRidingManagerHorseDismount

    CBTTaskRidingManagerNPCHorseDismountDef:
      .extends: CBTTaskRidingManagerHorseDismountDef

    CBTTaskRidingManagerPlayerHorseDismount:
      .extends: CBTTaskRidingManagerHorseDismount

    CBTTaskRidingManagerPlayerHorseDismountDef:
      .extends: CBTTaskRidingManagerHorseDismountDef

    IBehTreeRiderTaskDefinition:
      .extends: IBehTreeTaskDefinition

    IBehTreeRiderConditionalTaskDefinition:
      .extends: IBehTreeConditionalTaskDefinition

    CBTCondMyHorseIsMounted:
      .extends: IBehTreeTask
      .adds:
        waitForMountEnd: Bool
        waitForDismountEnd: Bool
        riderData: CAIStorageRiderData
        returnTrueWhenNoHorse: Bool

    CBTCondMyHorseIsMountedDef:
      .extends: IBehTreeRiderConditionalTaskDefinition
      .adds:
        waitForMountEnd: Bool
        waitForDismountEnd: Bool
        returnTrueWhenNoHorse: Bool

    CBTCondRiderHasPairedHorse:
      .extends: IBehTreeTask
      .adds:
        riderData: CAIStorageRiderData

    CBTCondRiderHasPairedHorseDef:
      .extends: IBehTreeRiderConditionalTaskDefinition

    CBTCondRiderFightOnHorse:
      .extends: IBehTreeTask
      .adds:
        riderData: CAIStorageRiderData

    CBTCondRiderFightOnHorseDef:
      .extends: IBehTreeRiderConditionalTaskDefinition

    CBTCondIsTargetMounted:
      .extends: IBehTreeTask
      .adds:
        useCombatTarget: bool

    CBTCondIsTargetMountedDef:
      .extends: IBehTreeRiderConditionalTaskDefinition
      .adds:
        useCombatTarget: bool

    CBTCondRiderDistanceToHorse:
      .extends: IBehTreeTask
      .adds:
        riderData: CAIStorageRiderData
        minDistance: float
        maxDistance: float

    CBTCondRiderDistanceToHorseDef:
      .extends: IBehTreeRiderConditionalTaskDefinition
      .adds:
        minDistance: float
        maxDistance: float

    CBTCondRiderPlayingSyncAnim:
      .extends: IBehTreeTask
      .adds:
        riderData: CAIStorageRiderData

    CBTCondRiderPlayingSyncAnimDef:
      .extends: IBehTreeRiderConditionalTaskDefinition

    CBTCondRiderIsMountInProgress:
      .extends: IBehTreeTask
      .adds:
        riderData: CAIStorageRiderData

    CBTCondRiderIsMountInProgressDef:
      .extends: IBehTreeRiderConditionalTaskDefinition

    CBTCondRiderIsDismountInProgress:
      .extends: IBehTreeTask
      .adds:
        riderData: CAIStorageRiderData

    CBTCondRiderIsDismountInProgressDef:
      .extends: IBehTreeRiderConditionalTaskDefinition

    CBTCondRiderHasFallenFromHorse:
      .extends: IBehTreeTask
      .adds:
        waitForMountEnd: Bool
        waitForDismountEnd: Bool
        riderData: CAIStorageRiderData

    CBTCondRiderHasFallenFromHorseDef:
      .extends: IBehTreeRiderConditionalTaskDefinition

    CBTTaskRiderCombatOnHorseDecorator:
      .extends: IBehTreeTask

    CBTTaskRiderCombatOnHorseDecoratorDef:
      .extends: IBehTreeRiderTaskDefinition

    CBTTaskRiderMountHorse:
      .extends: IBehTreeTask
      .adds:
        riderData: CAIStorageRiderData

    CBTTaskRiderMountHorseDef:
      .extends: IBehTreeRiderTaskDefinition

    CBTTaskRiderDismountHorse:
      .extends: IBehTreeTask
      .adds:
        riderData: CAIStorageRiderData
        endDismountDone: bool

    CBTTaskRiderDismountHorseDef:
      .extends: IBehTreeRiderTaskDefinition

    CBTTaskRiderWaitForDismount:
      .extends: IBehTreeTask
      .adds:
        rider: CActor
        actionResult: bool
        activate: bool

    CBTTaskRiderWaitForDismountDef:
      .extends: IBehTreeRiderTaskDefinition

    CBTTaskRiderSetFollowActionOnHorse:
      .extends: IBehTreeTask
      .adds:
        horseFollowAction: CAIFollowAction
        riderData: CAIStorageRiderData

    CBTTaskRiderSetFollowActionOnHorseDef:
      .extends: IBehTreeRiderTaskDefinition

    CBTTaskRiderSetFollowSideBySideActionOnHorse:
      .extends: IBehTreeTask
      .adds:
        horseFollowSideBySideAction: CAIFollowSideBySideAction
        riderData: CAIStorageRiderData

    CBTTaskRiderSetFollowSideBySideActionOnHorseDef:
      .extends: IBehTreeRiderTaskDefinition

    CBTTaskRiderSetDoNothingActionOnHorse:
      .extends: IBehTreeTask
      .adds:
        horseDoNothingAction: CAIHorseDoNothingAction
        riderData: CAIStorageRiderData

    CBTTaskRiderSetDoNothingActionOnHorseDef:
      .extends: IBehTreeRiderTaskDefinition

    CBTTaskRiderSetMoveToActionOnHorse:
      .extends: IBehTreeTask
      .adds:
        horseMoveToAction: CAIMoveToAction
        riderData: CAIStorageRiderData

    CBTTaskRiderSetMoveToActionOnHorseDef:
      .extends: IBehTreeRiderTaskDefinition

    CBTTaskRiderSetMoveAlongPathActionOnHorse:
      .extends: IBehTreeTask
      .adds:
        horseMoveAlongPathAction: CAIMoveAlongPathAction
        riderData: CAIStorageRiderData

    CBTTaskRiderSetMoveAlongPathActionOnHorseDef:
      .extends: IBehTreeRiderTaskDefinition

    CBTTaskRiderSetMoveAlongPathWithCompanionActionOnHorse:
      .extends: IBehTreeTask
      .adds:
        horseMoveAlongPathAction: CAIMoveAlongPathWithCompanionAction
        riderData: CAIStorageRiderData

    CBTTaskRiderSetMoveAlongPathWithCompanionActionOnHorseDef:
      .extends: IBehTreeRiderTaskDefinition

    CBTTaskRiderSetRaceAlongPathActionOnHorse:
      .extends: IBehTreeTask
      .adds:
        horseRaceAlongPathAction: CAIRaceAlongPathAction
        riderData: CAIStorageRiderData

    CBTTaskRiderSetRaceAlongPathActionOnHorseDef:
      .extends: IBehTreeRiderTaskDefinition

    CBTTaskRiderAdjustToHorse:
      .extends: IBehTreeTask
      .adds:
        riderData: CAIStorageRiderData
        ticket: SMovementAdjustmentRequestTicket

    CBTTaskRiderAdjustToHorseDef:
      .extends: IBehTreeRiderTaskDefinition

    CBTTaskRiderNotifyScriptedActionOnHorse:
      .extends: IBehTreeTask
      .adds:
        riderData: CAIStorageRiderData

    CBTTaskRiderNotifyScriptedActionOnHorseDef:
      .extends: IBehTreeRiderTaskDefinition

    CBTTaskRiderNotifyHorseAboutCombatTarget:
      .extends: IBehTreeTask
      .adds:
        riderData: CAIStorageRiderData

    CBTTaskRiderNotifyHorseAboutCombatTargetDef:
      .extends: IBehTreeRiderTaskDefinition

    CBTTaskRiderNotifyHorseAboutMounting:
      .extends: IBehTreeTask
      .adds:
        riderData: CAIStorageRiderData
        horseComp: W3HorseComponent

    CBTTaskRiderNotifyHorseAboutMountingDef:
      .extends: IBehTreeRiderTaskDefinition

    CBTTaskRiderSetCanBeFollowed:
      .extends: IBehTreeTask
      .adds:
        setCanBeFollowed: bool
        horse: CNewNPC

    CBTTaskRiderSetCanBeFollowedDef:
      .extends: IBehTreeRiderTaskDefinition
      .adds:
        setCanBeFollowed: CBehTreeValBool

    CBTTaskRiderStopAttack:
      .extends: IBehTreeTask
      .adds:
        riderData: CAIStorageRiderData
        horse: CNewNPC

    CBTTaskRiderStopAttackDef:
      .extends: IBehTreeRiderTaskDefinition

    CBTTaskSailorMountBoat:
      .extends: IBehTreeTask
      .adds:
        boatTag: name
        riderData: CAIStorageRiderData
        instantMount: bool

    CBTTaskSailorMountBoatDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        boatTag: CBehTreeValCName
        instantMount: CBehTreeValBool

    CBTTaskSailorDismountBoat:
      .extends: IBehTreeTask
      .adds:
        riderData: CAIStorageRiderData

    CBTTaskSailorDismountBoatDef:
      .extends: IBehTreeTaskDefinition

    CBTTaskCondIsMountedOnBoat:
      .extends: IBehTreeTask
      .adds:
        riderData: CAIStorageRiderData

    CBTTaskCondIsMountedOnBoatDef:
      .extends: IBehTreeTaskDefinition

    CBTTaskTeleportToEntity:
      .extends: IBehTreeTask
      .adds:
        entityTag: name

    CBTTaskTeleportToEntityDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        entityTag: CBehTreeValCName

    CBTTaskNpcRider:
      .extends: IBehTreeTask
      .adds:
        activate: bool
        horseComponent: W3HorseComponent
        riderEntity: CActor

    CBTTaskNpcRiderDef:
      .extends: IBehTreeTaskDefinition

    CCameraParametersSet:
      .extends: none
      .adds:
        pivotPositionControllerName: name
        pivotPositionControllerBlend: float
        pivotPosForcedBlendOnNext: float
        pivotPositionBlendFromPos: bool
        forceBlendFromPosOnNextCam: bool
        pivotRotationController: name
        pivotDistanceController: name
        launchAnimation: bool
        animationData: SCameraAnimationData
        collisionOffset: Vector

    CCameraPivotPositionControllerDrift:
      .extends: ICustomCameraScriptedPivotPositionController
      .adds:
        zOffset: float
        originalPosition: Vector
        blendSpeed: float
        blendOutMult: float
        sideDistance: float
        backDistance: float
        upDistance: float
        sideDistanceCur: float
        backDistanceCur: float
        upDistanceCur: float
        sideDistanceBlendSpeed: float
        backDistanceBlendSpeed: float
        upDistanceBlendSpeed: float
        timeToDispMax: float
        timeOfsetCur: float
        timeCur: float

    CCameraRotationControllerDrift:
      .extends: ICustomCameraScriptedPivotRotationController
      .adds:
        fixedPitch: float
        rollBase: float
        rollExtraTurn: float
        yawTotal: float
        timeCur: float
        blendSpeedRoll: float
        blendSpeedYaw: float
        turnLast: float

    CCameraPivotPositionControllerExplorationInteraction:
      .extends: CCameraPivotPositionControllerJump
      .adds:
        collisionOffsetF: float
        explorationDirection: Vector
        collisionOffset: Vector

    CCameraRotationControllerInteraction:
      .extends: ICustomCameraScriptedPivotRotationController
      .adds:
        pitchMaxSpeed: float
        blendTodesiredPitch: bool
        desiredPitch: float
        desiredPitchSpeed: float
        yawMaxSpeed: float

    CCameraPivotPositionControllerJump:
      .extends: ICustomCameraScriptedPivotPositionController
      .adds:
        useExactCamera: bool
        originalOffset: Vector
        zOffset: float
        originalPosition: Vector
        originalHeight: float
        blendXYSpeed: float
        blendXYSpeedWithTime: bool
        blendXYSpeedTimeStart: float
        blendXYSpeedTimeEnd: float
        blendXYSpeedMin: float
        blendXYSpeedMax: float
        blendZSpeedStart: float
        blendZSpeedEnd: float
        blendCurve: CCurve
        blendZBasedOn: ECameraBlendSpeedMode
        blendZHeightMaxDif: float
        blendZDistToForceStart: float
        blendZDistToForceEnd: float
        blendZDistToForceMaxCur: float
        blendZSpeedTimeMin: float
        blendZSpeedTimeTotal: float
        blendZSpeedTimeCur: float
        addOffset: bool
        verticalDownOffsetMax: float
        verticalDownTimeMax: float
        verticalDownTimeMin: float
        isInInterior: bool
        blendZInteriorTimeToFall: float
        blendZSpeedInterior: float
        blendZSpeedInteriorFall: float
        heightTraceAlwaysAdjust: bool
        heightTraceEnabled: bool
        heightTraceDownMax: float
        heightTraceTotalAdded: float
        heightTraceAccumulated: float
        heightTraceMax: float
        heightTraceTotal: float
        heightTraceSpeed: float
        heightTraceSpeedDownMin: float
        heightTraceSpeedDownMax: float
        heightTraceCollFlags: array<name>
        heightTraceCollFlagsInit: bool
        heightTraceDown: bool
        heightTraceDownTimeMin: float
        heightTraceDownTimeMax: float
        traceForwardExtraOffset: float
        heightTraceAdjusting: bool
        heightAdjustingTime: float
        boneFollowName: name
        boneFollow: int
        startFollowBoneTime: float
        followBoneOnFall: bool
        falling: bool
        forceOnGround: bool
        debugLog: bool
        zeroVector: Vector

    CCameraRotationControllerJump:
      .extends: ICustomCameraScriptedPivotRotationController
      .adds:
        pitchTotal: float
        pitchBase: float
        yawAcceleration: float
        yawMaxSpeed: float
        timeCur: float
        timeStart: float
        timeComplete: float
        blendSpeed: float
        pitchCurve: CCurve

    CCameraPivotPositionControllerKeepRelative:
      .extends: ICustomCameraScriptedPivotPositionController
      .adds:
        offset: Vector
        isSet: bool

    W3MeditationCameraRotationController:
      .extends: ICustomCameraScriptedPivotRotationController
      .adds:
        fixedPitch: float
        fixedYaw: float
        fixedRoll: float
        baseSmooth: float
        desiredYaw: float
        desired: bool
        smooth: float

    CCameraPivotPositionControllerSlide:
      .extends: ICustomCameraScriptedPivotPositionController
      .adds:
        originalPosition: Vector
        blendSpeed: float
        timeCur: float

    W3CraftsmanComponent:
      .extends: W3MerchantComponent
      .adds:
        craftsmanData: array<SCraftsman>

    CCreatureDataComponent:
      .extends: CScriptedComponent
      .adds:
        itemsUsedAgainstCreature: array<name>
        skillsUsedAgainstCreature: array<name>
        cameraDistance: float
        cameraLookAtZ: float
        cameraRotationYaw: float
        cameraRotationPitch: float
        environmentSunRotationYaw: float
        environmentSunRotationPitch: float
        appearance: name
        position: Vector
        scale: float
        fov: float

    IInventoryScriptedListener:
      .extends: none

    W3MerchantComponent:
      .extends: CScriptedComponent
      .adds:
        mapPinType: EMerchantMapPinType

    W3PostFXOnGroundComponent:
      .extends: CSelfUpdatingComponent
      .adds:
        fadeInTime: float
        activeTime: float
        fadeOutTime: float
        range: float
        type: int
        updateDelay: float
        stopAtDeath: bool
        m_Actor: CActor
        m_DelaySinceLastUpdate: float
        m_DefaultFadeInTime: float
        m_DefaultActiveTime: float
        m_DefaultFadeOutTime: float
        m_DefaultRange: float

    CR4Component:
      .extends: CScriptedComponent

    W3RunewordManager:
      .extends: none
      .adds:
        runewords: array<Runeword>

    CScriptedAnimEventsListenerComponent:
      .extends: CScriptedComponent
      .adds:
        listeners: array<CComponent>

    CFloePiece:
      .extends: CScriptedDestroyableComponent
      .adds:
        totalTime: float
        currPosition: Vector

    CBridgePiece:
      .extends: CScriptedDestroyableComponent
      .adds:
        entityPos: Vector
        compPos: Vector
        totalTime: float
        z: CEntity

    W3SlideToTargetComponent:
      .extends: CSelfUpdatingComponent
      .adds:
        speed: float
        stopDistance: float
        targetOffset: Vector
        fallBackSpeed: float
        snapToGround: bool
        normalSpeed: float
        verticalSpeed: float
        speedOscilation: SRangeF
        normalSpeedOscilation: SRangeF
        verticalOscilation: SRangeF
        speedOscilationSpeed: float
        normalSpeedOscilationSpeed: float
        verticalOscilationSpeed: float
        gameplayEventAtDestination: name
        triggerGPEventOnTarget: bool
        destroyDelayAtDestination: float
        stopEffectAtDest: name
        playEffectAtDest: name
        stayAboveNavigableSpace: bool
        considerSuccesAfterDelay: float
        m_NodeTarget: CNode
        m_VectorTarget: Vector
        m_IsFallingBack: bool
        m_Entity: CEntity
        m_CanSendEvent: bool
        m_TimeBeforeSuccess: float
        m_speedTarget: float
        m_normalSpeedTarget: float
        m_verticalOffsetTarget: float
        m_currentSpeedOsc: float
        m_currentNormalSpeedOsc: float
        m_currentVertOffest: float

    W3SpawnEntityOnAnimEvent:
      .extends: CScriptedComponent
      .adds:
        animEvent: name
        entityName: name
        entityTemplate: CEntityTemplate

    W3SummonedEntityComponent:
      .extends: CScriptedComponent
      .adds:
        m_Summoner: CActor
        m_SummonedTime: float
        shouldUseSummonerGuardArea: bool
        killOnSummonersDeath: bool

    W3SummonerComponent:
      .extends: CScriptedComponent
      .adds:
        forgetDeadEntities: bool
        m_SummonedEntities: array<CEntity>

    W3TargetingManagementComponent:
      .extends: CSelfUpdatingComponent
      .adds:
        aimVector: Vector
        iconOffset: Vector
        aimVectorSlot: name
        iconOffsetSlot: name
        updatePosition: bool
        updateDelay: float
        m_LastUpdate: float

    W3ForceAttackArea:
      .extends: CEntity
      .adds:
        forceAttackEvenWithDisplayTarget: bool

    W3WindEffectOnGroundComponent:
      .extends: CSelfUpdatingComponent
      .adds:
        maxDistanceFromGround: float
        activeAtStart: bool
        playOnAnimEvent: bool
        activateOnAnimEvent: bool
        animEvent: name
        deactivateAnimEvent: name
        delayBetweenEffects: float
        effectTemplate: CEntityTemplate
        m_isActive: bool
        m_effectEntity: CEntity
        m_collisionGroupNames: array<name>
        m_delayUntilNextEffect: float

    W3FoodComponent:
      .extends: W3ScentComponent
      .adds:
        maxEater: int
        distanceToEat: float
        startAngleToEat: float
        arcWidthToEat: float
        m_Eaters: array<CActor>
        m_LockDistance: float
        m_EatSlots: array<Vector>
        m_LastTimeEaten: float

    W3ScentComponent:
      .extends: CR4Component
      .adds:
        foodGroup: EFoodGroup
        attractionRange: float
        deadAttractionRange: float
        bleedingAttractionRange: float

    W3ApplyEffectPhantomComponent:
      .extends: CPhantomComponent
      .adds:
        effectToApply: EEffectType
        effectDuration: float
        requiredAbilities: array<name>
        onlyWhenAlive: bool
        onlyToHostiles: bool
        onlyToTag: name
        ignoreIfHasEffect: bool
        useCustomValue: bool
        customValue: SAbilityAttributeValue
        forcedDamage: float
        minRelativeSpeed: float
        decreasePlayerDmgBy: float
        playFXonCollisionEnter: CName
        stopFXonCollisionExit: bool
        objectAttached: bool

    W3FireAuraManagerComponent:
      .extends: CR4Component
      .adds:
        fireAuraEffect: name
        m_PostFxOnGroundCmp: W3PostFXOnGroundComponent

    W3ExplorationObject:
      .extends: CEntity

    W3LadderInteraction:
      .extends: CGameplayEntity
      .adds:
        associatedDoorTag: name
        associatedDoor: W3NewDoor

    CExplorationClimbOracle:
      .extends: none
      .adds:
        m_ExplorationO: CExplorationStateManager
        probeTop: CClimbProbe
        probeBottom: CClimbProbe
        distForwardToCheck: float
        characterRadius: float
        characterHeight: float
        radiusToCheck: float
        bottomCheckAllowed: bool
        topIsPriority: bool
        probeBeingUsed: EClimbProbeUsed
        debugLogFails: bool
        vectorUp: Vector

    CExplorationCollisionManager:
      .extends: none
      .adds:
        m_ExplorationO: CExplorationStateManager
        m_CollideWithNPCEventCenter: name
        m_CollideWithNPCEventLeft: name
        m_CollideWithNPCEventRight: name
        m_CollideNameS: name
        m_CollideBehGraphSideNameS: name
        m_CollideBehGraphStanceNameS: name
        m_CollideAngleNameS: name
        m_CollideBehGraphStrengthRelNameS: name
        m_CollideBehGraphHeightN: name
        m_CanCollideWithStaticaB: bool
        m_VisualReactionToPushB: bool
        m_SpeedToCollideWihNPCsF: float
        m_TimeCollidingToStopF: float
        m_TimeCollidingCurF: float
        m_AcceptableZToBumpF: float
        playerHandHeightRange: float
        m_LandWaterMinDepthF: float
        m_CollisionGroupsNamesNArr: array<name>
        m_CollisionSightNArr: array<name>
        m_CollisionObstaclesNArr: array<name>
        m_CollidingB: bool
        m_IsThereAnyCollisionB: bool
        m_CollidingWithNpcB: bool
        m_CollidingWithStaticsB: bool
        m_AngleToSideF: float
        m_CollidingAngleF: float
        m_CollideCenterIfBothSidesB: bool
        m_CollidingSideE: ESideSelected
        m_CollidingSideLastE: ESideSelected
        m_CollidingSideCooldownF: float
        forceFallEnabled: bool
        forceFallRequireCenter: bool
        forceFallRunning: bool
        m_CollidingStrengthOtherF: float
        m_CollidingStrengthRelativeF: float
        m_CollidingDirOtherV: Vector
        m_CollidingSpeedOtherV: Vector
        m_CollidingStrengthFadeSpeedF: float
        m_CollidingIsLowB: bool
        m_CollidingLowMinHeightF: float
        debugEnabled: bool
        m_UpV: Vector
        m_ZeroV: Vector
        lastWaterCheckPoint: Vector

    CExplorationInput:
      .extends: none
      .adds:
        m_ExplorationO: CExplorationStateManager
        m_InputMoveOnPadV: Vector
        m_InputMoveOnPlaneV: Vector
        m_InputMoveOnPadNormalizedV: Vector
        m_InputMoveOnPlaneNormalizedV: Vector
        m_InputMoveOnCameraNormalizedV: Vector
        m_InputMoveDiffOnHeadingF: float
        m_InputMoveHeadingOnPlaneF: float
        m_InputModuleF: float
        m_InputMinModuleF: float
        m_InputRunModuleF: float
        m_InputHeadingDifMaxF: float
        m_InputHeadingDifReflectedF: float
        m_JumpTimeGapF: float
        m_RollTimePrevF: float
        m_InputDoubleTapPressValF: float
        m_InputDoubleTapUnPressValF: float
        m_InputDoubleTapTimeGapF: float
        m_UseDoubleTapOnAxisB: bool
        m_InputLeftO: CInputAxisDoubleTap
        m_InputRightO: CInputAxisDoubleTap
        m_InputDownO: CInputAxisDoubleTap
        m_InputUpO: CInputAxisDoubleTap
        m_SprintDoubletapO: CInputAxisDoubleTap
        m_ActionJumpN: name
        m_ActionExplorationN: name
        m_ActionInteractionN: name
        m_ActionRollN: name
        m_ActionSprintN: name
        m_ActionSkateJumpN: name
        m_ActionDashN: name
        m_ActionDriftN: name
        m_ActionAttackN: name
        m_ActionAttackAltN: name
        m_ActionParryN: name
        m_SprintLastActivationTimeF: float

    CExplorationInterceptorStateAbstract:
      .extends: CExplorationStateTransitionAbstract
      .adds:
        m_InterceptStateN: name

    CExplorationMovementCorrector:
      .extends: none
      .adds:
        m_ExplorationO: CExplorationStateManager
        correctionNone: NavigationCorrection
        correctionOnCollision: NavigationCorrection
        correctionOnPhysics: NavigationCorrection
        correctionOnPush: NavigationCorrection
        correctionOnNavMesh: NavigationCorrection
        correctionOnExploration: NavigationCorrection
        correctionOnDoors: NavigationCorrection
        correctionOnFalling: NavigationCorrection
        correctionAccepted: NavigationCorrection
        validExploration: SExplorationQueryToken
        checkingForRun: bool
        checkingForCombat: bool
        inputDiference: float
        pushSlowingTimeCooldown: float
        pushSlowingTimeCur: float
        maxPushAngleSlow: float
        maxPushAngleTurn: float
        pushCooldownTotal: float
        pushCooldownCur: float
        pushDirection: Vector
        collisionStopped: bool
        enableCollisionWalking: bool
        enableCollisionRunning: bool
        enablePushCombat: bool
        enablePushWhileMoving: bool
        enablePhysicsWalking: bool
        enablePhysicsRunning: bool
        enableNavMeshWalking: bool
        enableNavMeshRunning: bool
        enableExplorationWalking: bool
        enableExplorationRunning: bool
        enableDoorsWalking: bool
        enableDoorsRunning: bool
        limitCorrectionTurningSide: bool
        inputDifToSide: float
        maxPhysicSideDistance: float
        maxPhysicPortalDistance: float
        maxPhysicDistanceWalk: float
        maxPhysicDistanceRun: float
        maxPhysicAngleWalk: float
        maxPhysicAngleRun: float
        maxNavmeshDistanceWalk: float
        maxNavmeshDistanceRun: float
        maxNavmeshAngleWalk: float
        maxNavmeshAngleRun: float
        maxExplorationDistanceWalk: float
        maxExplorationDistanceRun: float
        maxExplorationAngleWalk: float
        maxExplorationAngleRun: float
        maxDoorDistanceWalk: float
        maxDoorDistanceRun: float
        maxDoorAngleWalk: float
        maxDoorAngleRun: float
        maxDoorAngleGather: float
        maxDoorBack: float
        maxDoorHeight: float
        turnAdjustBlocked: bool
        animEventBlockTurnAdjust: name
        turnAdjustmentEnabled: bool
        turnAdjustmentTimeCur: float
        turnAdjustmentTimeMax: float
        inputLastModule: float
        inputSpeedLast: float
        inputSpeedToStartRun: float
        inputSpeedToStartRunHiFPS: float
        cameraRequestByDoor: bool
        doorPoint: Vector
        auxDiff: float
        debugPush: bool
        debugingSpeed: bool
        disallowRotWhenGoingToSleep: bool

    NavigationCorrection:
      .extends: none
      .adds:
        corrected: bool
        direction: Vector
        angle: float
        type: EMovementCorrectionType
        color: Color

    CExplorationMover:
      .extends: none
      .adds:
        m_ExplorationO: CExplorationStateManager
        m_InputO: CExplorationInput
        m_WorldPositionV: Vector
        m_DisplacementLastFrameV: Vector
        m_PlaneMovementParamsS: SPlaneMovementParameters
        m_VerticalMovementParamsS: SVerticalMovementParams
        m_SlidingParamsS: SSlidingMovementParams
        m_SkatingParamsS: SSkatingMovementParams
        m_SkatingLevelParamsS: SSkatingLevelParams
        m_SkatingTurnPerSpeedF: float
        m_SkatingSpeedTotalMaxF: float
        m_SkatingTurnPerSpeedCurF: float
        m_SkatingTurnPerSpeedBlendF: float
        m_SlidingFrictionBlendedF: float
        m_SkateTurnDecelCoefF: float
        m_SkateTurnBrakeCoefF: float
        m_VelocityV: Vector
        m_VelocityNormalizedV: Vector
        m_SpeedF: float
        m_SpeedHeadingF: float
        m_SpeedVerticalF: float
        m_DisplacementV: Vector
        m_RotationDeltaEA: EulerAngles
        m_SpeedLastF: float
        m_AccelerationLastF: float
        m_SlideMaxSpeedSafeF: float
        m_SlideMaxSpeedToFallF: float
        m_SlideMaxSpeedF: float
        m_UseMaterialsB: bool
        m_SlidingLimitMinF: float
        m_SlidingLimitMaxF: float
        m_MaterialFrictionMultF: float
        m_CoefMinMaterialF: float
        m_SlideNormalRealV: Vector
        m_SlideNormalV: Vector
        m_SlideDirV: Vector
        m_SlideRealangleF: float
        m_SlideComputedThisFrameB: bool
        m_SlideWideComputedThisFrameB: bool
        m_SlideWideCoefGlobalF: float
        m_WideNormalAverageV: Vector
        m_WideNormalGlobalV: Vector
        m_SlideWideCoefAverageF: float
        m_SlideWideCoefRealGlobalF: float
        m_SlideWideCoefRealAverageF: float
        m_SlideTerrainWideDistFwdF: float
        m_SlideTerrainWideDistBwdF: float
        m_SlideTerrainWideDistHorizF: float
        gravityCurve: CCurve
        superSlide: bool
        m_TurnThisFrameF: float
        m_BankingNeedsUpdatingB: bool
        m_BankingTargetF: float
        m_BankingSpeedF: float
        m_BankingSpeedDefaultF: float
        m_OrientToInputMaxHeadingF: float
        m_MACVelocityDampedV: Vector
        m_MACVelocityDamSpeedF: float
        m_CustomIsAnimatedB: bool
        m_BoneRightFootN: name
        m_BoneLeftFootN: name
        m_BoneIndexRightFootI: int
        m_BoneIndexLeftFootI: int
        m_UpV: Vector
        m_ZeroV: Vector

    CExplorationSharedData:
      .extends: CObject
      .adds:
        m_ExplorationO: CExplorationStateManager
        m_AutoJumpOnPredictionB: bool
        m_AutoJumpToWaterB: bool
        m_TimeSinceIdleF: float
        m_SprintJumpTimePreparingF: float
        m_BehParamRightFootS: name
        m_IsRightFootForwardB: bool
        m_JumpTypeE: EJumpType
        m_LandingOnWater: bool
        m_JumpIsTooSoonToLandB: bool
        m_FallHeightReachedF: float
        m_UsePantherJumpB: bool
        m_AirCollisionIsFrontal: bool
        m_JumpDirectionForcedV: Vector
        m_CanFallSetVelocityB: bool
        m_ShouldFlipFootOnLandB: bool
        m_DontRecalcFootOnLandB: bool
        m_FromCriticalB: bool
        m_ClimbStateTypeE: EClimbRequirementType
        m_AirCollisionSideEnabledB: bool
        m_SkipLandAnimDistMaxF: float
        m_SkipLandAnimTimeMaxF: float
        m_SkateGlobalC: CExplorationSkatingGlobal
        m_LastExplorationS: SExplorationQueryToken
        m_LastExplorationValidB: bool
        m_AngleToExploreManualF: float
        m_AngleToExploreAutoF: float
        hasToRecoverFromRagdoll: bool
        m_TeleportTimeCurF: float
        m_TeleportTimeMaxF: float
        terrainSlidePresetName: name
        terrainBlendSpeedCur: float
        terrainBlendSpeedTarget: float
        terrainBlendTimeCur: float
        terrainBlendTimeMax: float
        m_JumpSwimRotationF: float
        m_JumpToWaterAreaB: bool
        m_JumpToWaterForcedDirV: Vector
        m_JumpToWaterRequireDirB: bool
        m_JumpToWaterRequireSprintB: bool
        m_HeightFallenF: float
        lastPosition: Vector
        landAddAdding: bool
        landAddCurrent: float
        landAddCurve: CCurve
        landAddCoef: float
        landAddCoefWalk: float
        landAddTimeCoefWalk: float
        landAddTimeCur: float
        landAddSpeedCancel: float
        landAddTimeCoef: float
        landAddTimeCoefFast: float
        landAddBehVarName: name
        m_CameraModifyOffsetB: bool
        m_UsePrototypeAnimationsB: bool
        m_ForceOnlyJumpB: bool
        m_UseClimbB: bool
        m_UsepushB: bool
        hackKnockBackAlways: bool

    CExplorationStateAbstract:
      .extends: CScriptedComponent
      .adds:
        m_StateNameN: name
        m_StateTypeE: EExplorationStateType
        m_UpdatesWhileInactiveB: bool
        m_ExplorationO: CExplorationStateManager
        m_LockedB: bool
        m_ActiveB: bool
        m_StateNextN: name
        m_DefaultStateChangesArr: array<SDefaultStateTransition>
        m_BehaviorNeedsConfirmB: bool
        m_BehaviorEventB: bool
        m_BehaviorEventEachFrameB: bool
        m_BehaviorEventN: name
        m_StateDefaultExitToN: name
        m_CanReactToCriticalStateB: bool
        m_ChangeCamerasB: bool
        m_CameraKeepOldB: bool
        m_CameraSetS: CCameraParametersSet
        m_InputContextE: EGameplayContextInput
        m_TurnAdjustTimeF: float
        m_ActionsToBlockEArr: array<EInputActionBlock>
        m_ActionsToBlockCountI: int
        m_HolsterIsFastB: bool
        m_CanSaveB: bool

    CExplorationStateManager:
      .extends: CSelfUpdatingComponent
      .adds:
        m_OwnerE: CGameplayEntity
        m_OwnerMAC: CMovingPhysicalAgentComponent
        m_InputO: CExplorationInput
        m_MoverO: CExplorationMover
        m_SharedDataO: CExplorationSharedData
        m_CollisionManagerO: CExplorationCollisionManager
        m_MovementCorrectorO: CExplorationMovementCorrector
        m_SuperStateLastN: name
        m_StatesSArr: array<CExplorationStateAbstract>
        m_StatesUpdatedInactiveSArr: array<CExplorationStateAbstract>
        m_StateNamesSArr: array<name>
        m_StateTransitionsSArr: array<CExplorationStateTransitionAbstract>
        m_StateLastN: name
        m_StateLastI: int
        m_StateCurN: name
        m_StateCurI: int
        m_StateTimeCurF: float
        m_StateTimeLastF: float
        m_StateGlobalQueuedN: name
        m_StateDefaultN: name
        c_InvalidStateN: name
        c_InvalidStateI: int
        m_StateChanged: bool
        m_StateExitedFromBehN: name
        m_StateEnteredFromBehN: name
        m_BehaviorConfirmStateE: EBehGraphConfirmationState
        m_StateBehCurReportedN: name
        m_DefaultCameraSetS: CCameraParametersSet
        m_IsOnGroundB: bool
        m_TeleportedFallHackTime: float
        m_TeleportedFallHackTimeTotalF: float
        m_storedInteractionPri: EInteractionPriority
        m_NoSaveLock: int
        m_NoSaveLockStringS: String
        m_ActiveB: bool
        m_InitializedB: bool
        m_IsDebugModeB: bool
        m_DebugPointV: Vector
        m_SmoothedVelocityV: Vector

    CExplorationStateTransitionAbstract:
      .extends: CExplorationStateAbstract
      .adds:
        m_TransitionOriginStateN: name
        m_TransitionEndStateN: name

    CClimbProbe:
      .extends: none
      .adds:
        valid: bool
        setupReady: bool
        exploratorPosition: Vector
        directionChecking: Vector
        directionRequiresInput: bool
        distForwardToCheck: float
        distanceCheckType: EClimbDistanceType
        distForwardToCheckClose: float
        distForwardToCheckMedium: float
        maxAttempts: int
        distForwardToCheckLong: float
        characterRadius: float
        heightTotalMin: float
        heightTotalMax: float
        ceilingDoubleCheck: bool
        ceilingCheckingClose: bool
        ceilingBackOffsetClose: float
        ceilingBackOffsetFar: float
        ceilingHeightNeeded: float
        ceilingRadius: float
        ceilingFound: bool
        ceilingPoint: Vector
        ceilingHeightFree: float
        ceilingCheckFrom: Vector
        ceilingCheckTo: Vector
        groundRadiusToCheck: float
        groundNormalMinZ: float
        groundFound: bool
        groundEndPoint: Vector
        groundEndNormal: Vector
        heightTarget: float
        heightAdded: float
        groundCheckFrom: Vector
        groundCheckTo: Vector
        groundRefineEnabled: bool
        groundRefineDistCheck: float
        groundRefineHeightCheck: float
        groundRefineRadius: float
        groundRefined: bool
        climbableFound: bool
        climbableObjName: string
        climbableObjTagOnLayer: bool
        climbableObjForceAllow: bool
        climbablePoint: Vector
        climbableRadius: float
        climbableLockTag: name
        climbableUnLockTag: name
        holeForwardNeeded: float
        holeIsBlocked: bool
        holeCollision: Vector
        holeCheckFrom: Vector
        holeCheckTo: Vector
        wallRadiusToCheck: float
        wallNormalCheckBackExtra: float
        wallSideSeparation: float
        wallFound: bool
        wallNormalOrigin: Vector
        wallNormalDirection: Vector
        wallCheckFromL: Vector
        wallCheckToL: Vector
        wallCheckFromR: Vector
        wallCheckToR: Vector
        wallCollL: Vector
        wallCollR: Vector
        slopeAngleMax: float
        slopeNormalZMax: float
        slopeForwardDistance: float
        slopeLeftDistance: float
        horizHeightRdius: float
        horizHeightSeparation: float
        horizHeightAngleMin: float
        horizHeightAngleMax: float
        horizFoundLeft: bool
        horizFoundRight: bool
        horizHeightAngleCur: float
        horizPointLeft: Vector
        horizPointRight: Vector
        horizCorrectSideCoef: float
        vertSlopeAngleOffset: float
        vertSlopeAngleMax: float
        vertSlopeAngleCur: float
        vertSlopeAngleFrom: Vector
        vertSlopeAngleTo: Vector
        vertSlopeAnglePoint: Vector
        vertSlopeAngleLowOffset: float
        vertSlopeLowAngleMax: float
        vertSlopeLowAngleCur: float
        vertSlopeLowAngleFrom: Vector
        vertSlopeLowAngleTo: Vector
        vertSlopeLowAnglePoint: Vector
        vertFreeHeightEnable: bool
        vertFreeHorOffset: float
        vertFreeHorMin: float
        vertFreeHeightMin: float
        vertFreeHeightGrndMax: float
        vertFreeHeightCur: float
        vertFreeFrom: Vector
        vertFreeTo: Vector
        vertFreeCollPoint: Vector
        vaultHeight: float
        vaultHeightOffset: float
        vaultDistance: float
        vaultRadius: float
        heightOffsetToEndFall: float
        heighAbsToEndFall: float
        vaultingFound: EClimbRequirementVault
        vaultCollision: Vector
        vaultEndsFalling: bool
        vaultCheckFrom: Vector
        vaultCheckTo: Vector
        platformFound: EClimbRequirementPlatform
        platformFrom: Vector
        platformTo: Vector
        platformCollision: Vector
        platformHeightDown: float
        platformRadius: float
        platformDeep: float
        platformMinToCheck: float
        collisionClimbableNames: array<name>
        collisionObstaclesNames: array<name>
        collisionForceAllowNames: array<name>
        collisionLockNames: array<name>
        debugPrefix: string
        debugIsTop: string
        debugColorDiv: int
        debugLogFails: bool
        onlyDebugPoint: Vector
        debugLastErrorMessage: string
        debugLastErrorPosition: Vector
        debugDrawGraphics: bool
        debugCeiling: bool
        debugGround: bool
        debugWall: bool
        debugHole: bool
        debugVault: bool
        debugVertSlope: bool
        debugVertFree: bool
        debugHorSlope: bool
        debugPlatform: bool
        vectorUp: Vector
        vectorZero: Vector

    CExplorationStateAirCollision:
      .extends: CExplorationStateAbstract
      .adds:
        enabled: bool
        speedMinToCollide: float
        heightMinToCollide: float
        heightMaxToStop: float
        dotToHardHit: float
        collisionAngle: float
        collisionSide: EAirCollisionSide
        m_NormalMaxZToHitF: float
        angleMinToCollide: float
        angleMinToCollideFront: float
        swipeDistance: float
        swipeRadius: float
        swipeHeightRequired: float
        timeStopped: float
        timeToRotate: float
        timeToCheckClimb: float
        timeToCheckLand: float
        exitAngleLeft: float
        exitAngleRight: float
        exitAngleExtra: float
        orientingSpeed: float
        targetYaw: float
        verticalSpeedConserveCoef: float
        verticalMovementParams: SVerticalMovementParams
        impulseForwardCenter: float
        impulseDownCenter: float
        impulseForwardSide: float
        impulseDownSide: float
        interactAlways: bool
        interactionTimeMin: float
        interactionMaxHeight: float
        timeToHitToLand: float
        behEventHitToLand: name
        behVarSide: name
        behVarHands: name
        behAnimCanFall: name

    CExplorationStateClimb:
      .extends: CExplorationStateAbstract
      .adds:
        m_ClimbOracleO: CExplorationClimbOracle
        enabled: bool
        climbTypes: array<CClimbType>
        climbCur: CClimbType
        heightMaxToRun: float
        platformHeightMinAir: float
        platformHeightMin: float
        climbPoint: Vector
        wallNormal: Vector
        heightTarget: float
        vaultingFound: EClimbRequirementVault
        platformFound: EClimbRequirementPlatform
        curPlayerStateType: EClimbRequirementType
        vaultEndsFalling: bool
        ended: bool
        canWalk: bool
        canRun: bool
        canFall: bool
        animDurationLimit: float
        slideDistMaxOnRun: float
        autoClimb: bool
        autoClimbOnAir: bool
        inputAngleToEnter: float
        inputAngleToRun: float
        inputAttemptsTop: bool
        inputDirection: Vector
        inputAirHold: bool
        inputAirTimeGap: bool
        inputTimeGapCheck: float
        characterRadius: float
        adjustInitiallRotat: float
        adjustRotation: float
        adjustTranslation: Vector
        adjustInitialRotDone: bool
        adjustRotDone: bool
        adjustTransDone: bool
        adjustSpeedMax: float
        adjustSpeedRequire: bool
        adjustSpeedEndTime: float
        adjust2Dduration: float
        adjust2Speed: float
        adjust2Translation: Vector
        heightToAdd: float
        pelvisTransMax: float
        pelvisTransAllow: bool
        pelvisTransState: EOutsideCapsuleState
        pelvisTranslationN: name
        pelvisTransCur: float
        pelvisTransTarget: float
        pelvisTransSpeed: float
        pelvisTransSpeedOut: float
        behAnimAdjustInitRot: name
        behAnimAdjustRot: name
        behAnimAdjustTrans: name
        behAnimEnded: name
        behAnimCanWalk: name
        behAnimCanRun: name
        behAnimCanFall: name
        behEnableIK: name
        behDisablePelvisTrans: name
        behEnableHandsIK: name
        behEnableHandLIK: name
        behEnableHandRIK: name
        behDisableHandsIK: name
        behDisableHandLIK: name
        behDisableHandRIK: name
        behHeightTypeEnum: name
        behVaultTypeEnum: name
        behPlatformTypeEnum: name
        behStateTypeEnum: name
        behGoToRun: name
        behGoToWalk: name
        behToRun: name
        behVarEnd: name
        behAnimSpeed: name
        continousHandIK: bool
        handIKMinDistToEnable: float
        handIKMaxDist: float
        handIKForwardOffset: float
        handIKHalfMaxHeight: float
        handIKBlendSpeedIn: float
        handIKBlendSpeedOut: float
        handThickness: float
        boneRightHand: name
        boneLeftHand: name
        boneIndexRightHand: int
        boneIndexLeftHand: int
        rightHandOffset: float
        leftHandOffset: float
        rightHandOffsetCur: float
        leftHandOffsetCur: float
        handIKEnabled: bool
        handIKEnabledLeft: bool
        handIKEnabledRight: bool
        handIKqueuedL: bool
        handIKqueuedR: bool
        handIKLRayOrigin: Vector
        handIKLRayEnd: Vector
        handIKLRayCollision: Vector
        handIKRRayOrigin: Vector
        handIKRRayEnd: Vector
        handIKRRayCollision: Vector
        collisionObstaclesNames: array<name>
        cameraSetVault: CCameraParametersSet
        cameraSetJump: CCameraParametersSet
        updateCameraManual: bool
        updateCameraAnim: bool
        camOriginalPosition: Vector
        camOriginalRotation: EulerAngles
        camCurRotation: EulerAngles
        camOriginalOffset: Vector
        camStart: bool
        camFollowBoneID: int
        camFollowBoneName: name
        vectorUp: Vector
        forceAirCollision: bool
        forceJumpGrab: bool
        noAdjustor: bool
        noPelvisCorection: bool
        restoreUsableItemLAtEnd: bool

    CExplorationStateCombat:
      .extends: CExplorationStateAbstract
      .adds:
        m_TimeToSlideNeededF: float
        m_TimeToSlideCurF: float
        m_FallHasToWaitForCombatAction: bool
        m_SlideHasToWaitForCombatAction: bool
        m_FallHorizontalImpulseCancelF: float
        m_FallHorizontalImpulseF: float
        m_FallExtraVerticalImpulseF: float
        m_TurnAdjustTimeSprintF: float

    CExplorationStateIdle:
      .extends: CExplorationStateAbstract
      .adds:
        m_SubStateLasE: EPlayerIdleSubstate
        m_SubStateE: EPlayerIdleSubstate
        m_SpeedMaxConsideredSprintF: float
        m_SpeedMaxConsideredRunF: float
        m_SpeedMaxConsideredWalkF: float
        m_FallSpeedCoefF: float
        m_FallExtraVerticalImpulseF: float
        m_FallHorizontalImpulseF: float
        m_FallHorizontalImpulseCancelF: float
        m_TimeToSlideNeededF: float
        m_TimeToSlideCurF: float
        m_CameraExtraOffsetF: float
        m_CameraOffsetExtraVertLowF: float
        m_CameraOffsetExtraVertHighF: float
        m_CameraOffsetBlend: float
        m_CameraOffsetVertF: float
        m_CurentCameraAnimationN: name
        m_CameraAnimIdleS: SCameraAnimationData
        m_CameraAnimWalkS: SCameraAnimationData
        m_CameraAnimRunS: SCameraAnimationData
        m_CameraAnimSprintS: SCameraAnimationData

    CExplorationStateIdleJump:
      .extends: CExplorationStateTransitionAbstract
      .adds:
        behEnded: name
        enabled: bool

    CExplorationStateInteraction:
      .extends: CExplorationStateAbstract
      .adds:
        explorationType: ExplorationInteractionType
        autointeract: bool
        safetyTimeToExit: float
        useAutomaticExploration: bool
        allowOnDiving: bool
        timeBeforeExploring: float
        ladderCheckSides: bool
        ladderImpulseBack: float
        ladderRangeFreeOfNPCs: float
        cameraSetClimb: CCameraParametersSet
        cameraOffsetBack: float
        cameraOffsetUp: float
        cameraPichInput: float
        cameraBlendSpeedTrans: float
        cameraBlendSpeedYaw: float
        cameraBlendSpeedPitch: float
        camPosOriginal: Vector
        camInitialized: bool
        cachedWeapon: EPlayerWeapon
        restoreUsableItemLAtEnd: bool

    CExplorationStateInvalid:
      .extends: CExplorationStateAbstract

    CExplorationStateJump:
      .extends: CExplorationStateAbstract
      .adds:
        jumpEnabled: bool
        m_SubstateE: EJumpSubState
        m_OrientationInitialF: float
        m_MaxHeightReachedF: float
        m_SlopeAngleMaxToJump: float
        m_UseGenericJumpB: bool
        m_AllowSprintJumpB: bool
        m_JumpParmsS: SJumpParams
        m_JumpParmsGenericS: SJumpParams
        m_JumpParmsIdleS: SJumpParams
        m_JumpParmsIdleToWalkS: SJumpParams
        m_JumpParmsWalkS: SJumpParams
        m_JumpParmsWalkHighS: SJumpParams
        m_JumpParmsRunS: SJumpParams
        m_JumpParmsSprintS: SJumpParams
        m_JumpParmsFallS: SJumpParams
        m_JumpParmsHitS: SJumpParams
        m_JumpParmsSlideS: SJumpParams
        m_JumpParmsVaultS: SJumpParams
        m_JumpParmsToWaterS: SJumpParams
        m_JumpParmsKnockBackS: SJumpParams
        m_JumpParmsKnockBackFallS: SJumpParams
        m_JumpParmsSkateIdleS: SJumpParams
        m_SprintJumpNeedsStaminaB: bool
        m_SprintJumpTimeExtraF: float
        m_SprintJumpTimeGapF: float
        m_ConserveHorizontalCoefF: float
        m_ConserveVertUpCoefF: float
        m_ConserveVertDownCoefF: float
        m_ConserveHorizontalMaxF: float
        m_ConserveVertUpMaxF: float
        m_ConserveVertDownMaxF: float
        m_SpeedSqrMinToConserveF: float
        m_ReactToHitCeilingB: bool
        m_HitCeilingB: bool
        m_BehEventPredictLandN: name
        m_BehListenInertialJumpN: name
        m_BehListenFinishTakeOffN: name
        m_BehParamJumpTypeN: name
        m_BehEventPredictingS: name
        m_BehEventPredictTypeS: name
        m_BehParamIsHandledByAnimS: name
        m_BehParamWalkOrSprintS: name
        m_BehParamNormalLandS: name
        m_BehEventCeilingHit: name
        m_InteractAlwaysB: bool
        m_InteractTimeMinFallF: float
        m_InteractTimeMinF: float
        m_InteractTimeMinVaultF: float
        m_InteractHeightFallMaxF: float
        m_InteractTimeAdjustingF: float
        m_InteractDistanceExtraF: float
        m_InteractSpeedDiffAllowedF: float
        m_InteractOwnerOffsetV: Vector
        m_LockingJumpOnInteractionAreaB: bool
        m_LockingJumpOnHorseAreaB: bool
        m_AllowJumpInSlopesB: bool
        m_FallDistToUseHelpF: float
        m_FallRecoverMaxHeightUpF: float
        m_FallRecoverMaxHeightDownF: float
        m_FallRecoverMaxDistF: float
        m_CanSetVelocityB: bool
        m_ForceIdleJumpOnColliisonB: bool
        m_ForceIdleJumpHeightFreeF: float
        m_ForceIdleJumpDistFreeF: float
        m_InteractionLastLockingF: float
        m_LandPredictedB: bool
        m_LandGroundPredictB: bool
        m_LandWaterPredictB: bool
        m_LandPredictTimeMin: float
        m_LandPredictionTimeF: float
        m_CollisionGroupsNamesNArr: array<name>
        m_LandPredicedTypeE: ELandPredictionType
        m_LandPredicedCoefF: float
        m_LandPredicedBlendF: float
        m_SlopedLandZF: float
        m_JumpOriginalPositionV: Vector
        m_CameraDebugB: bool
        m_CameraStartB: bool
        m_CameraPositionV: Vector
        m_CameraRotationEA: EulerAngles
        m_CameraTimeToEndF: float
        cameraRoationName: name
        cameraToFallHeightNeed: float
        cameraFallIsSet: bool
        m_CollideBehGraphSideNameS: name
        m_CollidingSideE: ESideSelected
        m_CooldownTotalF: float
        m_CooldownCurF: float
        useWalkJump: bool
        useIdleWalkJump: bool
        useHighJump: bool
        jumpingOnIdleIsForward: bool
        jumpIdleWhenObstructed: bool

    CExplorationStateLand:
      .extends: CExplorationStateAbstract
      .adds:
        m_BehLandRunS: name
        m_LandRunInputAngleF: float
        m_BehLandTypeS: name
        m_BehLandCancelN: name
        m_BehLandCanEndN: name
        m_BehLandSkipToRunN: name
        m_BehLandSkipToWalkN: name
        m_BehLandSkipToIdleN: name
        m_BehLandFallForwardN: name
        m_HeightToLandCrouch: float
        m_LandTypeE: ELandType
        m_LandDataIdle: SLandData
        m_LandDataWalk: SLandData
        m_LandDataWalkHigh: SLandData
        m_LandDataRun: SLandData
        m_LandDataSprint: SLandData
        m_LandDataHigher: SLandData
        m_LandDataAirCollision: SLandData
        m_LandDataCrouch: SLandData
        m_LandDataFall: SLandData
        m_LandDataDamage: SLandData
        m_LandDataDeath: SLandData
        m_LandDataKnockBack: SLandData
        m_LandData: SLandData
        m_UseBendAddOnLand: bool
        m_AutoRollB: bool
        m_AutoSlopeAngleB: float
        m_AutoRollSlopeCoefF: float
        m_DamageOverridesRollB: bool
        m_RollingB: bool
        m_RollIsSlopeB: bool
        m_RollMinHeightF: float
        m_RollTimeAfterF: float
        m_RollMinJumpTotalF: float
        m_SlidingB: bool
        m_SlideCheckedSecondFrameB: bool
        m_SlideSavingVelocityV: Vector
        m_AllowHigherJumpB: bool
        m_HighLandingHeightF: float
        m_AllowSkipB: bool
        m_RunCoefF: float
        m_FallIsForwardB: bool
        m_ToFallB: bool
        m_ReadyToEndB: bool

    CExplorationStatePrepareJump:
      .extends: CExplorationStateAbstract
      .adds:
        m_JumpIsInstantB: bool
        m_JumpTimeGapF: float
        m_EndingTimeF: float
        m_EndEventNameN: name
        m_EndedEventNameN: name
        m_TimeEndedB: bool

    CExplorationStatePushed:
      .extends: CExplorationStateAbstract
      .adds:
        enabled: bool
        pushDirection: Vector
        pushDirectionOther: Vector
        pushSide: EPushSide
        pushAngle: float
        extraTurnAngle: float
        behCanEnd: name
        behSide: name
        safetyEndTimeMax: float
        safetyEndTimeCur: float
        recheckTimeMin: float
        recheckTimeCur: float
        ticket: SMovementAdjustmentRequestTicket
        rotatedToCollider: bool
        movedLeft: bool

    CExplorationStateRagdoll:
      .extends: CExplorationStateAbstract
      .adds:
        lastPos: Vector

    CExplorationStateRoll:
      .extends: CExplorationStateAbstract
      .adds:
        m_TimeSafetyEndF: float
        m_OrientationSpeedF: float
        m_AutoRollB: bool
        m_RollMinHeightF: float
        m_RollTimeAfterF: float
        m_ReadyToEndB: bool
        m_ReadyToFallB: bool
        m_BehLandRunS: name
        m_BehLandCancelN: name
        m_BehLandCanEndN: name
        m_BehLandCanFallN: name
        m_SlidingB: bool
        m_SlideTimeToDecideF: float
        m_ToFallB: bool
        verticalMovementParams: SVerticalMovementParams
        m_ToSlideB: bool
        m_TimeBeforeChainJumpF: float

    CExplorationStateSlide:
      .extends: CExplorationStateAbstract
      .adds:
        subState: ESlidingSubState
        enableWallSlide: bool
        useSmothedCoefOnIdle: bool
        angleMinDefault: float
        anglefMax: float
        coefExtraToStop: float
        slideCoefRelatedToInput: bool
        dotToStartForward: float
        coefToStartBackward: float
        coefToStartCenter: float
        coefToStartForward: float
        useWideTerrainCheckToEnter: bool
        updateMaterials: bool
        materialParams: array<SSlidingMaterialPresetParams>
        materialNamesToPresets: array<SSlidingMaterialNamesToPresets>
        materialParamsDefaultN: name
        materialDefault: int
        materialCurId: int
        materialNameCur: name
        minTimeToIdle: float
        orientingInitial: float
        initialImpulse: float
        startedFromJump: bool
        startedFromRoll: bool
        orientingSpeedMin: float
        orientingSpeedMax: float
        orientingMaxSlope: float
        timeToHardSlide: float
        behGraphEventSlideHard: name
        requireSpeedToExit: bool
        speedToExitForward: float
        speedToExitCenter: float
        speedToExitBackward: float
        exitingTimeMinSoft: float
        exitingTimeCur: float
        exitingTimeTotal: float
        exitingTimeTotalInput: float
        stoppingFriction: bool
        cooldownMax: float
        cooldownCur: float
        landCoolingDown: bool
        landCoolDownTime: float
        fromJumpBehGraphEvent: name
        fromRollBehGraphEvent: name
        jumpAllowed: bool
        jumpCoolDownTime: float
        fallSpeedMaxConsidered: float
        fallSpeedCoef: float
        fallHorizImpulse: float
        fallHorizImpulseCancel: float
        fallExtraVertImpulse: float
        slidingPhysicsSpeed: float
        movementParams: SSlidingMovementParams
        movementStoppingParams: SSlidingMovementParams
        usePhysics: bool
        slideDirectionDamped: Vector
        smoothedDirBlendCoef: float
        slideKills: bool
        m_DeadB: bool
        toFallEnabled: bool
        toFallTimeCur: float
        toConsiderFallTimeTotal: float
        toFallTimeTotal: float
        toFallSlopeCoefMin: float
        toFallSlopeSpeedMin: float
        toFallSlopeCoef: float
        toFallSpeedCoef: float
        toFallRecoverCoef: float
        toFallCameraLevel: int
        cameraShakeState: ESlideCameraShakeState
        cameraAnimName: name
        behTripToDeath: name
        behHeightVar: name
        behInclinationVar: name
        behTurnVar: name
        behAccelVar: name
        behRightFootForwardVar: name
        inclinationBlendSpeed: float
        inclinationStart: float
        turnInclinationMax: float
        turnInclinationBlend: float
        turnInclinationCur: float
        inclinationEnterTimeMax: float
        inclinationEnterTimeCur: float
        inclination: float
        behForwardVar: name
        behSlideRestart: name
        behSlideEnd: name
        behSlideEndRun: name
        behSlideEndIdle: name
        boneToStickName: name
        boneToStickId: int
        animEventHardSliding: name
        lockedOnHardSliding: bool
        particlesEnabled: bool
        particlesName: name
        boneLeftFoot: name
        boneRightFoot: name
        timeToRespawnParticlesCur: float
        timeToRespawnParticlesMax: float

    CExplorationStateSprint:
      .extends: CExplorationStateAbstract

    CExplorationStateStartFalling:
      .extends: CExplorationStateAbstract
      .adds:
        timeToJump: float
        fallCancelled: bool
        fallType: EFallType
        behFallType: name
        cameraFallIsSet: bool
        q704_gravit_shift: bool

    CExplorationStateStepLand:
      .extends: CExplorationStateAbstract
      .adds:
        enabled: bool
        fallCancelled: bool
        ended: bool
        timeSafetyEnd: float
        directionToLand: float
        timeToChainJump: float
        behAnimEnded: name
        behLandRunS: name
        behAnimFall: name

    CExplorationStateTest:
      .extends: CExplorationStateAbstract
      .adds:
        m_TesMovementParamsS: SPlaneMovementParameters

    CExplorationStateSwim:
      .extends: CExplorationStateAbstract
      .adds:
        solveCollisionsForward: bool
        smoothPenetration: bool
        collisionUpOffset: float
        collisionDistance: float
        collisionRadius: float
        collisionPenetrationMax: float
        collisionPenetration: Vector
        smoothSpeed: float
        zeroVec: Vector

    CExplorationStateWallSlide:
      .extends: CExplorationStateSlide
      .adds:
        wallSlideGenericCoef: float

    CxplorationTransitionPrepareToJump:
      .extends: CExplorationStateTransitionAbstract

    CxplorationTransitionSwimToInteract:
      .extends: CExplorationStateTransitionAbstract
      .adds:
        enabled: bool
        transitionReadyToEnd: bool
        timeToTransition: float
        requireAngle: bool
        timeToStopTrying: float
        locomotionSegment: CR4LocomotionSwimToStop
        animEventToBeReady: name

    CxplorationTransitionTurnToJump:
      .extends: CExplorationStateTransitionAbstract
      .adds:
        timeToExit: float
        angleToTrigger: float

    CExplorationSkatingGlobal:
      .extends: CObject
      .adds:
        m_ExplorationO: CExplorationStateManager
        speedLevelCur: int
        speedLevelCapDefault: int
        speedLevelCap: int
        speedLevelTotal: int
        maxSpeedTotal: float
        minSpeedTotal: float
        speedPerLevel: float
        movementParamsLevels: array<SSkatingLevelParams>
        movementLevelsSpeedCurve: CCurve
        movementParams: SSkatingMovementParams
        turnSpeedBase: float
        dashCooldownTotal: float
        dashCooldownCur: float
        speedToBrake: float
        speedToStop: float
        m_TurnF: float
        m_Drifting: bool
        m_DrifIsLeft: bool
        flowComboCur: int
        flowGapTimeCur: float
        flowGapTimeTotal: float
        flowSuccesfullTimeTotal: float
        flowSuccesfullTime: float
        behParamTurnName: name
        behParamAccelName: name
        behParamSpeedName: name
        behParamAttackName: name
        behParamRandAttackName: name
        behParamJumpAttackName: name
        behParamTurnMax: float
        behIncreasedSpeed: name
        behIncreasedFwdSpeed: name
        active: bool

    CExplorationStateSkatingBackwards:
      .extends: CExplorationStateAbstract
      .adds:
        skateGlobal: CExplorationSkatingGlobal
        impulse: float
        impulseSpeedMax: float
        sharpTurn: bool
        sharpTurnTime: float
        sharpTurnSpeed: float
        holdTurnSpeed: float
        chainTimeToDrift: float
        exiting: bool
        timeEndingMax: float
        timeEndingFlow: bool
        timeEndingCur: float
        behDriftRestart: name
        behDriftEnd: name
        behDriftLeftSide: name

    CExplorationStateSkatingDash:
      .extends: CExplorationStateAbstract
      .adds:
        skateGlobal: CExplorationSkatingGlobal
        impulse: float
        timeMax: float
        timeToChainMin: float
        sharpTurnSpeed: float
        holdTurnSpeed: float
        sharpTurn: bool
        sharpTurnTime: float
        behAttackEvent: name
        behLeftFootParam: name
        boneRightFoot: name
        boneLeftFoot: name
        boneIndexRightFoot: int
        boneIndexLeftFoot: int
        behEventEnd: name

    CExplorationStateSkatingDashAttack:
      .extends: CExplorationStateSkatingDash
      .adds:
        attacked: bool
        afterAttackTime: float
        timeToEndCur: float
        behParamAttackName: name
        afterAttackImpulse: float

    CExplorationStateSkatingDashLocked:
      .extends: CExplorationInterceptorStateAbstract
      .adds:
        skateGlobal: CExplorationSkatingGlobal
        target: CEntity
        isInFlow: bool
        targetMaxAngle: float
        targetMaxAngleFlow: float
        reachSideDistance: float
        targetSideDistance: float
        inputAngleInfluence: float
        speed: float
        speedMinMax: float
        impulseMax: float
        impulseMaxFlow: float
        aimSpeed: float
        adjustorTicket: SMovementAdjustmentRequestTicket
        attackDistGap: float
        attackDistGapPerfect: float
        toTargetDistanceInit: float
        toTargetDistance: float
        targetDirLast: Vector
        attacked: bool
        timeTotalMax: float
        timeTotalMaxFlow: float
        timeToChainMin: float
        useTimeScale: bool
        timeScaleSpeed: float
        timeScaled: bool
        afterAttackTime: float
        timeToEndCur: float
        behParamAttackName: name
        afterAttackImpulse: float
        isEnabled: bool

    CExplorationStateSkatingDrift:
      .extends: CExplorationStateAbstract
      .adds:
        skateGlobal: CExplorationSkatingGlobal
        impulse: float
        impulseSpeedMax: float
        sharpTurn: bool
        sharpTurnTime: float
        sharpTurnSpeed: float
        holdTurnSpeed: float
        chainTimeToDrift: float
        exiting: bool
        timeEndingMax: float
        timeEndingFlow: bool
        timeEndingCur: float
        behDriftRestart: name
        behDriftEnd: name
        behDriftLeftSide: name
        sideIsLeft: bool

    CExplorationStateSkatingHitFrontal:
      .extends: CExplorationInterceptorStateAbstract
      .adds:
        skateGlobal: CExplorationSkatingGlobal
        behAnimEnd: name
        timeMax: float
        dotCollToEnter: float

    CExplorationStateSkatingHitLateral:
      .extends: CExplorationStateAbstract
      .adds:
        skateGlobal: CExplorationSkatingGlobal
        behAnimEnd: name
        timeMax: float
        speedMinToEnter: float
        speedReductionPerc: float
        extraAngle: float

    CExplorationStateSkatingIdle:
      .extends: CExplorationStateAbstract
      .adds:
        skateGlobal: CExplorationSkatingGlobal
        turnSpeed: float
        turnStartTolerance: float
        hackCiri: bool
        behEventStart: name
        behEventEnd: name

    CExplorationStateSkateJump:
      .extends: CExplorationStateJump
      .adds:
        skateGlobal: CExplorationSkatingGlobal
        attacked: bool
        attacktimeMin: float
        attackVertSpeedMin: float
        attackVertSpeedImpulse: float

    CExplorationSkateLand:
      .extends: CExplorationStateAbstract
      .adds:
        skateGlobal: CExplorationSkatingGlobal
        behLandCancel: name
        timePrevToChain: float
        timeToChainJump: float
        timeSafetyEnd: float
        actionChained: bool

    CExplorationStateSkatingPrepareJump:
      .extends: CExplorationInterceptorStateAbstract
      .adds:
        skateGlobal: CExplorationSkatingGlobal
        behAnimEnd: name
        timeMax: float
        flowImpulse: float

    CExplorationStateSkatingRun:
      .extends: CExplorationStateAbstract
      .adds:
        skateGlobal: CExplorationSkatingGlobal
        m_Sprinting: bool

    CExplorationStateSkateSlide:
      .extends: CExplorationStateSkatingDrift
      .adds:
        inputRangeToEnter: float
        height: float

    CExplorationStateSkateStopFast:
      .extends: CExplorationStateSkatingDrift
      .adds:
        inputRangeToEnter: float
        duration: float
        speedStopCurve: CCurve

    CollisionTrajectory:
      .extends: CGameplayEntity
      .adds:
        stateManager: CExplorationStateManager
        collisionSegmentsArr: array<CollisionTrajectoryPart>
        firstSegmentCollision: ECollisionTrajectoryPart
        trajectoryStatusLastChecked: ECollisionTrajecoryStatus
        trajecoryExpStatusLastChecked: ECollisionTrajecoryExplorationStatus
        goingToWaterLastState: ECollisionTrajectoryToWaterState
        computedCollisionState: bool
        computedGoingToWater: bool

    CollisionTrajectoryPart:
      .extends: CPhantomComponent
      .adds:
        triggeredCollisions: int
        waterCollisions: int
        ownerTrajectory: CollisionTrajectory
        part: ECollisionTrajectoryPart
        waterUpPosCheckSlotName: name
        waterDownPosCheckSlotName: name

    CDoorMarking:
      .extends: CScriptedComponent
      .adds:
        changeCamera: bool
        calculated: bool
        pointA: Vector
        pointB: Vector
        middlePoint: Vector
        normal: Vector
        checkState: EDoorMarkingState
        initialized: bool

    CDoorMarkingTester:
      .extends: CGameplayEntity
      .adds:
        door: CDoorMarking

    W3NoticeBoard:
      .extends: CR4MapPinEntity
      .adds:
        visited: bool
        addedNotes: array<ErrandDetailsList>
        fluffNotices: array<string>
        entitiesToBeShown: array<name>
        questEntitiesToBeShown: array<name>
        questNonActorEntitiesToBeShown: array<name>
        InteractionSpawnDelayTime: float
        backgroundOverride: string
        factAddedOnDiscovery: name
        noticeboardDisabled: bool
        activeErrands: array<ErrandDetailsList>
        updatingInteraction: bool
        errandPositionName: string
        MAX_DISPLAYED_ERRANDS: int
        lastTimeInteracted: GameTime
        hack_updateTriesLeft: int
        hack_isTryingUpdate: bool
        hack_started: bool
        hack_fromAreaEnter: bool

    W3DurationObstacle:
      .extends: CGameplayEntity
      .adds:
        lifeTimeDuration: SRangeF
        disappearanceEffectDuration: float
        disappearEffectName: name
        simplyStopEffect: bool

    W3EntranceEntity:
      .extends: CR4MapPinEntity

    W3PointOfInterestMappinEntity:
      .extends: CR4MapPinEntity

    W3Signboard:
      .extends: W3Poster

    W3Poster:
      .extends: CGameplayEntity
      .adds:
        descriptionGenerated: bool
        description: string
        camera: CEntityTemplate
        factOnRead: string
        factOnInteraction: string
        blendInTime: float
        blendOutTime: float
        fadeStartDuration: float
        fadeEndDuration: float
        focusModeHighlight: EFocusModeVisibility
        alignLeft: bool
        restoreUsableItemAtEnd: bool
        spawnedCamera: CStaticCamera

    W3SavedPoster:
      .extends: W3Poster
      .adds:
        savedFocusModeHighlight: EFocusModeVisibility

    W3SavedAppearanceEntity:
      .extends: CGameplayEntity
      .adds:
        appearanceName: name

    W3StallEntity:
      .extends: CGameplayEntity

    W3SyncAnimationManager:
      .extends: none
      .adds:
        syncInstances: array<CAnimationManualSlotSyncInstance>
        masterEntity: CGameplayEntity
        slaveEntity: CGameplayEntity
        syncActionName: name
        dlcFinishersLeftSide: array<CR4FinisherDLC>
        dlcFinishersRightSide: array<CR4FinisherDLC>
        cameraAnimName: name

    W3NonPlayerAbilityManager:
      .extends: W3AbilityManager
      .adds:
        weatherBonuses: array<SWeatherBonus>

    W3PlayerAbilityManager:
      .extends: W3AbilityManager
      .adds:
        skills: array<SSkill>
        resistStatsItems: array<array<SResistanceValue>>
        toxicityOffset: float
        pathPointsSpent: array<int>
        skillSlots: array<SSkillSlot>
        skillAbilities: array<name>
        totalSkillSlotsCount: int
        tempSkills: array<ESkill>
        mutagenSlots: array<SMutagenSlot>
        temporaryTutorialSkills: array<STutorialTemporarySkill>
        ep1SkillsInitialized: bool
        ep2SkillsInitialized: bool
        baseGamePerksGUIPosUpdated: bool
        mutagenBonuses: array<SMutagenBonusAlchemy19>
        alchemy19OptimizationDone: bool
        isMutationSystemEnabled: bool
        equippedMutation: EPlayerMutationType
        mutations: array<SMutation>
        mutationUnlockedSlotsIndexes: array<int>
        mutationSkillSlotsInitialized: bool
        LINK_BONUS_BLUE: name
        LINK_BONUS_GREEN: name
        LINK_BONUS_RED: name
        MUTATION_SKILL_GROUP_ID: int

    W3Action_Attack:
      .extends: W3DamageAction
      .adds:
        weaponId: SItemUniqueId
        crossbowId: SItemUniqueId
        attackName: name
        attackTypeName: name
        isAttackReflected: bool
        isParried: bool
        isCountered: bool
        attackAnimName: name
        hitTime: float
        weaponEntity: CItemEntity
        weaponSlot: name
        boneIndex: int
        soundAttackType: name
        usedZeroStaminaPerk: bool
        applyBuffsIfParried: bool

    W3DamageAction:
      .extends: CDamageData
      .adds:
        dmgInfos: array<SRawDamage>
        effectInfos: array<SEffectInfo>
        cannotReturnDamage: bool
        isPointResistIgnored: bool
        canPlayHitParticle: bool
        hitAnimationPlayType: EActionHitAnim
        hitReactionType: EHitReactionType
        buffSourceName: string
        canBeParried: bool
        canBeDodged: bool
        hitFX: name
        hitBackFX: name
        hitParriedFX: name
        hitBackParriedFX: name
        powerStatType: ECharacterPowerStats
        swingType: EAttackSwingType
        swingDirection: EAttackSwingDirection
        signSkill: ESkill
        isDodged: bool
        shouldProcessBuffsIfNoDamage: bool
        ignoreImmortalityMode: bool
        dealtFireDamage: bool
        isHeadShot: bool
        killedBySingleHit: bool
        ignoreArmor: bool
        supressHitSounds: bool
        dealtDamage: bool
        endsQuen: bool
        armorReducedDamageToZero: bool
        underwaterDisplayDamageHack: bool
        parryStagger: bool
        bouncedArrow: bool
        forceExplosionDismemberment: bool
        isCriticalHit: bool
        instantKill: bool
        instantKillFloater: bool
        instantKillCooldownIgnore: bool
        wasFrozen: bool
        mutation4Triggered: bool
        didReturnDamageToAttacker: bool
        DOTdt: float
        isActionRanged: bool
        isActionWitcherSign: bool
        isActionEnvironment: bool

    W3AlchemyManager:
      .extends: none
      .adds:
        recipes: array<SAlchemyRecipe>
        isPlayerMounted: bool
        isPlayerInCombat: bool

    W3Bird:
      .extends: CGameplayEntity
      .adds:
        flyingAppearanceName: name
        destroyDistance: float
        flyCurves: array<name>
        manager: CBirdsManager

    W3BirdQuest:
      .extends: W3Bird
      .adds:
        m_focusSoundEffect: EFocusModeSoundEffectType

    CBirdSpawnpoint:
      .extends: CEntity

    CBirdsManager:
      .extends: CGameplayEntity
      .adds:
        birdsSpawnPointsTag: name
        birdType: EBirdType
        spawnRange: float
        customBirdTemplate: CEntityTemplate
        respawnDelay: float
        respawnMinDistance: float
        spawnOnlyInsideBirdsArea: bool
        disableSnapToCollisions: bool
        birdSpawnpoints: array<SBirdSpawnpoint>
        shouldBirdsFly: bool
        despawnTime: float
        wasEverVisible: bool
        birdArea: CTriggerAreaComponent
        birdTemplate: CEntityTemplate

    CBirdsArea:
      .extends: CGameplayEntity
      .adds:
        birdsManagerTag: name

    W3CurveFish:
      .extends: CGameplayEntity
      .adds:
        destroyDistance: float
        swimCurves: array<name>
        speedUpChance: float
        baseSpeedVariance: float
        maxSpeed: float
        randomizedAppearances: array<string>
        manager: W3CurveFishManager
        baseSpeed: float
        selectedSwimCurve: name
        currentSpeed: float
        accelerate: bool

    W3CurveFishSpawnpoint:
      .extends: CEntity

    W3CurveFishManager:
      .extends: CGameplayEntity
      .adds:
        fishSpawnPointsTag: name
        fishTemplate: array<CEntityTemplate>
        randomFishRotation: bool
        fishSpawnpoints: array<SFishSpawnpoint>
        m_spawnDistance: float
        m_despawnDistance: float
        m_spawned: bool
        m_firstTimeCollectSpawnpoints: bool
        m_spawnedFish: array<W3CurveFish>

    W3Whale:
      .extends: CGameplayEntity
      .adds:
        whaleArea: W3WhaleArea
        destroyTime: float
        alwaysSpawned: bool
        canBeDestroyed: bool
        spawnPosition: Vector
        spawnRotation: EulerAngles

    W3WhaleArea:
      .extends: CEntity
      .adds:
        whaleSpawnPointTag: name
        whaleSpawnOffsetY: float
        minSpawnDistance: float
        maxSpawnDistance: float
        spawnFrequencyMin: float
        spawnFrequencyMax: float
        movementPatern: EWhaleMovementPatern
        whaleTemplate: CEntityTemplate

    CSpawnTreeInitializerSetImmortality:
      .extends: ISpawnTreeScriptedInitializer
      .adds:
        immortalityMode: EActorImmortalityMode
        previousImmortalityMode: EActorImmortalityMode

    W3ActorRemains:
      .extends: W3AnimatedContainer
      .adds:
        dismemberOnLoot: bool
        dismembermentOnlyWhenLootingTrophy: bool
        dismembermentType: EDismembermentWoundTypes
        dismembermentName: name
        manualTrophyTransfer: bool
        owner: CActor
        hasTrophy: bool
        wasDismembered: bool
        trophyItemNames: array<name>

    W3AnimatedContainer:
      .extends: W3Container
      .adds:
        animationForAllInteractions: bool
        interactionName: string
        holsterWeaponAtTheBeginning: bool
        interactionAnim: EPlayerExplorationAction
        slotAnimName: name
        interactionAnimTime: float
        desiredPlayerToEntityDistance: float
        matchPlayerHeadingWithHeadingOfTheEntity: bool
        attachThisObjectOnAnimEvent: bool
        attachSlotName: name
        attachAnimName: name
        detachAnimName: name
        objectAttached: bool
        objectCachedPos: Vector
        objectCachedRot: EulerAngles

    W3CookingPlace:
      .extends: W3Container
      .adds:
        cookingTime: float
        schematics: array<SCookingSchematic>
        isActive: bool
        cookingStarted: bool
        cookingCompleted: bool

    W3CampfirePlace:
      .extends: W3CookingPlace
      .adds:
        victims: array<CActor>
        bombs: array<SItemUniqueId>

    W3DisplayMount:
      .extends: W3Container
      .adds:
        ids: array<SItemUniqueId>
        i: int

    W3Herb:
      .extends: W3RefillableContainer
      .adds:
        isEmptyAppearance: bool

    W3Stash:
      .extends: CInteractiveEntity
      .adds:
        forceDiscoverable: bool

    W3RefillableContainer:
      .extends: W3Container
      .adds:
        isEmpty: bool
        checkedForBonusHerbs: bool

    W3treasureHuntContainer:
      .extends: W3Container
      .adds:
        OnLootedEvents: array<W3SwitchEvent>

    W3CraftingManager:
      .extends: none
      .adds:
        schematics: array<SCraftingSchematic>
        craftMasterComp: W3CraftsmanComponent

    W3EnchantmentManager:
      .extends: none
      .adds:
        schematics: array<SEnchantmentSchematic>
        craftMasterComp: W3CraftsmanComponent
        schematicsNames: array<name>

    W3ItemUpgradeManager:
      .extends: none
      .adds:
        upgrades: array<SItemUpgradeListElement>

    W3DamageManager:
      .extends: none

    W3DamageManagerProcessor:
      .extends: CObject
      .adds:
        playerAttacker: CR4Player
        playerVictim: CR4Player
        action: W3DamageAction
        attackAction: W3Action_Attack
        weaponId: SItemUniqueId
        actorVictim: CActor
        actorAttacker: CActor
        dm: CDefinitionsManagerAccessor
        attackerMonsterCategory: EMonsterCategory
        victimMonsterCategory: EMonsterCategory
        victimCanBeHitByFists: bool

    W3ElevatorMechanism:
      .extends: CEntity
      .adds:
        radius: float
        clockwiseRotation: bool
        rotationSpeed: float
        forwardDirection: bool
        transformMatrix: Matrix
        localRotation: EulerAngles

    W3ElevatorSwitch:
      .extends: W3InteractionSwitch
      .adds:
        elevator: EntityHandle
        switchType: EElevatorSwitchType
        switchRegistered: bool

    W3ElevatorInteractive:
      .extends: W3Elevator
      .adds:
        initialPosOnTop: bool
        targetObject: EntityHandle
        maxHeight: float
        mechanismEntityHandle: EntityHandle
        activated: bool
        explorationComponents: array<CComponent>
        switches: array<W3ElevatorSwitch>
        i: int
        size: int
        elevatorSaveLockInt: int

    W3Elevator:
      .extends: CGameplayEntity
      .adds:
        appearanceOnTop: string
        appearanceOnGround: string
        speed: float
        currentHeight: float
        targetNodeHeight: float
        currentSpeed: float
        initialSpeed: float
        isOnTop: bool
        movementStarted: bool
        onTopPosChecked: bool
        initialHeight: float
        pos: Vector
        onTopPos: Vector
        heightDifference: float
        goingUp: bool
        playerOnElevator: bool
        playerAttached: bool
        deniedAreaCreated: bool
        blockedActions: array<EInputActionBlock>
        entityTemplate: CEntityTemplate
        deniedArea1: CEntity
        deniedArea2: CEntity
        deniedArea3: CEntity

    W3Trap:
      .extends: W3MonsterClue
      .adds:
        ARM_INTERACTION_COMPONENT_NAME: string
        DISARM_INTERACTION_COMPONENT_NAME: string
        m_IsActive: bool
        m_Targets: array<CNode>
        m_isArmed: bool
        m_wasSprung: bool
        m_isPlayingAnimation: bool
        activeByDefault: bool
        factOnArm: SFactParameters
        factOnDisarm: SFactParameters
        factOnActivation: SFactParameters
        factOnDeactivation: SFactParameters
        deactivateAfterTime: float
        appearanceActivated: string
        appearanceDeactived: string
        appearanceArmed: string
        appearanceDisarmed: string
        canBeArmed: bool
        interactibleAfterSprung: bool
        willActivateWhenHit: bool
        soundOnArm: name
        soundOnDisarm: name

    W3TrapAlarm:
      .extends: W3Trap
      .adds:
        alarmSoundString: string

    W3TrapDestructSelf:
      .extends: W3Trap
      .adds:
        playEffectOnDestruct: name
        onlyDestructOnAreaEnter: bool
        denyAreaAfterDestruction: bool
        excludedActorsTags: array<name>
        excludesblockDestruction: bool
        m_actorsInTrigger: array<CActor>
        m_isDestroyed: bool

    W3TrapProjectileArea_CreateEntityHelper:
      .extends: CCreateEntityHelper
      .adds:
        owner: W3TrapProjectileArea
        velocity: float
        targetPos: Vector

    W3TrapProjectileArea:
      .extends: W3Trap
      .adds:
        projectile: CEntityTemplate
        density: float
        maxShots: int
        reloadAtActivation: bool
        projAtOnce: SRange
        delay: SRangeF
        targetPlayerDelay: SRangeF
        height: SRangeF
        velocity: SRangeF
        projectileOriginOffsetX: SRangeF
        projectileOriginOffsetY: SRangeF
        shootOnlyWhenTargetInside: bool
        deactivateAutomatically: bool
        useAdvancedDistribution: bool
        useGridPositioning: bool
        excludedEntityTags: array<name>
        magnetTags: array<name>
        magnetRange: float
        magnetOffset: Vector
        maxDistanceFromPlayer: float
        forbidingAreaRadius: float
        m_AreaComponent: CTriggerAreaComponent
        m_ProjectilePositionGrid: array<Vector>
        m_UsedProjectilePosition: array<Vector>
        m_AcceptablePos: array<Vector>
        m_ForbiddenPos: array<Vector>
        m_LastPlayerCheckedPos: Vector
        m_LastQuantOfForbidAreas: int
        m_GridSquareWidth: float
        m_GridSquareLength: float
        m_DelayUntilNextShoot: float
        m_DelayUntilNextPlayerShoot: float
        m_QuantityShotNext: int
        m_PlayerIsInArea: bool
        m_TargetsInArea: array<CEntity>
        m_CreateEntityHelper: W3TrapProjectileArea_CreateEntityHelper
        m_EntityCreated: int
        m_WasCreatingLastFrame: bool
        m_Shot: bool
        m_DebugFloat: float
        m_DebugIndex: int
        m_TotalQuantityShot: int

    W3TrapProjectileStatue:
      .extends: W3Trap
      .adds:
        m_Projectile: CEntityTemplate
        m_IsStatic: bool
        m_RotationSpeed: float
        m_FirstShootDelay: float
        m_FireRate: float
        m_MaxShots: float
        m_MinAngleToStartShooting: float
        m_MaxAimingPitchCorrection: float
        m_TargetPositionPrediction: float
        m_ProjectileIsCocked: Bool
        m_ProjectileSpeed: float
        m_ProjectileLifeSpan: float
        m_ProjectileFollowTarget: bool
        m_DelayUntilNextProjectile: float
        m_ShotsLeft: float
        m_CockedProjectile: W3AdvancedProjectile
        m_DelayToNextSorting: float

    W3TrapSpawnEntity:
      .extends: W3Trap
      .adds:
        spawnOnlyOnAreaEnter: bool
        maxSpawns: float
        entityToSpawn: CEntityTemplate
        offsetVector: Vector
        excludedActorsTags: array<name>
        appearanceAfterFirstSpawn: string
        m_Spawns: int

    W3TrapTripwire:
      .extends: W3Trap
      .adds:
        eventOnTripped: array<IPerformableAction>
        maxUseCount: int
        excludedActorsTags: array<name>

    W3TrapWolfPit:
      .extends: W3Trap

    W3EffectManager:
      .extends: none
      .adds:
        owner: CActor
        effects: array<CBaseGameplayEffect>
        statDeltas: array<float>
        cachedDamages: array<SEffectCachedDamage>
        isReady: bool
        currentlyAnimatedCS: CBaseGameplayEffect
        currentlyPlayedFX: array<SCurrentBuffFX>
        pausedEffects: array<STemporarilyPausedEffect>
        pausedNotAppliedAutoBuffs: array<SPausedAutoEffect>
        ownerIsWitcher: bool
        isInitializingAutobuffs: bool
        hasCriticalStateSaveLock: bool
        criticalStateSaveLockId: int
        vitalityAutoRegenOn: bool
        essenceAutoRegenOn: bool
        staminaAutoRegenOn: bool
        moraleAutoRegenOn: bool
        panicAutoRegenOn: bool
        airAutoRegenOn: bool
        swimmingStaminaAutoRegenOn: bool
        adrenalineAutoRegenOn: bool

    W3BuffCustomParams:
      .extends: none

    W3PotionParams:
      .extends: W3BuffCustomParams
      .adds:
        potionItemName: name

    W3GameEffectManager:
      .extends: none
      .adds:
        effects: array<CBaseGameplayEffect>
        effectNames: array<name>
        isReady: bool
        effectIconTypes: array<SEffectIconType>

    CGroupFXManager:
      .extends: CGameplayEntity
      .adds:
        entityTag: name
        randomDropMin: float
        randomDropMax: float
        effectName: name
        ntities: array<CEntity>
        randomDrop: float

    W3ApplicatorEffect:
      .extends: CBaseGameplayEffect
      .adds:
        spawns: array<SApplicatorSpawnEffect>

    W3AutoRegenEffect:
      .extends: W3RegenEffect

    CBaseGameplayEffect:
      .extends: CObject
      .adds:
        timeActive: float
        initialDuration: float
        duration: float
        timeLeft: float
        pauseCounters: array<SBuffPauseLock>
        isActive: bool
        resistStat: ECharacterDefenseStats
        resistance: float
        creatorPowerStat: SAbilityAttributeValue
        isPausedDuringDialogAndCutscene: bool
        dontAddAbilityOnTarget: bool
        canBeAppliedOnDeadTarget: bool
        effectManager: W3EffectManager
        isPositive: bool
        isNeutral: bool
        isNegative: bool
        isOnPlayer: bool
        isSignEffect: bool
        isPotionEffect: bool
        abilityName: name
        attributeName: name
        effectType: EEffectType
        target: CActor
        creatorHandle: EntityHandle
        effectValue: SAbilityAttributeValue
        potionItemName: name
        deny: array<EEffectType>
        override: array<EEffectType>
        sourceName: string
        cameraEffectName: name
        isPlayingCameraEffect: bool
        switchCameraEffect: bool
        isCameraEffectNameValid: bool
        iconPath: string
        showOnHUD: bool
        effectNameLocalisationKey: string
        effectDescriptionLocalisationKey: string
        targetEffectName: name
        shouldPlayTargetEffect: bool
        onAddedSound: name
        onRemovedSound: name
        vibratePadLowFreq: float
        vibratePadHighFreq: float

    W3Effect_BoostedEssenceRegen:
      .extends: W3RegenEffect

    W3ChangeMaxStatEffect:
      .extends: CBaseGameplayEffect
      .adds:
        stat: EBaseCharacterStats

    W3CriticalDOTEffect:
      .extends: W3DamageOverTimeEffect
      .adds:
        criticalStateType: ECriticalStateType
        allowedHits: array<bool>
        timeEndedHandled: bool
        isDestroyedOnInterrupt: bool
        canPlayAnimation: bool
        blockedActions: array<EInputActionBlock>
        postponeHandling: ECriticalHandling
        airHandling: ECriticalHandling
        attachedHandling: ECriticalHandling
        onHorseHandling: ECriticalHandling
        explorationStateHandling: ECriticalHandling
        usesFullBodyAnim: bool

    W3CriticalEffect:
      .extends: CBaseGameplayEffect
      .adds:
        criticalStateType: ECriticalStateType
        allowedHits: array<bool>
        timeEndedHandled: bool
        isDestroyedOnInterrupt: bool
        canPlayAnimation: bool
        blockedActions: array<EInputActionBlock>
        postponeHandling: ECriticalHandling
        airHandling: ECriticalHandling
        attachedHandling: ECriticalHandling
        onHorseHandling: ECriticalHandling
        explorationStateHandling: ECriticalHandling
        usesFullBodyAnim: bool

    W3DamageOverTimeEffect:
      .extends: CBaseGameplayEffect
      .adds:
        damages: array<SDoTDamage>
        powerStatType: ECharacterPowerStats
        isEnvironment: bool
        hpRegenPauseStrength: SAbilityAttributeValue
        hpRegenPauseExtraDuration: float

    W3BuffDoTParams:
      .extends: W3BuffCustomParams
      .adds:
        isEnvironment: bool
        isPerk20Active: bool

    W3Potion_Fact_Params:
      .extends: W3PotionParams
      .adds:
        factName: name

    W3Potion_Fact:
      .extends: CBaseGameplayEffect
      .adds:
        fact: name

    W3HitSeverityEffect:
      .extends: CBaseGameplayEffect

    W3RaisePowerStatEffect:
      .extends: CBaseGameplayEffect
      .adds:
        stat: ECharacterPowerStats

    W3Effect_Aura:
      .extends: W3ApplicatorEffect
      .adds:
        isOneTimeOnly: bool
        range: float
        flags: int

    W3FireAura:
      .extends: W3Effect_Aura

    W3Effect_KnockdownTypeApplicator:
      .extends: W3ApplicatorEffect
      .adds:
        customEffectValue: SAbilityAttributeValue
        customDuration: float
        customAbilityName: name

    W3Effect_ApplicatorOnHit:
      .extends: W3ApplicatorEffect
      .adds:
        fromSilverSword: bool
        fromSteelSword: bool
        fromSign: bool
        fromAll: bool

    W3StaggerAura:
      .extends: W3Effect_Aura

    W3WeakeningAura:
      .extends: W3Effect_Aura
      .adds:
        usedVictim: CActor
        timeSinceLastApply: float
        hasSelectedVictim: bool
        applicationDelay: float
        targetCount: int
        BUFF_DURATION: float

    W3Effect_AdrenalineDrain:
      .extends: CBaseGameplayEffect

    W3Effect_AutoAirRegen:
      .extends: W3AutoRegenEffect

    W3Effect_BoostedStaminaRegen:
      .extends: W3RegenEffect

    W3Effect_AutoEssenceRegen:
      .extends: W3AutoRegenEffect

    W3Effect_AutoMoraleRegen:
      .extends: W3AutoRegenEffect

    W3Effect_AutoPanicRegen:
      .extends: W3AutoRegenEffect

    W3Effect_AutoStaminaRegen:
      .extends: W3AutoRegenEffect
      .adds:
        regenModeIsCombat: bool
        cachedPlayer: CR4Player

    W3Effect_AutoSwimmingStaminaRegen:
      .extends: W3AutoRegenEffect

    W3Effect_AutoVitalityRegen:
      .extends: W3AutoRegenEffect
      .adds:
        regenModeIsCombat: bool
        cachedPlayer: CR4Player

    W3BlindnessEffect:
      .extends: W3CriticalEffect

    W3WraithBlindnessEffect:
      .extends: W3BlindnessEffect

    W3ConfuseEffectCustomParams:
      .extends: W3BuffCustomParams
      .adds:
        criticalHitChanceBonus: float

    W3ConfuseEffect:
      .extends: W3CriticalEffect
      .adds:
        drainStaminaOnExit: bool
        criticalHitBonus: float

    W3Effect_CounterStrikeHit:
      .extends: W3CriticalEffect

    W3FrozenEffectCustomParams:
      .extends: W3BuffCustomParams
      .adds:
        freezeFadeInTime: float

    W3Effect_Frozen:
      .extends: W3ImmobilizeEffect
      .adds:
        killOnHit: bool
        bonusDamagePercents: float
        targetWasFlying: bool
        pushPriority: EInteractionPriority
        wasKnockedDown: bool

    W3Effect_HeavyKnockdown:
      .extends: W3CriticalEffect

    W3Effect_Hypnotized:
      .extends: W3CriticalEffect
      .adds:
        customCameraStackIndex: int
        envID: int
        fxEntity: CEntity
        gameplayVisibilityFlag: bool

    W3ImmobilizeEffect:
      .extends: W3CriticalEffect

    W3Effect_Knockdown:
      .extends: W3CriticalEffect

    W3Effect_LongStagger:
      .extends: W3Effect_Stagger
      .adds:
        owner: CEntity

    W3Effect_Paralyzed:
      .extends: W3ImmobilizeEffect

    W3Effect_Pull:
      .extends: W3ImmobilizeEffect
      .adds:
        movementAdjustor: CMovementAdjustor
        ticket: SMovementAdjustmentRequestTicket

    W3Effect_Tangled:
      .extends: W3ImmobilizeEffect
      .adds:
        particleEnt: W3VisualFx

    W3Effect_Ragdoll:
      .extends: W3CriticalEffect

    W3Effect_Snowstorm:
      .extends: W3CriticalDOTEffect
      .adds:
        usesCam: bool

    W3SnowstormCustomParams:
      .extends: W3BuffCustomParams
      .adds:
        showCamEffect: bool

    W3Effect_SnowstormQ403:
      .extends: W3Effect_Snowstorm

    W3Effect_Stagger:
      .extends: W3CriticalEffect
      .adds:
        timeToEnableDodge: float

    W3Effect_Swarm:
      .extends: W3CriticalDOTEffect

    W3Effect_Tornado:
      .extends: W3CriticalEffect

    W3Effect_Trap:
      .extends: W3CriticalEffect

    W3Effect_WitchHypnotized:
      .extends: W3CriticalEffect
      .adds:
        customCameraStackIndex: int
        fxEntity: CEntity
        envID: int

    W3Effect_Acid:
      .extends: W3DamageOverTimeEffect

    W3Effect_Bleeding:
      .extends: W3DamageOverTimeEffect

    W3Effect_BleedingTracking:
      .extends: W3DamageOverTimeEffect
      .adds:
        bloodTemplate: CEntityTemplate
        bloodSpawnTimer: float
        BLOOD_SPAWN_DELAY_MIN: int
        BLOOD_SPAWN_DELAY_MAX: int

    W3Effect_Burning:
      .extends: W3CriticalDOTEffect
      .adds:
        cachedMPAC: CMovingPhysicalAgentComponent
        glyphword12Delay: float
        isWithGlyphword12: bool
        glyphword12Fx: W3VisualFx
        glyphword12BurningChance: float
        glyphword12NotBurnedEntities: array<CGameplayEntity>

    W3Effect_Choking:
      .extends: W3DamageOverTimeEffect

    W3Effect_DoTHPRegenReduce:
      .extends: CBaseGameplayEffect

    W3Effect_Drowning:
      .extends: W3DamageOverTimeEffect
      .adds:
        m_NoSaveLockInt: int
        isEffectOn: bool
        mac: CMovingPhysicalAgentComponent
        submergeDepth: float

    W3Effect_PoisonCritical:
      .extends: W3CriticalDOTEffect

    W3Effect_Poison:
      .extends: W3DamageOverTimeEffect

    W3Effect_AirDrain:
      .extends: CBaseGameplayEffect

    W3Effect_AirDrainDive:
      .extends: CBaseGameplayEffect
      .adds:
        effectValueMultInIdle: SAbilityAttributeValue
        effectValueMultWhileSprinting: SAbilityAttributeValue

    W3Effect_StaminaDrain:
      .extends: CBaseGameplayEffect
      .adds:
        effectValueDrain: SAbilityAttributeValue

    W3Effect_StaminaDrainSwimming:
      .extends: CBaseGameplayEffect
      .adds:
        effectValueMovement: SAbilityAttributeValue
        effectValueSprinting: SAbilityAttributeValue
        effectValueColdWater: SAbilityAttributeValue

    W3Effect_Toxicity:
      .extends: CBaseGameplayEffect
      .adds:
        dmgTypeName: name
        toxThresholdEffect: int
        delayToNextVFXUpdate: float

    W3Effect_VitalityDrain:
      .extends: W3DamageOverTimeEffect

    W3Mutagen01_Effect:
      .extends: W3Mutagen_Effect

    W3Mutagen02_Effect:
      .extends: W3Mutagen_Effect

    W3Mutagen03_Effect:
      .extends: W3Mutagen_Effect

    W3Mutagen04_Effect:
      .extends: W3Mutagen_Effect

    W3Mutagen05_Effect:
      .extends: W3Mutagen_Effect

    W3Mutagen06_Effect:
      .extends: W3Mutagen_Effect

    W3Mutagen07_Effect:
      .extends: W3Mutagen_Effect

    W3Mutagen08_Effect:
      .extends: W3Mutagen_Effect

    W3Mutagen09_Effect:
      .extends: W3Mutagen_Effect
      .adds:
        hasAbility: bool

    W3Mutagen10_Effect:
      .extends: W3Mutagen_Effect

    W3Mutagen11_Effect:
      .extends: W3Mutagen_Effect

    W3Mutagen12_Effect:
      .extends: W3Mutagen_Effect

    W3Mutagen13_Effect:
      .extends: W3Mutagen_Effect

    W3Mutagen14_Effect:
      .extends: W3Mutagen_Effect

    W3Mutagen15_Effect:
      .extends: W3Mutagen_Effect

    W3Mutagen16_Effect:
      .extends: W3Mutagen_Effect

    W3Mutagen17_Effect:
      .extends: W3Mutagen_Effect
      .adds:
        hasBoost: bool

    W3Mutagen18_Effect:
      .extends: W3Mutagen_Effect

    W3Mutagen19_Effect:
      .extends: W3Mutagen_Effect

    W3Mutagen20_Effect:
      .extends: W3Mutagen_Effect
      .adds:
        burningPoints: SAbilityAttributeValue
        burningPercents: SAbilityAttributeValue
        poisonPoints: SAbilityAttributeValue
        poisonPercents: SAbilityAttributeValue
        bleedingPoints: SAbilityAttributeValue
        bleedingPercents: SAbilityAttributeValue
        burningResistanceCounter: float
        poisonResistanceCounter: float
        bleedingResistanceCounter: float
        player: CR4Player

    W3Mutagen21_Effect:
      .extends: W3Mutagen_Effect

    W3Mutagen22_Effect:
      .extends: W3Mutagen_Effect

    W3Mutagen23_Effect:
      .extends: W3Mutagen_Effect

    W3Mutagen24_Effect:
      .extends: W3Mutagen_Effect

    W3Mutagen25_Effect:
      .extends: W3Mutagen_Effect
      .adds:
        attackPowerBonus: SAbilityAttributeValue

    W3Mutagen26_Effect:
      .extends: W3Mutagen_Effect

    W3Mutagen27_Effect:
      .extends: W3Mutagen_Effect

    W3Mutagen28_Effect:
      .extends: W3Mutagen_Effect

    W3Mutagen_Effect:
      .extends: CBaseGameplayEffect
      .adds:
        toxicityOffset: float

    W3MutagenBuffCustomParams:
      .extends: W3PotionParams
      .adds:
        toxicityOffset: float

    W3Effect_Mutation10:
      .extends: CBaseGameplayEffect
      .adds:
        bonusPerPoint: float

    W3Effect_Mutation11Buff:
      .extends: CBaseGameplayEffect

    W3Effect_Mutation11Debuff:
      .extends: CBaseGameplayEffect

    W3Effect_Mutation11Immortal:
      .extends: CBaseGameplayEffect

    W3Effect_Mutation12Cat:
      .extends: W3Potion_Cat

    W3Effect_Mutation3:
      .extends: CBaseGameplayEffect
      .adds:
        stacks: int
        maxCap: int
        apBonus: float

    W3Effect_Mutation4:
      .extends: CBaseGameplayEffect
      .adds:
        bonusPerPoint: float
        dotDuration: float

    W3Effect_Mutation5:
      .extends: CBaseGameplayEffect
      .adds:
        bonusPerPoint: float

    W3Mutation7BaseEffect:
      .extends: CBaseGameplayEffect
      .adds:
        actors: array<CActor>
        sonarEntity: CEntity
        meshComponent: CMeshComponent
        streamingHax: bool
        scale: float
        isSonarIncreasing: bool
        enemyFlashFX: name
        actorsCount: int
        apBonus: float

    W3Effect_Mutation7Buff:
      .extends: W3Mutation7BaseEffect

    W3Effect_Mutation7Debuff:
      .extends: W3Mutation7BaseEffect
      .adds:
        minCapStacks: int

    W3Mutation7DebuffParams:
      .extends: W3BuffCustomParams
      .adds:
        actorsCount: int

    W3Effect_AbilityOnLowHP:
      .extends: CBaseGameplayEffect
      .adds:
        lowHPAbilityName: name

    W3Effect_Aerondight:
      .extends: CBaseGameplayEffect
      .adds:
        m_maxCount: int
        m_currCount: int
        m_wasDischarged: bool
        m_aerondightTime: float
        m_attribute: SAbilityAttributeValue
        m_stacksPerLevel: SAbilityAttributeValue
        m_currChargingEffect: name
        m_aerondightDelay: float
        timeOfPause: GameTime

    W3AerondightFXComponent:
      .extends: CScriptedComponent
      .adds:
        m_visualEffects: array<name>

    W3Effect_AirBoost:
      .extends: W3ChangeMaxStatEffect

    W3Effect_BasicQuen:
      .extends: CBaseGameplayEffect
      .adds:
        quenEntity: W3QuenEntity

    W3Effect_BookshelfBuff:
      .extends: CBaseGameplayEffect

    W3Effect_DoppelgangerEssenceRegen:
      .extends: CBaseGameplayEffect
      .adds:
        usesVitality: bool

    W3Effect_Drunkenness:
      .extends: CBaseGameplayEffect

    W3Effect_Edible:
      .extends: W3RegenEffect

    W3Effect_EnhancedArmor:
      .extends: W3RepairObjectEnhancement

    W3Effect_EnhancedWeapon:
      .extends: W3RepairObjectEnhancement

    W3Effect_GryphonSetBonus:
      .extends: CBaseGameplayEffect
      .adds:
        m_whichSignForFree: W3SignEntity

    W3Effect_GryphonSetBonusYrden:
      .extends: CBaseGameplayEffect

    W3Effect_HorseStableBuff:
      .extends: CBaseGameplayEffect
      .adds:
        m_ownerHorse: CNewNPC

    W3Effect_LowHealth:
      .extends: CBaseGameplayEffect

    W3Effect_LynxSetBonus:
      .extends: CBaseGameplayEffect

    W3Effect_Oil:
      .extends: CBaseGameplayEffect
      .adds:
        currCount: int
        maxCount: int
        sword: SItemUniqueId
        oilAbility: name
        oilItemName: name
        queueTimer: int

    W3OilBuffParams:
      .extends: W3BuffCustomParams
      .adds:
        iconPath: string
        localizedName: string
        localizedDescription: string
        currCount: int
        maxCount: int
        sword: SItemUniqueId
        oilAbilityName: name
        oilItemName: name

    W3Effect_OverEncumbered:
      .extends: CBaseGameplayEffect
      .adds:
        timeSinceLastMessage: float
        OVERWEIGHT_MESSAGE_DELAY: float

    W3Effect_Perk21InternalCooldown:
      .extends: CBaseGameplayEffect

    W3Effect_POIGorA10Effect:
      .extends: CBaseGameplayEffect

    W3Effect_PolishedGenitals:
      .extends: CBaseGameplayEffect

    W3RepairObjectEnhancement:
      .extends: CBaseGameplayEffect
      .adds:
        usesPerkBonus: bool
        durUpdates: bool

    W3Effect_Runeword8:
      .extends: CBaseGameplayEffect
      .adds:
        focusDrainPerSec: float

    W3Effect_SilverDust:
      .extends: CBaseGameplayEffect

    W3Effect_Slowdown:
      .extends: CBaseGameplayEffect
      .adds:
        slowdownCauserId: int
        decayPerSec: float
        decayDelay: float
        delayTimer: float
        slowdown: float

    W3Effect_SlowdownAxii:
      .extends: W3Effect_Slowdown

    W3Effect_SlowdownFrost:
      .extends: CBaseGameplayEffect
      .adds:
        slowdownCauserId: int

    W3Effect_ToxicityVenom:
      .extends: CBaseGameplayEffect

    W3Effect_Weaken:
      .extends: CBaseGameplayEffect

    W3Effect_WeatherBonus:
      .extends: CBaseGameplayEffect

    W3Effect_WellFed:
      .extends: W3RegenEffect

    W3Effect_WellHydrated:
      .extends: W3RegenEffect
      .adds:
        level: int

    W3Effect_WellRested:
      .extends: CBaseGameplayEffect

    W3Effect_WolfHour:
      .extends: CBaseGameplayEffect

    W3Potion_BlackBlood:
      .extends: W3Effect_Aura

    W3Potion_Blizzard:
      .extends: CBaseGameplayEffect
      .adds:
        slowdownCauserIds: array<int>
        slowdownFactor: float
        currentSlowMoDuration: float
        SLOW_MO_DURATION: float

    W3Potion_Cat:
      .extends: CBaseGameplayEffect
      .adds:
        highlightObjectsRange: float
        highlightEnemiesRange: float
        witcher: W3PlayerWitcher
        isScreenFxActive: bool
        timeSinceLastHighlight: float
        timeSinceLastEnemyHighlight: float
        HIGHLIGHT_REFRESH_DT: float
        ENEMY_HIGHLIGHT_DT: float

    W3Potion_FullMoon:
      .extends: W3ChangeMaxStatEffect

    W3Potion_GoldenOriole:
      .extends: CBaseGameplayEffect

    W3Potion_KillerWhale:
      .extends: W3ChangeMaxStatEffect
      .adds:
        visionStrength: float

    W3Potion_MariborForest:
      .extends: CBaseGameplayEffect

    W3Potion_PetriPhiltre:
      .extends: W3RaisePowerStatEffect

    W3Potion_Pheromone:
      .extends: CBaseGameplayEffect
      .adds:
        abilityNameStr: string

    W3Potion_PheromoneBear:
      .extends: W3Potion_Pheromone

    W3Potion_PheromoneDrowner:
      .extends: W3Potion_Pheromone

    W3Potion_PheromoneNekker:
      .extends: W3Potion_Pheromone

    W3Potion_VitalityRegen:
      .extends: W3RegenEffect
      .adds:
        combatRegen: SAbilityAttributeValue
        nonCombatRegen: SAbilityAttributeValue
        playerTarget: CR4Player

    W3Potion_Swallow:
      .extends: W3Potion_VitalityRegen

    W3Potion_TawnyOwl:
      .extends: W3RegenEffect

    W3Potion_Thunderbolt:
      .extends: W3RaisePowerStatEffect

    W3Potion_WhiteHoney:
      .extends: CBaseGameplayEffect

    W3Potion_WhiteRaffardDecoction:
      .extends: CBaseGameplayEffect

    W3RegenEffect:
      .extends: CBaseGameplayEffect
      .adds:
        regenStat: ECharacterRegenStats
        stat: EBaseCharacterStats
        isOnMonster: bool

    W3Effect_ShrineAard:
      .extends: W3Effect_Shrine

    W3Effect_ShrineAxii:
      .extends: W3Effect_Shrine

    W3Effect_Shrine:
      .extends: CBaseGameplayEffect
      .adds:
        isFromMutagen23: bool

    W3ShrineEffectParams:
      .extends: W3BuffCustomParams
      .adds:
        isFromMutagen23: bool

    W3Effect_ShrineIgni:
      .extends: W3Effect_Shrine

    W3Effect_ShrineQuen:
      .extends: W3Effect_Shrine

    W3Effect_ShrineYrden:
      .extends: W3Effect_Shrine

    W3Effect_AxiiGuardMe:
      .extends: CBaseGameplayEffect
      .adds:
        drainStaminaOnExit: bool

    W3Effect_BattleTrance:
      .extends: CBaseGameplayEffect
      .adds:
        currentFocusLevel: int

    W3Effect_IgnorePain:
      .extends: W3ChangeMaxStatEffect

    W3Effect_YrdenHealthDrain:
      .extends: W3DamageOverTimeEffect
      .adds:
        hitFxDelay: float

    IInstantEffectExecutor:
      .extends: IGameplayEffectExecutor
      .adds:
        customIconPath: string
        customNameLocalisationKey: string
        customDescriptionLocalisationKey: string
        executorName: name

    CBuffEffectExecutor:
      .extends: IGameplayEffectExecutor
      .adds:
        effectType: EEffectType
        duration: float
        customEffectValue: SAbilityAttributeValue

    W3Executor_InstantDeath:
      .extends: IInstantEffectExecutor

    CEncounterActivator:
      .extends: CGameplayEntity
      .adds:
        encounterAreaTag: name
        phaseToActivate: name
        disableEncounterOnExit: bool
        encounter: CEncounter
        isPlayerInArea: bool

    CEncounterStateRequest:
      .extends: CScriptedEntityStateChangeRequest
      .adds:
        enable: bool

    W3FactCondition:
      .extends: ISpawnScriptCondition
      .adds:
        fact: string
        factValue: int
        operator: EOperator
        queryFactVal: int

    W3KilledCounterCondition:
      .extends: ISpawnScriptCondition
      .adds:
        killedValue: int
        operator: EOperator
        killedCreatures: int
        dataManager: CEncounterDataManager

    W3KilledCounterByEntryCondition:
      .extends: ISpawnScriptCondition
      .adds:
        killedValue: int
        entryNme: name
        operator: EOperator
        killedCreatures: int
        dataManager: CEncounterDataManager

    W3SpawnedCounterCondition:
      .extends: ISpawnScriptCondition
      .adds:
        spawnedValue: int
        operator: EOperator
        spawnedCreatures: int
        dataManager: CEncounterDataManager

    W3SpawnedCounterByEntryCondition:
      .extends: ISpawnScriptCondition
      .adds:
        spawnedValue: int
        entryName: name
        operator: EOperator
        spawnedCreatures: int
        dataManager: CEncounterDataManager

    W3ConditionSpawnDuringCombat:
      .extends: ISpawnScriptCondition
      .adds:
        spawnDuringCombat: bool

    W3CreaturesGroupEnabledCondition:
      .extends: ISpawnScriptCondition
      .adds:
        groupName: name
        disabledBySources: int
        dataManager: CEncounterDataManager

    W3HasItemCondition:
      .extends: ISpawnScriptCondition
      .adds:
        item: SItemNameProperty
        actorTag: name

    W3HasItemByCategoryCondition:
      .extends: ISpawnScriptCondition
      .adds:
        itemCategory: name
        actorTag: name

    W3PlayerLevelCondition:
      .extends: ISpawnScriptCondition
      .adds:
        level: int
        operator: EOperator
        queryVal: int

    CEncounterDataManager:
      .extends: IScriptable
      .adds:
        resetOnFullRespawn: bool
        disabledCreaturesGroups: array<CreaturesGroupDef>
        killedCreatures: int
        currentlySpawnedCreatures: int
        spawnedCreatures: int
        lostCreatures: int
        killedCreaturesByEntry: array<CreatureCounterDef>
        currentlySpawnedCreaturesByEntry: array<CreatureCounterDef>
        spawnedCreaturesByEntry: array<CreatureCounterDef>
        lostCreaturesByEntry: array<CreatureCounterDef>
        disbledMonitors: array<ISpawnTreeSpawnMonitorInitializer>
        ownerTasksToPerform: array<SOwnerEncounterTaskParams>
        externalTasksToPerform: array<SExternalEncounterTaskParams>

    CSpawnTreeInitializerToggleMonsterDefaultIdleBehaviors:
      .extends: ISpawnTreeInitializerToggleBehavior

    CSpawnTreeInitializerToggleMonsterSmallGuardAreaBehaviors:
      .extends: ISpawnTreeInitializerToggleBehavior

    CSpawnTreeInitializerToggleMonsterCanFlyIdle:
      .extends: ISpawnTreeInitializerToggleBehavior

    CSpawnTreeInitializerToggleAreaSceneActor:
      .extends: ISpawnTreeInitializerToggleBehavior

    CAICommunityRedefinitionParameters:
      .extends: CAIIdleRedefinitionParameters
      .adds:
        useDefaultIdleBehaviors: bool
        canFlyInIdle: bool

    CSpawnTreeInitializerSmartWorkAI:
      .extends: ISpawnTreeInitializerIdleSmartAI

    CSpawnTreeInitializerSmartWanderAndWorkAI:
      .extends: ISpawnTreeInitializerIdleSmartAI

    CSpawnTreeInitializerSmartWanderAI:
      .extends: ISpawnTreeInitializerIdleSmartAI

    CSpawnTreeInitializerSmartDynamicWanderAI:
      .extends: ISpawnTreeInitializerIdleSmartAI

    ISpawnTreeCreatePortalEntityInitializer:
      .extends: ISpawnTreeScriptedInitializer
      .adds:
        entityToCreate: CEntityTemplate
        spawnOffset: Vector

    ISpawnAnimEntityInitializer:
      .extends: ISpawnTreeScriptedInitializer
      .adds:
        forceSpawnAnim: int

    ISpawnTreeSpawnAroundNodeInitializer:
      .extends: ISpawnTreeScriptedInitializer
      .adds:
        spawnRadiousMin: float
        spawnRadiousMAx: float
        spawnNodeTag: name
        spawnNode: CNode

    ISpawnTreeSetLootInitializer:
      .extends: ISpawnTreeScriptedInitializer
      .adds:
        lootDefinitions: array<SR4LootNameProperty>
        overrideLoot: bool
        randomize: bool
        inventory: CInventoryComponent
        i: int
        rand: int
        randRange: int

    ISpawnTreeAddItemInitializer:
      .extends: ISpawnTreeScriptedInitializer
      .adds:
        items: array<SItemExt>
        randomize: bool
        equip: bool
        checkIfItemsAlreadyAdded: bool
        inventory: CInventoryComponent
        i: int
        rand: int
        randRange: int
        itemsIDs: array<SItemUniqueId>
        possesedItemsCount: int
        itemsToAddCount: int

    ISpawnAddAbilityInitializer:
      .extends: ISpawnTreeScriptedInitializer
      .adds:
        remove: bool
        abulities: array<name>
        abilityName: name
        i: int

    ISpawnSetNPCLevelInitializer:
      .extends: ISpawnTreeScriptedInitializer
      .adds:
        level: int

    ISpawnAddNPCLevelInitializer:
      .extends: ISpawnTreeScriptedInitializer
      .adds:
        level: int

    CSpawnTreeMonsterNestMonitorInitializer:
      .extends: ISpawnTreeSpawnMonitorInitializer
      .adds:
        monsterNestTag: name
        disableRebuildingOnBossDeath: bool

    CSpawnTreeDeathCountMonitorInitializer:
      .extends: ISpawnTreeSpawnMonitorInitializer

    CSpawnTreeKilledCounterByEntryMonitorInitializer:
      .extends: ISpawnTreeSpawnMonitorInitializer

    CSpawnTreeSpawnedCounterMonitorInitializer:
      .extends: ISpawnTreeSpawnMonitorInitializer

    CSpawnTreeSpawnedCounterByEntryMonitorInitializer:
      .extends: ISpawnTreeSpawnMonitorInitializer

    CSpawnTreeCurrentlySpawnedCounterMonitorInitializer:
      .extends: ISpawnTreeSpawnMonitorInitializer

    CSpawnTreeCurrentlySpawnedCounterByEntryMonitorInitializer:
      .extends: ISpawnTreeSpawnMonitorInitializer

    CSpawnTreeEncunterStateByEntryMonitorInitializer:
      .extends: ISpawnTreeSpawnMonitorInitializer
      .adds:
        counterType: EEncounterMonitorCounterType
        referenceValue: int
        operator: EOperator
        disableMonitorAfterTasksFinished: bool
        factOnConditionMet: string
        ownerEncounterTasks: array<SOwnerEncounterTaskParams>
        externalEncounterTasks: array<SExternalEncounterTaskParams>

    CSpawnTreeRiftSpawnedCounterMonitorInitializer:
      .extends: ISpawnTreeSpawnMonitorInitializer
      .adds:
        riftTag: name
        spawnLimit: int

    CRatClue_SpawnTreeDecorator:
      .extends: ISpawnTreeScriptedDecorator

    CCrowClue_SpawnTreeDecorator:
      .extends: ISpawnTreeScriptedDecorator

    CIdleAIEntryGenerator:
      .extends: CSpawnTreeBaseEntryGenerator
      .adds:
        commonSpawnParams: SCreatureEntrySpawnerParams
        entries: array<SIdleAEntryGeneratorParam>

    CWanderEntryGenerator:
      .extends: CSpawnTreeBaseEntryGenerator
      .adds:
        entries: array<SWanderEntryGeneratorParam>

    W3FastTravelEntity:
      .extends: CR4FastTravelEntity
      .adds:
        onAreaExit: bool
        warningTextStringKeyOverride: string
        onelinerSceneOverride: CStoryScene
        overrideSceneInput: name

    W3TreasureHuntMappinEntity:
      .extends: CR4MapPinEntity
      .adds:
        mappinSet: bool
        isDisabled: bool
        regionType: EEP2PoiType

    W3FocusModeEffectIntensity:
      .extends: none
      .adds:
        chooseEntityStrategy: EFocusModeChooseEntityStrategy
        bestEntity: CEntity
        bestDistance: float
        lastDistance: float
        bestIntensity: float
        lastIntensity: float

    W3MedallionController:
      .extends: none
      .adds:
        deactivateTimer: float
        instantIntensity: float
        isBlocked: bool
        focusModeFactor: float
        defaultDuration: float
        defaultTreshold: float
        maxTreshold: float

    W3ActorIdleTrigger:
      .extends: CEntity
      .adds:
        affectedActor: CActor
        affectedEntityTag: name

    W3AirDrainArea:
      .extends: CGameplayEntity
      .adds:
        customDrainPoints: float
        customDrainPercents: float

    W3GameZoneTrigger:
      .extends: CEntity
      .adds:
        playerEntity: CPlayer
        zoneName: name

    W3GameplayTrigger:
      .extends: CGameplayEntity

    W3BirdAttackTrigger:
      .extends: CEntity
      .adds:
        lair: CFlyingSwarmMasterLair
        affectedEntityTag: name
        attackRequestInterval: float
        affectBirdsInRange: float

    W3BlockGameplayActionsTrigger:
      .extends: CGameplayEntity
      .adds:
        blockedActions: array<EInputActionBlock>
        sourceName: name
        sheatheWeaponIfDrawn: bool

    CCenserTrigger:
      .extends: CGameplayEntity

    W3ConditionalTrigger:
      .extends: CEntity
      .adds:
        conditionClass: W3Condition
        effectorClasses: array<IPerformableAction>
        affectsPlayer: bool

    W3Condition:
      .extends: none

    W3ConditionHasEffect:
      .extends: W3Condition
      .adds:
        effect: EEffectType

    W3WitcherHouse:
      .extends: CR4MapPinEntity

    W3EffectAreaTrigger:
      .extends: CGameplayEntity
      .adds:
        effect: EEffectType
        useDefaultValuesFromXML: bool
        effectDuration: float
        customDamageValuePerSec: SAbilityAttributeValue
        immunityFact: string
        customParams: W3BuffCustomParams
        entitiesInRange: array<CActor>

    W3EffectImmunityAreaTrigger:
      .extends: CEntity
      .adds:
        effectImmunity: EEffectType

    CFairytaleWitchTrigger:
      .extends: CGameplayEntity
      .adds:
        areaNumber: int

    W3FastTravel:
      .extends: W3GameplayTrigger

    W3FlammableAreaTrigger:
      .extends: W3EffectAreaTrigger
      .adds:
        activeFor: float
        fxOnExplosion: name
        fxOnSustain: name
        explosionRange: float
        explosionDamage: SAbilityAttributeValue
        igniteFlammableAreasAfter: float
        isActive: bool
        area: CTriggerAreaComponent

    W3FocusAreaTrigger:
      .extends: CGameplayEntity
      .adds:
        rumbleIntensityModifier: float
        isDisabled: bool
        intensity: float
        isActive: bool
        linkedClues: array<EntityHandle>
        linkedCluesTags: array<name>

    W3ForestTrigger:
      .extends: CEntity
      .adds:
        isPlayerInForest: bool

    W3GenericSceneArea:
      .extends: CGameplayEntity
      .adds:
        scenes: array<genericSceneDefinition>
        forbiddenFact: string
        requiredFact: string
        npcSearchRange: float
        ignoreReplacers: bool
        includeEnemyNPCs: bool
        includeQuestNPCs: bool
        sceneDelay: float
        firstPlaySceneDelay: float
        currentSceneDelay: float

    CHorseCorrectionTrigger:
      .extends: CGameplayEntity
      .adds:
        valueOnEnter: bool
        valueOnExit: bool
        horse: CGameplayEntity
        horseComp: W3HorseComponent

    CHorseJumpTrigger:
      .extends: CGameplayEntity
      .adds:
        lastActivation: float
        triggerHeading: float
        playerHeading: float
        angleDist: float
        horse: CGameplayEntity
        horseComp: W3HorseComponent
        lastArea: CTriggerAreaComponent

    W3KillTrigger:
      .extends: CEntity
      .adds:
        postponedTillOnGroundMPAC: array<CMovingPhysicalAgentComponent>
        postponeTillOnGround: bool
        postponeTillStoppedFalling: bool
        postponeTillinWater: bool

    W3LocationArea:
      .extends: CGameplayEntity
      .adds:
        locationNameKey: name
        rewardName: name
        discovered: bool

    W3MinimapZoomScaleTrigger:
      .extends: CGameplayEntity
      .adds:
        zoomScale: float
        previousZoomScale: float

    W3MusicBandActivatorArea:
      .extends: CEntity
      .adds:
        musiciansTag: name
        interiorSoundEmitter: CEntityTemplate
        exteriorSoundEmitter: CEntityTemplate
        exterior: bool
        minimalNumberOfMusicions: int
        activeSoundEmitter: CEntity
        activeMusician: CEntity
        activeMusicians: array<CEntity>
        activeArea: CTriggerAreaComponent
        jobTreeType: EJobTreeType

    CArchesporeNoBulbArea:
      .extends: CGameplayEntity

    W3SafeModeTrigger:
      .extends: CGameplayEntity
      .adds:
        enable: bool

    W3PlayerModeTrigger:
      .extends: CGameplayEntity
      .adds:
        isEnabled: bool
        isActive: bool
        isPlayerInside: bool
        playerMode: EPlayerMode

    W3ReplacerWarningArea:
      .extends: CEntity
      .adds:
        messageKey: string
        messageInterval: float
        invertLogic: bool
        isPlayerInArea: bool

    W3DamageAreaTrigger:
      .extends: CEntity
      .adds:
        onlyAffectsPlayer: bool
        activateOnce: bool
        checkTag: bool
        isEnabled: bool
        actorTag: name
        excludedActorsTags: array<name>
        damage: float
        useDamageFromXML: name
        damageFromFXDelay: float
        areaRadius: float
        attackInterval: float
        preAttackDuration: float
        externalFXEntityTag: name
        externalFXName: name
        attackFX: name
        preAttackFX: name
        attackFXEntity: CEntityTemplate
        soundFX: string
        immunityFact: string
        damageType: ETriggeredDamageType
        action: W3DamageAction
        affectedEntity: CEntity
        fxEntity: CEntity
        activated: bool
        dummyGameplayEntity: CGameplayEntity
        victim: CActor
        externalFXEntity: CEntity
        pos: Vector

    W3SettlementTrigger:
      .extends: CR4JournalPlaceEntity
      .adds:
        bDisplaySettlementInfo: bool
        settlementName: name
        hubNameOverride: name
        lockReenterDisplayTime: float
        blockHorseTopSpeed: bool

    W3ShowDisplayNameTrigger:
      .extends: CGameplayEntity

    W3TrapTrigger:
      .extends: W3GameplayTrigger
      .adds:
        m_TrapsToActivateTag: name
        m_MaxActivation: int
        m_DeactivateOnExit: bool
        m_Enabled: bool
        m_playerOnly: bool
        m_excludedEntitiesTags: array<name>
        m_trapsToActivateByTag: array<CEntity>
        m_Activations: int
        m_EntitiesInside: int

    W3UnlimitedDivingArea:
      .extends: CEntity

    CVFXTrigger:
      .extends: CGameplayEntity
      .adds:
        fxOnEnter: name

    W3WitcherHouseArea:
      .extends: CGameplayEntity
      .adds:
        isInner: bool

    CGhost:
      .extends: CNewNPC
      .adds:
        isCastingShadows: bool
        soundEffectType: EFocusModeSoundEffectType

    CGhostComponent:
      .extends: CR4Component
      .adds:
        isCastingShadows: bool
        soundEffectType: EFocusModeSoundEffectType

    W3IllusionaryAppearance:
      .extends: W3IllusionaryObstacle
      .adds:
        realAppearance: string

    W3IllusionaryObstacle:
      .extends: CGameplayEntity
      .adds:
        focusAreaIntensity: float
        isEnabled: bool
        m_disappearanceEffectDuration: float
        m_addFactOnDispel: string
        m_addFactOnDiscovery: string
        discoveryOnelinerTag: string
        m_discoveryOneliner: EIllusionDiscoveredOneliner
        m_illusionDiscoveredEver: bool
        m_illusionDiscoveredThisSession: bool
        interactionComponent: CInteractionComponent
        meshComponent: CMeshComponent
        m_effectRange: float
        m_wasDestroyed: bool
        m_illusionSpawner: W3IllusionSpawner
        isFocusAreaActive: bool
        focusModeHighlight: EFocusModeVisibility
        i: int
        l_entitiesAround: array<CGameplayEntity>
        l_illusion: W3IllusionaryObstacle
        saveLockID: int

    W3IllusionSpawner:
      .extends: CGameplayEntity
      .adds:
        m_illusionTemplate: CEntityTemplate
        m_factOnDispelOverride: string
        l_illusion: CEntity
        spawnedIllusion: W3IllusionaryObstacle
        m_discoveryOneliner: EIllusionDiscoveredOneliner
        m_factOnDiscoveryOverride: string
        discoveryOnelinerTag: string
        spawnedObstacleTags: array<name>
        m_wasDestroyed: bool

    W3AirDrainEntity:
      .extends: CGameplayEntity
      .adds:
        customDrainPoints: float
        customDrainPercents: float
        factOnActivated: string
        factOnDeactivated: string

    W3AlchemyTable:
      .extends: CR4MapPinEntity
      .adds:
        m_tableState: W3TableState

    W3AnimationInteractionEntity:
      .extends: CR4MapPinEntity
      .adds:
        animationForAllInteractions: bool
        interactionName: string
        holsterWeaponAtTheBeginning: bool
        interactionAnim: EPlayerExplorationAction
        slotAnimName: name
        interactionAnimTime: float
        desiredPlayerToEntityDistance: float
        matchPlayerHeadingWithHeadingOfTheEntity: bool
        attachThisObjectOnAnimEvent: bool
        attachSlotName: name
        attachAnimName: name
        detachAnimName: name
        isPlayingInteractionAnim: bool
        objectAttached: bool
        objectCachedPos: Vector
        objectCachedRot: EulerAngles

    W3ArmorStand:
      .extends: W3HouseDecorationBase
      .adds:
        m_mountAllItems: bool

    W3BeehiveStandingEntity:
      .extends: W3AnimatedContainer
      .adds:
        damageVal: SAbilityAttributeValue
        actorsInRange: array<CActor>
        wasInteracted: bool

    W3BeeSwarm:
      .extends: CGameplayEntity
      .adds:
        damageVal: SAbilityAttributeValue
        destroyEntAfter: float
        velocity: float
        bIsEnabled: bool
        AIReactionRange: float
        ignoreNPCsFriendlyToPlayer: bool
        maxChaseDistance: float
        desiredTargetTag: name
        excludedEntitiesTags: array<name>
        factOnDestruction: string
        originEntity: CGameplayEntity
        originPoint: Vector
        victims: array<SSwarmVictim>
        buffParams: SCustomEffectParams
        targets: array<CGameplayEntity>
        activeDistanceSquared: float
        PLAYER_PRESENCE_CHECK_DISTANCE: float
        PRESENCE_CHECK_DT: float
        TARGETS_CHECK_DT: float

    CBoatRacingGateEntity:
      .extends: CGameplayEntity
      .adds:
        nextGate: EntityHandle
        factOnReaching: string
        nextGateEntity: CBoatRacingGateEntity
        isActive: bool
        isReached: bool

    W3Bookshelf:
      .extends: W3SmartObject
      .adds:
        m_booksRange: int
        m_appearances: array<name>

    W3CriticalStateTrap:
      .extends: CInteractiveEntity
      .adds:
        effectOnSpawn: name
        effectToPlayOnActivation: name
        durationFrom: int
        durationTo: int
        areasActive: bool
        movementAdjustorActive: bool
        params: SCustomEffectParams
        movementAdjustor: CMovementAdjustor
        ticket: SMovementAdjustmentRequestTicket
        ticketRot: SMovementAdjustmentRequestTicket
        lifeTime: int
        l_effectDuration: int
        startTimestamp: float
        enterTimestamp: float

    W3Door:
      .extends: W3LockableEntity
      .adds:
        rotDir: int
        initiallyOpened: bool
        factOnPlayerDoorOpen: name
        isOpened: bool

    EP1Chandelier:
      .extends: CGameplayEntity
      .adds:
        m_fallSpeed: float
        m_damagePercent: float
        m_fallDelay: float
        m_floorLevel: float
        m_radius: float
        m_height: float
        m_falling: bool
        m_currTime: float

    W3FireSourceLifeRegen:
      .extends: W3FireSource
      .adds:
        healthRegenOn: bool

    CGateEntity:
      .extends: W3LockableEntity
      .adds:
        currState: name
        speedModifier: float
        initiallyOpened: bool
        startSound: name
        stopSound: name
        runTime: float

    W3HouseDecorationBase:
      .extends: W3Container
      .adds:
        m_popupData: W3ItemSelectionPopupData
        m_itemSelectionTagList: array<name>
        m_itemSelectionForbiddenTagList: array<name>
        m_itemSelectionMode: EItemSelectionPopupMode
        m_itemSelectionCategories: array<name>
        m_acceptQuestItems: bool
        m_decorationEnabled: bool
        m_noItemMessageStringKey: name

    W3HouseGenericDecoration:
      .extends: W3HouseDecorationBase
      .adds:
        m_itemFilterTag: name
        m_decorationItems: array<SHouseDecorationItemData>
        m_currentApperance: name

    W3IceWall:
      .extends: CGameplayEntity

    W3InteractiveQuestEntity:
      .extends: CInteractiveEntity

    CMagicBombEntity:
      .extends: CGameplayEntity
      .adds:
        damageRadius: float
        damageVal: float
        settlingTime: float
        entitiesInRange: array<CGameplayEntity>
        i: int
        damage: W3DamageAction
        victim: CActor

    CPhilippaAttractorTrigger:
      .extends: CGameplayEntity
      .adds:
        actorTagToSendInfo: name
        triggeredByPlayer: bool
        triggeredByBolts: bool
        triggeredByBombs: bool
        actor: CActor
        lastActivation: float

    W3MagicLampEntity:
      .extends: CInteractiveEntity

    CMagicMineEntity:
      .extends: CInteractiveEntity
      .adds:
        tellTime: float
        damageVal: float
        boatDamageVal: float
        damageRadius: float
        mineTrigger: CTriggerAreaComponent

    CMeteoriteStormEntity:
      .extends: CGameplayEntity
      .adds:
        resourceName: name
        timeBetweenSpawn: float
        minDistFromTarget: float
        maxDistFromTarget: float
        minDistFromEachOther: float
        victim: CActor
        entityTemplate: CEntityTemplate

    CMonsterNestEntity:
      .extends: CInteractiveEntity
      .adds:
        bombActivators: array<name>
        lootOnNestDestroyed: CEntityTemplate
        interactionOnly: bool
        desiredPlayerToEntityDistance: float
        matchPlayerHeadingWithHeadingOfTheEntity: bool
        settingExplosivesTime: float
        shouldPlayFXOnExplosion: bool
        appearanceChangeDelayAfterExplosion: float
        shouldDealDamageOnExplosion: bool
        factSetAfterFindingNest: string
        factSetAfterSuccessfulDestruction: string
        linkingMode: bool
        linkedEncounterHandle: EntityHandle
        linkedEncounterTag: name
        setDestructionFactImmediately: bool
        expOnNestDestroyed: int
        bonusExpOnBossKilled: int
        addExpOnlyOnce: bool
        nestUpdateDefintion: SMonsterNestUpdateDefinition
        monsterNestType: ENestType
        regionType: EEP2PoiType
        entityType: EMonsterNestType
        explodeAfter: float
        nestBurnedAfter: float
        playerInventory: CInventoryComponent
        usedBomb: SItemUniqueId
        encounter: CEncounter
        nestFound: bool
        messageTimestamp: float
        bossKilled: bool
        container: W3Container
        bossKilledCounter: int
        expWasAdded: bool
        bombEntity: CEntity
        bombEntityTemplate: CEntityTemplate
        bombName: name
        actionBlockingExceptions: array<EInputActionBlock>
        saveLockIdx: int
        voicesetTime: float
        voicesetPlayed: bool
        canPlayVset: bool
        l_enginetime: float
        airDmg: bool
        wasExploded: bool

    W3MutagenDismantlingTable:
      .extends: W3AlchemyTable

    W3NewDoor:
      .extends: W3LockableEntity
      .adds:
        openAngle: float
        initiallyOpened: bool
        factOnPlayerDoorOpen: name
        openedByHorse: bool
        updateDuration: float
        updateTimeLeft: float
        playerInsideTrapdoorTrigger: bool
        enableDeniedAreaInCombat: bool

    CMajorPlaceOfPowerEntity:
      .extends: CInteractiveEntity
      .adds:
        buffType: EShrineBuffs
        buffUniqueName: string
        fxOnIdle: name
        fxOnChannel: name
        fxOnSuccess: name
        channelingTime: float
        buffDuration: float
        buffCooldown: GameTime
        skillPointGranted: bool
        isRecharging: bool
        lastUsed: GameTime
        isPlaceOfPowerInIdle: bool
        voicesetTimestamp: GameTime
        initialVoicesetPlayed: bool

    CPopsGasEntity:
      .extends: CInteractiveEntity
      .adds:
        restorationTime: float
        settlingTime: float
        fxOnSpawn: name
        immunityFact: string
        i: int
        settled: bool
        victim: CActor
        victims: array<CActor>
        poisonArea: CTriggerAreaComponent
        buffParams: SCustomEffectParams

    W3ReactToBeingHitEntity:
      .extends: CGameplayEntity
      .adds:
        reactsToSwords: bool
        reactsToBolts: bool
        deactivateOnHit: bool
        dealDamage: bool
        debuffType: EEffectType
        debuffDuration: float
        damageTypeName: name
        killOnHpBelowPerc: float
        setBehVarOnKill: name
        behVarValue: float
        gameplayEventOnAttacker: name
        effectOnActivation: name
        durationEffect: name
        effectOnHit: name
        effectOnHitVictim: name
        activeDuration: float
        active: bool
        attributeName: name

    W3ItemRepairObject:
      .extends: CR4MapPinEntity
      .adds:
        repairSword: bool
        repairArmor: bool
        chargesArmor: int
        chargesWeapon: int

    CRiftEntity:
      .extends: CInteractiveEntity
      .adds:
        linkingMode: bool
        controlledEncounter: EntityHandle
        controlledEncounterTag: name
        activationDelay: float
        closeAfter: float
        canBeDisabled: bool
        damageVal: SAbilityAttributeValue
        factSetAfterRiftWasDisabled: string
        isIntact: bool
        currState: name
        encounter: CEncounter
        coldArea: CTriggerAreaComponent
        entitiesInRange: array<CActor>
        isEncounterEnabled: bool
        buffParams: SCustomEffectParams
        spawnCounter: int
        encounterSpawnLimit: int
        collisionEntityTemplate: CEntityTemplate
        collisionEntity: CEntity

    W3OnSpawnPortal:
      .extends: CEntity
      .adds:
        fxName: name
        fxTimeout: float
        creatureAppearAfter: float
        spawnedActor: CActor

    W3RootsEntrance:
      .extends: CGameplayEntity
      .adds:
        isOpened: bool

    CSignReactiveEntity:
      .extends: W3MonsterClue
      .adds:
        factOnSignCast: string
        igni: bool
        aard: bool
        clueActionWhenDestroyed: EClueOperation
        igniteOnInteraction: bool
        destroyingTimeout: float
        destroyedEffectsTimeout: float
        destroyingEffectName: name
        destroyedEffectName: name
        isDestroyed: bool
        clueActionArray: array<EClueOperation>
        currentAppearance: string
        interactionComponents: array<CComponent>
        i: int

    CSkullPileEntity:
      .extends: CGameplayEntity
      .adds:
        factName: string
        tagToCollideWith: name
        intact: bool
        destructionComp: CDestructionSystemComponent

    W3SmellyCheese:
      .extends: W3AirDrainEntity
      .adds:
        deactivatedByAard: bool
        smellEffectName: name
        aardedEffectName: name
        reactivateTimer: float
        deactivated: bool

    W3SnowMound:
      .extends: CInteractiveEntity
      .adds:
        TagRemovedAfterMelt: name
        isMelted: bool

    W3Stables:
      .extends: CR4MapPinEntity

    W3SwordStand:
      .extends: W3HouseDecorationBase

    CTeleportEntity:
      .extends: CInteractiveEntity
      .adds:
        keyItemName: name
        removeKeyOnUse: bool
        linkingMode: bool
        keepBlackscreen: bool
        pairedTeleport: EntityHandle
        pairedNodeTag: name
        oneWayTeleport: bool
        activationTime: float
        factOnActivate: string
        factOnTeleport: string
        factOnActivateValidFor: int
        factOnTeleportValidFor: int
        isActivated: bool
        destinationNode: CNode
        currentlyTeleporting: bool

    CToadAcidPool:
      .extends: CInteractiveEntity
      .adds:
        poisonDamage: SAbilityAttributeValue
        fxOnSpawn: name
        immunityFact: string
        despawnTimer: float
        damageVal: float
        explosionRange: float
        destroyTimer: float
        settled: bool
        victim: CActor
        victims: array<CActor>
        poisonArea: CTriggerAreaComponent
        buffParams: SCustomEffectParams
        damage: W3DamageAction
        entitiesInRange: array<CGameplayEntity>
        targetEntity: CActor
        fxStartTime: float
        hasExploded: bool

    W3LeaderboardCustom:
      .extends: W3Poster
      .adds:
        m_competitors: array<SLeaderBoardData>
        m_pointSymbolStringKey: string
        m_displayPointsNumerically: bool
        m_bottom_padding: int
        m_left_padding: int

    W3WeatherShrine:
      .extends: CGameplayEntity
      .adds:
        weatherBlendTime: float
        cooldown: float
        prayerForSunAcceptedFX: name
        prayerForStormAcceptedFX: name
        price: int

    W3WitcherBed:
      .extends: W3AnimationInteractionEntity
      .adds:
        m_wasUsed: bool
        m_wereItemsRefilled: bool
        m_bedSaveLock: int
        m_bedLevel: int
        m_handsIkActive: bool

    W3OilBarrelDestroyedEvent:
      .extends: CScriptedAction

    COilBarrelEntity:
      .extends: CGameplayEntity
      .adds:
        fx_onInteraction: name
        damageRadius: float
        damageVal: float
        explodeAfter: float
        destroyEntAfter: float
        randomizeTime: bool
        onFireDamagePerSec: float
        isSetOnFire: bool
        isExploding: bool
        onFireDamageArea: CTriggerAreaComponent
        entitiesInOnFireArea: array<CGameplayEntity>

    W3SmartObject:
      .extends: CR4MapPinEntity
      .adds:
        startAnim: name
        loopAnims: array<name>
        stopAnim: name
        canBeInterruptedByInput: bool
        m_currentUser: CActor
        m_saveLockID: int
        possibleItemSlots: array<name>

    W3EffectItem:
      .extends: CItemEntity
      .adds:
        effectName: name

    W3UsableItem:
      .extends: CItemEntity
      .adds:
        itemType: EUsableItemType
        blockedActions: array<EInputActionBlock>
        wasOnHiddenCalled: bool

    W3LightSource:
      .extends: W3UsableItem
      .adds:
        worldName: String

    W3ShieldUsableItem:
      .extends: W3UsableItem
      .adds:
        factAddedOnUse: string
        factValue: int
        factTimeValid: int
        removeFactOnHide: bool
        i: int

    W3QuestUsableItem:
      .extends: W3UsableItem
      .adds:
        factAddedOnUse: string
        factValue: int
        factTimeValid: int
        removeFactOnHide: bool

    W3MeteorItem:
      .extends: W3QuestUsableItem
      .adds:
        collisionGroups: array<name>
        meteorResourceName: name
        meteorEntityTemplate: CEntityTemplate

    W3EyeOfLoki:
      .extends: W3QuestUsableItem
      .adds:
        environment: name
        effect: CName
        activeWhenFact: CName
        soundOnStart: name
        soundOnStop: name
        envID: int
        active: bool

    W3MagicOilLamp:
      .extends: W3QuestUsableItem

    W3Potestaquisitor:
      .extends: W3QuestUsableItem
      .adds:
        detectableTag: name
        detectableRange: float
        closestRange: float
        potestaquisitorFact: string
        soundEffectType: EFocusModeSoundEffectType
        effect: name
        registeredAnomalies: array<CGameplayEntity>
        previousClosestAnomaly: CGameplayEntity

    W3HornvalHorn:
      .extends: W3QuestUsableItem
      .adds:
        range: float
        duration: float

    W3FiendLure:
      .extends: W3QuestUsableItem
      .adds:
        range: float
        duration: float
        cloudEntity: CEntityTemplate

    W3AardObstacle:
      .extends: CInteractiveEntity

    W3BuffImmunityEntity:
      .extends: CGameplayEntity
      .adds:
        immunities: array<EEffectType>
        range: float
        isActive: bool
        actorsInRange: array<CActor>

    W3MagicBubbleEntity:
      .extends: W3BuffImmunityEntity
      .adds:
        activeFxName: name
        damper: VectorSpringDamper

    W3CombatDamageEntity:
      .extends: CInteractiveEntity
      .adds:
        victims: array<CActor>
        victim: CActor
        isActive: bool

    W3FlammableDamageEntity:
      .extends: CInteractiveEntity
      .adds:
        explosionEntity: CEntityTemplate
        spawnedExplosion: CDamageAreaEntity
        victim: CActor
        pos: Vector

    CDamageAreaEntity:
      .extends: CInteractiveEntity
      .adds:
        owner: CActor
        buff: EEffectType
        buffDuration: float
        customDamageValuePerSec: SAbilityAttributeValue
        effectOnSpawn: name
        activeFor: float
        stopSpawnEffectDelay: float
        dealDamagePerc: int
        range: float
        isActive: bool
        actorsInRange: array<CActor>
        buffParams: SCustomEffectParams

    W3Bridge:
      .extends: W3DestroyableTerrain
      .adds:
        m_currentFxID: int
        entryTime: float
        timerInterval: float
        rot: EulerAngles

    W3EntitySpawner:
      .extends: W3UsableEntity
      .adds:
        entityTemplate: CEntityTemplate
        appearanceAfterSpawn: name
        autoSpawn: bool
        spawnDelay: float
        numberOfUses: int
        spawnNearPlayer: bool
        avoidNodeWithTag: name

    W3FloeEntity:
      .extends: W3DestroyableTerrain
      .adds:
        m_currentFxID: int
        entryTime: float
        timerInterval: float
        rot: EulerAngles

    W3IgniObstacleEntity:
      .extends: CInteractiveEntity
      .adds:
        staticIgniObstacle: CComponent
        iceWallStage1: CDrawableComponent
        iceWallStage2: CDrawableComponent
        iceWallStage2Melted: CDrawableComponent
        iceWallStage3: CDrawableComponent
        iceWallStage3Melted: CDrawableComponent

    CInteractiveEntity:
      .extends: CR4MapPinEntity
      .adds:
        bIsEnabled: bool
        bIsActive: bool

    CUsableEntity:
      .extends: CInteractiveEntity
      .adds:
        bCanBeUsed: bool

    CScheduledUsableEntity:
      .extends: CUsableEntity
      .adds:
        bUseSwitchingSchedule: bool
        switchOnHour: int
        switchOffHour: int

    W3IrisPainting:
      .extends: CGameplayEntity
      .adds:
        portalHP: int
        m_PortalCurrentHP: int
        m_IsOpen: bool
        m_IsReady: bool
        m_ChargingTotalDuration: float
        m_ChargingStepDuration: float
        m_LocktagsOn: bool

    CLightEntitySimple:
      .extends: CScheduledUsableEntity
      .adds:
        isOn: bool

    CLightEntitySimpleWithEffectImmunity:
      .extends: CLightEntitySimple
      .adds:
        effectImmunity: EEffectType
        duration: float
        areaComponent: CTriggerAreaComponent

    W3LightEntityDamaging:
      .extends: CLightEntitySimple
      .adds:
        hitReactionType: EHitReactionType
        damagePerSec: float
        appliesBurning: bool
        area: CTriggerAreaComponent
        entitiesInRange: array<CGameplayEntity>
        entitiesInRangeEnterTime: array<EngineTime>
        buffDamageVal: SAbilityAttributeValue
        damageDealingEnabled: bool
        buffParams: SCustomEffectParams
        spawned: bool
        FIRE_DAMAGE_FX: name

    W3MonsterElementalArm:
      .extends: CGameplayEntity
      .adds:
        physcialComponent: CComponent
        victims: array<CActor>
        victim: CActor
        isActive: bool
        action: W3DamageAction
        owner: CActor

    W3UsableEntity:
      .extends: CGameplayEntity

    W3DestroyableTerrain:
      .extends: CInteractiveEntity
      .adds:
        m_destroyableElements: array<array<CScriptedDestroyableComponent>>
        m_piecesIdToSplit: array<int>
        m_player: CPlayer
        m_activated: bool
        m_componentName: string
        m_randNumber: int
        tickTime: float
        tickInterval: float
        currRandNumbId: int
        currRandNumbTime: float
        m_numOfPiecesToDestroy: int
        m_timeBetweenRandomDestroyMin: int
        m_timeBetweenRandomDestroyMax: int

    Crossbow:
      .extends: RangedWeapon
      .adds:
        shotCount: int
        shotCountLimit: int
        reloadAtStartComplete: bool

    W3DynamicBlood:
      .extends: W3MonsterClue
      .adds:
        lifetime: float

    W3Blood:
      .extends: CEntity
      .adds:
        lifetime: float

    W3AardEntity:
      .extends: W3SignEntity
      .adds:
        aspects: array<SAardAspect>
        effects: array<SAardEffects>
        waterTestOffsetZ: float
        waterTestDistancePerc: float
        projectileCollision: array<name>
        processThrow_alternateCast: bool

    W3AxiiEntity:
      .extends: W3SignEntity
      .adds:
        effects: array<SAxiiEffects>
        projTemplate: CEntityTemplate
        distance: float
        projSpeed: float
        targets: array<CActor>
        orientationTarget: CActor

    W3IgniEntity:
      .extends: W3SignEntity
      .adds:
        collisionFxEntity: CEntity
        rangeFxEntity: CEntity
        channelBurnTestDT: array<SIgniChannelDT>
        lastCollisionFxPos: Vector
        CHANNELLING_BURN_TEST_FREQUENCY: float
        aspects: array<SIgniAspect>
        effects: array<SIgniEffects>
        forestTrigger: W3ForestTrigger
        projectileCollision: array<name>
        hitEntities: array<CGameplayEntity>
        lastFxSpawnTime: float

    W3QuenEntity:
      .extends: W3SignEntity
      .adds:
        effects: array<SQuenEffects>
        hitEntityTemplate: CEntityTemplate
        shieldDuration: float
        shieldHealth: float
        initialShieldHealth: float
        dischargePercent: float
        ownerBoneIndex: int
        blockedAllDamage: bool
        shieldStartTime: EngineTime
        hitEntityTimestamps: array<EngineTime>
        MIN_HIT_ENTITY_SPAWN_DELAY: float
        hitDoTEntities: array<W3VisualFx>
        showForceFinishedFX: bool
        freeFromBearSetBonus: bool

    W3SignEntity:
      .extends: CGameplayEntity
      .adds:
        owner: W3SignOwner
        attachedTo: CEntity
        boneIndex: int
        fireMode: int
        skillEnum: ESkill
        signType: ESignType
        actionBuffs: array<SEffectInfo>
        friendlyCastEffect: name
        cachedCost: float
        usedFocus: bool

    W3SignOwner:
      .extends: none
      .adds:
        actor: CActor

    W3SignOwnerBTTaskCastSign:
      .extends: W3SignOwner
      .adds:
        btTask: CBTTaskCastSign

    W3SignOwnerPlayer:
      .extends: W3SignOwner
      .adds:
        player: W3PlayerWitcher

    W3YrdenEntity:
      .extends: W3SignEntity
      .adds:
        effects: array<SYrdenEffects>
        projTemplate: CEntityTemplate
        projDestroyFxEntTemplate: CEntityTemplate
        runeTemplates: array<CEntityTemplate>
        validTargetsInArea: array<CActor>
        allActorsInArea: array<CActor>
        flyersInArea: array<CNewNPC>
        trapDuration: float
        charges: int
        isPlayerInside: bool
        baseModeRange: float
        notFromPlayerCast: bool
        fxEntities: array<CEntity>

    ThrowingCamera:
      .extends: ICustomCameraScriptedPivotPositionController

    W3EnvironmentThrowable:
      .extends: CGameplayEntity
      .adds:
        projectileTemplate: CEntityTemplate

    CThrowable:
      .extends: CProjectileTrajectory
      .adds:
        ownerHandle: EntityHandle
        wasThrown: bool
        itemId: SItemUniqueId
        isFromAimThrow: bool

    W3Dimeritium:
      .extends: W3Petard
      .adds:
        affectedFX: name
        affectedFXCluster: name
        disableTimerCalled: bool
        DISABLED_FX_CHECK_DELAY: float
        disabledFxDT: float

    W3DragonsDream:
      .extends: W3Petard
      .adds:
        gasEntityTemplate: CEntityTemplate
        gasEntity: W3ToxicCloud
        burningChance: float

    W3Petard:
      .extends: CThrowable
      .adds:
        cameraShakeStrMin: float
        cameraShakeStrMax: float
        cameraShakeRange: float
        hitReactionType: EHitReactionType
        noLoopEffectIfHitWater: bool
        dismemberOnKill: bool
        componentsEnabledOnLoop: array<name>
        friendlyFire: bool
        impactParams: SPetardParams
        loopParams: SPetardParams
        dodgeable: bool
        audioImpactName: name
        ignoreBombSkills: bool
        enableTrailFX: bool
        alignToNormal: bool
        FX_TRAIL: name
        FX_CLUSTER: name
        itemName: name
        targetPos: Vector
        isProximity: bool
        isInWater: bool
        isInDeepWater: bool
        isStuck: bool
        isCluster: bool
        justPlayingFXs: array<name>
        loopDuration: float
        snapCollisionGroupNames: array<name>
        stopCollisions: bool
        previousTargets: array<CGameplayEntity>
        targetsSinceLastCheck: array<CGameplayEntity>
        wasInTutorialTrigger: bool
        decalRemainingTimes: array<SPetardShownDecals>
        impactNormal: Vector
        hasImpactFireDamage: bool
        hasImpactFrostDamage: bool
        hasLoopFireDamage: bool
        hasLoopFrostDamage: bool

    W3Samum:
      .extends: W3Petard

    W3WhiteFrost:
      .extends: W3Petard
      .adds:
        waveProjectileTemplate: CEntityTemplate
        freezeNPCFadeInTime: float
        waveSpeedModifier: float
        HAX_waveRadius: float
        collisionMask: array<name>
        shaderSpeed: float
        totalTime: float
        collidedEntities: array<CGameplayEntity>
        waveProjectile: W3WhiteFrostWaveProjectile

    W3WhiteFrostWaveProjectile:
      .extends: CProjectileTrajectory
      .adds:
        frostEntity: W3WhiteFrost

    W3MagicalThing:
      .extends: CProjectileTrajectory
      .adds:
        dmg: float

    W3PhysicalThing:
      .extends: CProjectileTrajectory
      .adds:
        dmg: float
        big: bool

    W3LevelManager:
      .extends: none
      .adds:
        owner: W3PlayerWitcher
        levelDefinitions: array<SLevelDefinition>
        level: int
        points: array<SSpendablePoints>
        lastCustomLevel: int

    W3POI_BanditCampEntity:
      .extends: CR4MapPinEntity
      .adds:
        regionType: EEP2PoiType

    W3POI_BanditCampfireEntity:
      .extends: CR4MapPinEntity

    W3POI_BossAndTreasureEntity:
      .extends: CR4MapPinEntity
      .adds:
        regionType: EEP2PoiType

    W3POI_ContrabandEntity:
      .extends: CR4MapPinEntity

    W3POI_ContrabandShipEntity:
      .extends: CR4MapPinEntity

    W3POI_DungeonCrawlEntity:
      .extends: CR4MapPinEntity

    W3POI_HideoutEntity:
      .extends: CR4MapPinEntity

    W3POI_KnightErrantEntity:
      .extends: CR4MapPinEntity

    W3POI_PlegmundEntity:
      .extends: CR4MapPinEntity

    W3POI_RescuingTownEntity:
      .extends: CR4MapPinEntity
      .adds:
        regionType: EEP2PoiType

    W3POI_SignalingStakeEntity:
      .extends: CR4MapPinEntity

    W3POI_SpoilsOfWarEntity:
      .extends: CR4MapPinEntity

    W3POI_WineContractEntity:
      .extends: CR4MapPinEntity

    W3PhysicalDamageMechanism:
      .extends: CGameplayEntity
      .adds:
        dmgValue: float
        hitReactionType: EHitReactionType
        reactivationTimer: float
        animName: name
        shouldRewind: bool
        isActive: bool
        isMoving: bool

    W3RiddleNode:
      .extends: CGameplayEntity
      .adds:
        positions: array<SRiddleNodePositionDef>
        riddleServerTag: name
        factOnPositionValid: string
        useFocusModeHelper: bool
        currentPos: int
        rewind: bool
        currentPairedRiddleNodeID: int
        currentPairedRiddleNodesIDS: array<int>
        riddleServer: W3RiddleServer
        wasAddedToServer: bool
        lastPosID: int
        isDisabled: bool
        isEffectOn: bool
        isOnValidPosition: bool
        initializeServerCounter: int

    W3RiddleServer:
      .extends: CGameplayEntity
      .adds:
        OnGoodCombinationEvents: array<W3SwitchEvent>
        pairedNodes: array<EntityHandle>
        riddleNodesNumber: int
        isDisabled: bool
        nodesAtValidPosNumber: int

    W3Switch:
      .extends: CGameplayEntity
      .adds:
        isInitiallyEnabled: bool
        isInitiallyLocked: bool
        isInitiallyOn: bool
        maxUseCount: int
        skipEventsAtBeginning: bool
        whenOnEvents: array<W3SwitchEvent>
        whenOffEvents: array<W3SwitchEvent>
        whenSwitchedEvents: array<W3SwitchEvent>
        currentState: ESwitchState
        enabled: bool
        locked: bool
        totalUseCount: int
        skipEvents: bool
        virtualSwitchesLinkedHandle: array<EntityHandle>
        lastActivatorHandle: EntityHandle
        restoreUsableItemL: bool
        BEH_ON: float
        BEH_OFF: float
        BEH_ON_FROM_OFF: float
        BEH_OFF_FROM_ON: float

    W3InteractionSwitch:
      .extends: W3PhysicalSwitch
      .adds:
        isActivatedByPlayer: bool
        focusModeHighlight: EFocusModeVisibility
        interactionActiveInState: ESwitchState

    W3PhysicalSwitch:
      .extends: W3Switch
      .adds:
        switchOnAnimationType: PhysicalSwitchAnimationType
        switchOffAnimationType: PhysicalSwitchAnimationType
        showActorAnimation: bool

    W3PressureSwitch:
      .extends: W3PhysicalSwitch
      .adds:
        autoSwitchOnLeave: bool
        entities: array<CEntity>
        delayedTurnOffEntity: CEntity
        delayedTurnOnEntity: CEntity

    W3TripwireSwitch:
      .extends: W3PhysicalSwitch
      .adds:
        autoSwitchOnLeave: bool
        entities: array<CEntity>
        delayedTurnOffEntity: CEntity
        delayedTurnOnEntity: CEntity
        connectedTrapClueTag: name

    W3VirtualSwitch:
      .extends: W3Switch
      .adds:
        requiredSwitches: array<SRequiredSwitch>

    W3VirtualSwitch_Combination:
      .extends: W3VirtualSwitch

    W3VirtualSwitch_Sequence:
      .extends: W3VirtualSwitch
      .adds:
        nextSwitchIndex: int

    W3SwitchEvent:
      .extends: CScriptedAction

    W3SE_AddBuff:
      .extends: W3SwitchEvent
      .adds:
        applyEffect: EEffectType
        useDefaultValuesFromXML: bool
        effectDuration: float
        customDamageValuePerSec: SAbilityAttributeValue

    W3SE_CustomScript:
      .extends: W3SwitchEvent
      .adds:
        scriptID: string

    W3SE_EnableTreasureHuntMappin:
      .extends: W3SwitchEvent
      .adds:
        mappinEntityTag: name
        enable: bool
        mappinEntity: W3TreasureHuntMappinEntity
        commonMapManager: CCommonMapManager

    W3SE_Encounter:
      .extends: W3SwitchEvent
      .adds:
        encounterTag: name
        operation: EEncounterOperation

    W3SE_Fact:
      .extends: W3SwitchEvent
      .adds:
        fact: string
        operation: EFactOperation
        value: int
        validFor: int

    W3SE_ManageClue:
      .extends: W3SwitchEvent
      .adds:
        clueHandle: array<EntityHandle>
        clueTag: name
        operations: array<EClueOperation>
        myTags: array<name>

    W3SE_ManageContainer:
      .extends: W3SwitchEvent
      .adds:
        containersTag: name
        containerEnabled: bool

    W3SE_ManageDoor:
      .extends: W3SwitchEvent
      .adds:
        doorTag: name
        operations: array<EDoorOperation>
        force: bool

    W3SE_ManageFocusArea:
      .extends: W3SwitchEvent
      .adds:
        focusAreaTag: name
        enable: bool
        focuAreaEntity: W3FocusAreaTrigger

    W3SE_ManageGate:
      .extends: W3SwitchEvent
      .adds:
        entityTag: name
        open: bool
        speedModifier: float

    W3SE_ManageNewDoor:
      .extends: W3SwitchEvent
      .adds:
        doorTag: name
        operations: array<ENewDoorOperation>
        force: bool

    W3SE_ManageOilBarrel:
      .extends: W3SwitchEvent
      .adds:
        oilBarrelTag: name
        operations: array<EOilBarrelOperation>

    W3SE_ManagePchysicalDamageMechanism:
      .extends: W3SwitchEvent
      .adds:
        mechanismHandle: array<EntityHandle>
        mechanismTag: name
        operations: array<EPhysicalDamagemechanismOperation>

    W3SE_ManageSwitch:
      .extends: W3SwitchEvent
      .adds:
        switchTag: name
        operations: array<ESwitchOperation>
        force: bool
        skipEvents: bool

    W3SE_ManageToxicCloud:
      .extends: W3SwitchEvent
      .adds:
        entityTag: name
        operations: array<EToxicCloudOperation>

    W3SE_ManageTrap:
      .extends: W3SwitchEvent
      .adds:
        trapHandle: array<EntityHandle>
        trapTag: name
        operations: array<ETrapOperation>

    W3SE_PerformableAction:
      .extends: W3SwitchEvent
      .adds:
        performableAction: IPerformableAction

    W3SE_PlayAnimationOnEntity:
      .extends: W3SwitchEvent
      .adds:
        entityTag: name
        animationName: name
        operation: EPropertyAnimationOperation
        playCount: int
        playLengthScale: float
        playMode: EPropertyCurveMode
        rewindTime: float

    W3SE_PlayEffectOnActivator:
      .extends: W3SwitchEvent
      .adds:
        effectName: name
        play: bool

    W3SE_PlayEffectOnEntity:
      .extends: W3SwitchEvent
      .adds:
        entityTag: name
        effectName: name
        play: bool

    W3SE_PlayEffectOnSwitch:
      .extends: W3SwitchEvent
      .adds:
        effectName: name
        play: bool

    W3SE_SetAppearanceOnEntity:
      .extends: W3SwitchEvent
      .adds:
        entityHandle: EntityHandle
        appearanceName: string
        entity: CEntity

    W3SE_SpawnEntity:
      .extends: W3SwitchEvent
      .adds:
        entityTemplate: CEntityTemplate
        positionOffset: Vector
        randomOffset: Vector
        lifeTime: float
        maxEntitiesAtATime: int
        minDelayBetweenSpawns: float
        spawnSnapToGround: bool
        m_spawnedEntities: array<CEntity>

    W3SE_UseRiddleNode:
      .extends: W3SwitchEvent
      .adds:
        riddleNodeTag: name

    W3MedallionFX:
      .extends: CEntity
      .adds:
        scaleVector: Vector
        medallionScaleRate: float
        effectDuration: float

    W3CollectiblePlaces:
      .extends: CGameplayEntity
      .adds:
        xpPoints: int
        wasDiscovered: bool
        allTags: array<name>

    W3MicroQuestActivator:
      .extends: CGameplayEntity
      .adds:
        microQuestEntries: array<EncounterEntryDetails>
        selectedEntriesList: array<EncounterEntryDetails>
        chosenMicroQuestTag: name
        isPlayerInArea: bool

    BTTaskChangeSummonedEntityMovement:
      .extends: IBehTreeTask
      .adds:
        speed: float
        stopDistance: float
        fallBackSpeed: float
        normalSpeed: float
        verticalSpeed: float
        speedOscilation: SRangeF
        normalSpeedOscilation: SRangeF
        verticalOscilation: SRangeF
        speedOscilationSpeed: float
        normalSpeedOscilationSpeed: float
        verticalOscilationSpeed: float
        m_summonerCmp: W3SummonerComponent

    BTTaskChangeSummonedEntityMovementDef:
      .extends: IBehTreeTaskDefinition
      .adds:
        speed: float
        stopDistance: float
        fallBackSpeed: float
        normalSpeed: float
        verticalSpeed: float
        speedOscilation: SRangeF
        normalSpeedOscilation: SRangeF
        verticalOscilation: SRangeF
        speedOscilationSpeed: float
        normalSpeedOscilationSpeed: float
        verticalOscilationSpeed: float

    CHeartMiniboss:
      .extends: CNewNPC
      .adds:
        phasesCount: int
        currentPhase: int
        essenceChunks: int
        essenceChunkValue: float
        canHit: bool
        valuesInitialised: bool
        factSetAfterDeath: string
        factSetInOpenedPhase: string
        factSetInArmoredPhase: string

    W3SummonedFlies:
      .extends: CGameplayEntity
      .adds:
        fleeDuration: float
        lookForTarget: bool
        detectionDistance: float
        pursueDistance: float
        ignoreTag: name
        m_Target: CNode
        m_StartPos: Vector
        m_SummonedCmp: W3SummonedEntityComponent
        m_SlideCmp: W3SlideToTargetComponent

    W3WitchesCage:
      .extends: CEntity

    W3ArachasEggCustom:
      .extends: W3MonsterClue
      .adds:
        morphTimeIgni: float
        morphTimeAard: float
        burnoutTime: float
        destroyed: bool
        igniReactionEffect: name
        aardReactionEffect: name
        onDestroyedFact: array<name>
        morphManager: CMorphedMeshManagerComponent
        morphTime: float
        allowFactAdding: bool
        APPEARANCE_INTACT: name
        APPEARANCE_DESTROYED: name

    W3ClueCorpse:
      .extends: W3MonsterClue
      .adds:
        woundName: name

    W3DestroyableClue:
      .extends: W3MonsterClue
      .adds:
        destroyable: bool
        reactsToAard: bool
        reactsToIgni: bool
        reactsToSwords: bool
        reactsToBolts: bool
        reactsToBombs: bool
        defaultEffect: name
        effectOnReaction: name
        effectOnBurning: name
        effectInstant: bool
        reactionDelay: float
        onDestroyedFact: array<string>
        performDestructionSystemCheck: bool
        isBurning: bool
        destroyed: bool

    W3MonsterHuntInvestigationArea:
      .extends: CGameplayEntity
      .adds:
        enabled: bool
        investigationMusicStartEvent: string
        investigationMusicStopEvent: string
        requiredTrackedQuest: name
        active: bool

    W3ClueWaypoint:
      .extends: none
      .adds:
        waypointTag: name
        clueStateInWaypoint: EBoidClueState
        conditionsLogicalOperator: ELogicalOperator
        waypointReachedConditions: array<W3ClueCondition>

    W3ClueCondition:
      .extends: none

    W3ClueConditionDistance:
      .extends: W3ClueCondition
      .adds:
        distance: float

    W3ClueConditionFact:
      .extends: W3ClueCondition
      .adds:
        fact: string

    W3LessunClue:
      .extends: CFlyingCrittersLairEntityScript
      .adds:
        pathWaypoints: array<W3ClueWaypoint>
        factTriggeredAtEnd: string
        loopFlying: bool
        swarmAttractorEntity: CEntityTemplate
        isCurrentSoundClue: bool
        swarmAttractor: CEntity
        pathIndex: int
        clueSeen: bool
        targetPosition: Vector
        destroyTriggered: bool
        groupPosition: Vector
        accuracy: float
        cameraDir: Vector
        camHeading: float
        toClueVec: Vector
        toClueHeading: float
        currentClueState: name
        groupEffectSpawnPointComponent: CComponent

    W3MonsterClue:
      .extends: W3AnimationInteractionEntity
      .adds:
        isAvailable: bool
        isInteractive: bool
        isReusable: bool
        isVisible: bool
        isIgnoringFM: bool
        playerVoiceset: EPlayerVoicesetType
        clueEntries: array<string>
        maxDetectionDistance: float
        testLineOfSight: bool
        medallionVibration: bool
        medallionVibrationDistance: float
        medallionVibrationBehavior: EFocusClueMedallionReaction
        medallionVibratedEver: bool
        medallionVibratedInSession: bool
        accuracyTreshold: float
        eventOnDetected: array<IPerformableAction>
        detectionDelay: float
        wasDetected: bool
        wasSeen: bool
        isVisibleAsClue: bool
        linkedFocusArea: W3FocusAreaTrigger
        dimmingStarted: bool
        focusModeController: CFocusModeController
        INTERACTION_COMPONENT_NAME: string

    W3MonsterClueScent:
      .extends: W3MonsterClue

    W3MonsterClueAnimated:
      .extends: W3MonsterClue
      .adds:
        animation: EMonsterClueAnim
        witnessWholeAnimation: bool
        animStartEvent: name
        animEndEvent: name
        useAccuracyTest: bool
        accuracyError: float
        stopAnimSoundEvent: name
        activatedByFact: name
        spawnPosWasSaved: bool
        spawnPos: Vector
        spawnRot: EulerAngles
        animStarted: bool

    W3ClueStash:
      .extends: W3MonsterClue
      .adds:
        lootEntityTemplate: CEntityTemplate
        setInvisibleAppearanceAfterLootingStash: bool
        showLootPanelImmediately: bool
        isStashDisabled: bool
        stashOpenDelay: float
        stashSpawnOffset: Vector
        lootEntityTag: name
        currentAppearance: name
        lootEntity: W3Container
        lootWasOfferedToPlayer: bool
        stashWasLooted: bool

    W3DisarmClue:
      .extends: W3MonsterClue
      .adds:
        connectedTripwireTag: name
        connectedTripwire: W3TripwireSwitch

    W3SavedSoundClue:
      .extends: CGameplayEntity
      .adds:
        savedFocusModeSoundEffectType: EFocusModeSoundEffectType

    W3VisualFx:
      .extends: CEntity
      .adds:
        effectName: name
        destroyEffectTime: float
        timedFxDestroyName: name
        parentActorHandle: EntityHandle

    W3LeshyRootProjectile:
      .extends: CProjectileTrajectory
      .adds:
        fxEntityTemplate: CEntityTemplate
        fxEntity: CEntity
        action: W3DamageAction
        owner: CActor
        projPos: Vector
        projRot: EulerAngles
        projExpired: bool
        collisions: int

    W3LeshyBirdProjectile:
      .extends: CProjectileTrajectory
      .adds:
        fxEntityTemplate: CEntityTemplate
        fxEntity: CEntity
        action: W3DamageAction
        owner: CActor
        projPos: Vector
        projRot: EulerAngles
        projExpired: bool

    W3SignProjectile:
      .extends: CProjectileTrajectory
      .adds:
        projData: SSignProjectile
        owner: W3SignOwner
        action: W3DamageAction
        signSkill: ESkill
        wantedTarget: CGameplayEntity
        signEntity: W3SignEntity
        hitEntities: array<CGameplayEntity>
        attackRange: CAIAttackRange
        isReusable: bool

    W3AardProjectile:
      .extends: W3SignProjectile
      .adds:
        staminaDrainPerc: float

    W3AxiiProjectile:
      .extends: W3SignProjectile

    W3IgniProjectile:
      .extends: W3SignProjectile
      .adds:
        channelCollided: bool
        dt: float
        isUsed: bool

    W3FactionReputationPoints:
      .extends: none
      .adds:
        currentReputationPoints: int
        negativeReputationPoints: int

    W3Reputation:
      .extends: none
      .adds:
        factionReputations: array<W3FactionReputationPoints>
        factionName: EFactionName

    W3SonarEnttity:
      .extends: CEntity
      .adds:
        scaleVector: Vector
        sonarScaleRate: float
        effectDuration: float
        speedModifier: float
        stopHighlightAfter: float

    W3ArchesporBulb:
      .extends: CNewNPC
      .adds:
        parentEntity: CNewNPC
        entitiesInRange: array<CGameplayEntity>
        isDestroyed: bool
        hitsTaken: int
        lastHitTimestamp: float
        hitCooldown: float
        damageRadius: float
        damageVal: float
        hitsToDeath: int

    W3DaoPillarObstacle:
      .extends: W3DurationObstacle
      .adds:
        damageValue: float

    W3EredinIceSpike:
      .extends: W3DurationObstacle
      .adds:
        explodeAfter: float
        damageRadius: float
        damageVal: float
        effectDuration: float
        meshComp: CMeshComponent
        destructionComp: CDestructionSystemComponent
        entitiesInRange: array<CGameplayEntity>

    W3FairytaleWitchFluid:
      .extends: CGameplayEntity
      .adds:
        entitiesInRange: array<CGameplayEntity>
        damageRadius: float
        damageVal: float

    W3IceSpike:
      .extends: W3DurationObstacle
      .adds:
        damageValue: float
        weaponSlot: name
        canBeDestroyed: bool
        destroyAfterTime: float
        delayToDealDamage: float

    W3SpawnMarker:
      .extends: CGameplayEntity
      .adds:
        spawnDelay: float
        destroyDelay: float
        entitiesToSpawn: array<CEntityTemplate>
        spawnOnGround: bool
        m_summonedEntityCmp: W3SummonedEntityComponent

    W3WitchBoilingWaterObstacle:
      .extends: W3DurationObstacle
      .adds:
        applyDebuffType: EEffectType
        debuffDuration: float
        simpleDamageAction: bool
        damageValue: float
        allowDmgValueOverrideFromXML: bool
        attackDelay: float
        attackRadius: float
        increaseRadiusDelta: float
        ignoreVictimWithTag: name
        preAttackEffectName: name
        attackEffectName: name
        hitReactionType: EHitReactionType
        loopedAttack: bool
        playAttackEffectOnlyWhenHit: bool
        useSeperateAttackEffectEntity: CEntityTemplate
        onAttackEffectCameraShakeStrength: float
        onHitCameraShakeStrength: float
        fxEntity: CEntity
        summoner: CActor
        params: SCustomEffectParams
        effectComponent: CComponent

    CFoodBoidPointOfInterest:
      .extends: CBoidPointOfInterestComponentScript
      .adds:
        expirationTime: int
        useCounter: float
        entity: CEntity
        poiDisp: W3POIDispenser
        poi: W3PointOfInterestEntity

    W3FlyingSwarmStateChangeRequest:
      .extends: none
      .adds:
        groupId: CFlyingGroupId
        stateName: CName

    W3FlyingSwarmCreateGroupRequest:
      .extends: none
      .adds:
        boidCount: int
        spawnPOI: name

    GotoRequest:
      .extends: none
      .adds:
        groupId: CFlyingGroupId
        groupState: CName
        groupStateSetOnArrival: CName
        targetPoiComponent: CBoidPointOfInterestComponent
        targetNode: CNode
        delay: float
        delayTimer: float
        factID: string
        factValue: int
        groupCenterWhenStart: Vector
        init: bool

    CFlyingSwarmMasterLair:
      .extends: CFlyingCrittersLairEntityScript
      .adds:
        m_spawnFromBirdMasterRequest: int
        m_spawnFromShieldGroupRequest: int
        m_despawnFromBirdMasterRequest: int
        teleportGroupId: CFlyingGroupId
        shieldGroupId: CFlyingGroupId
        passedInput: CFlyingSwarmScriptInput
        m_init: bool
        disperseShield: bool
        teleportGroupPosition: Vector
        shieldBirdCount: int
        teleportBirdCount: int
        spawnCount: int
        checkBeginAttackArray: array<CFlyingGroupId>
        shieldBirdState: name

    W3PointOfInterestEntity:
      .extends: CGameplayEntity
      .adds:
        toDestroy: bool
        assignedDispenser: W3POIDispenser

    W3POIDispenser:
      .extends: CGameplayEntity
      .adds:
        pointsTag: name
        onExitDespawnAllAfter: int
        shouldUseRandomRespawnTime: bool
        respawnInterval: float
        poiEntity: W3POIEntities
        spawnedPOIs: array<W3PointOfInterestEntity>
        activatorArea: CTriggerAreaComponent

    W3Water:
      .extends: CEntity

    CR4CommonMainMenu:
      .extends: CR4CommonMainMenuBase

    CR4CommonMainMenuBase:
      .extends: CR4MenuBase
      .adds:
        m_menuData: array<SMenuTab>
        m_fxSetMovieData: CScriptedFlashFunction
        importSelected: bool
        reopenRequested: bool
        currentMenuName: name

    CR4CommonMainMenuEp1:
      .extends: CR4CommonMainMenuBase

    CR4CommonMainMenuEp2:
      .extends: CR4CommonMainMenuBase

    W3UIContext:
      .extends: CObject
      .adds:
        m_inputBindings: array<SKeyBinding>
        m_contextBindings: array<SKeyBinding>
        m_managerRef: W3ContextManager

    W3ContextManager:
      .extends: CObject
      .adds:
        m_currentContext: W3UIContext
        m_commonMenuRef: CR4CommonMenu

    W3InventoryItemContext:
      .extends: W3UIContext
      .adds:
        currentItemId: SItemUniqueId
        currentSlot: EEquipmentSlots
        invMenuRef: CR4InventoryMenu
        invComponentRef: CInventoryComponent
        invSecondComponentRef: CInventoryComponent
        contextMenuPosition_x: float
        contextMenuPosition_y: float

    W3InventoryGridContext:
      .extends: W3InventoryItemContext

    W3ExternalGridContext:
      .extends: W3InventoryItemContext

    W3InventoryPaperdollContext:
      .extends: W3InventoryItemContext

    W3PlayerStatsContext:
      .extends: W3UIContext
      .adds:
        invMenuRef: CR4InventoryMenu
        statName: name

    CR4GuiSceneController:
      .extends: none
      .adds:
        _isEntitySpawning: bool
        _entityTemplateAlias: string
        _entityAppearance: name
        _environmentAlias: string
        _environmentSunRotation: EulerAngles
        _cameraUpdate: bool
        _cameraLookAt: Vector
        _cameraRotation: EulerAngles
        _cameraDistance: float
        _fov: float
        _updateItems: bool
        _cachedDyes: array<name>
        _appliedDyesPreview: array<name>
        _entityPosition: Vector
        _entityRotation: EulerAngles
        _entityScale: Vector
        _updateEntityTransform: bool
        m_charRenderFocus: EGuiSceneControllerRenderFocus
        m_charFocusOriginZ: float
        m_charFocusOriginDistance: float
        m_charFocusTargetZ: float
        m_charFocusTargetDistance: float
        m_charFocusBlendTimer: float
        m_charFocusBlendTime: float
        m_distanceMin: float
        m_distanceMax: float
        m_zMin: float
        m_zMax: float
        m_zBody: float

    CHudEvent:
      .extends: none
      .adds:
        moduleName: string
        eventName: string

    COnQuestTrackingStartedEvent:
      .extends: CHudEvent
      .adds:
        journalQuest: CJournalQuest

    COnTrackedQuestObjectiveHighlightedEvent:
      .extends: CHudEvent
      .adds:
        journalObjective: CJournalQuestObjective
        journalObjectiveIndex: int

    CNotifyPlayerEnteredInteriorEvent:
      .extends: CHudEvent
      .adds:
        areaPos: Vector
        areaYaw: float
        texture: string

    CNotifyPlayerExitedInteriorEvent:
      .extends: CHudEvent

    CNotifyPlayerMountedBoatEvent:
      .extends: CHudEvent

    CNotifyPlayerDismountedBoatEvent:
      .extends: CHudEvent

    CNotifyInputContextChangedEvent:
      .extends: CHudEvent
      .adds:
        inputContextName: name

    CNotifyBossIndicatorShownEvent:
      .extends: CHudEvent
      .adds:
        enable: bool
        bossTag: name

    COnGasAreaEvent:
      .extends: CHudEvent
      .adds:
        entered: bool

    COnSetCoatOfArmsEvent:
      .extends: CHudEvent
      .adds:
        set: bool

    COnManageHudTimeOutEvent:
      .extends: CHudEvent
      .adds:
        action: EHudTimeOutAction
        timeOut: float

    CR4HudEventController:
      .extends: none
      .adds:
        delayedEvents: array<CHudEvent>

    W3PopupData:
      .extends: CObject
      .adds:
        ButtonsDef: array<SKeyBinding>
        PopupRef: CR4MenuPopup
        ScreenPosX: float
        ScreenPosY: float
        BlurBackground: bool
        PauseGame: bool
        HideTutorial: bool

    W3ContextMenu:
      .extends: W3PopupData
      .adds:
        positionX: float
        positionY: float
        contextRef: W3UIContext
        actionsList: array<SKeyBinding>
        curActionNavCode: string

    TextPopupData:
      .extends: W3PopupData
      .adds:
        m_TextContent: string
        m_TextTitle: string
        m_ImagePath: string
        m_DisplayGreyBackground: bool

    SliderPopupData:
      .extends: TextPopupData
      .adds:
        minValue: int
        maxValue: int
        currentValue: int

    QuantityPopupData:
      .extends: SliderPopupData
      .adds:
        itemId: SItemUniqueId
        itemCost: float
        showPrice: bool
        actionType: EQuantityTransferFunction
        inventoryRef: CR4InventoryMenu
        blacksmithRef: CR4BlacksmithMenu
        craftingRef: CR4CraftingMenu

    W3DestroyItemConfPopup:
      .extends: ConfirmationPopupData
      .adds:
        menuRef: CR4InventoryMenu
        item: SItemUniqueId
        quantity: int

    BookPopupFeedback:
      .extends: TextPopupData
      .adds:
        bookItemId: SItemUniqueId
        inventoryRef: CR4InventoryMenu
        singleBookMode: bool
        curInventory: CInventoryComponent

    TutorialBlockerData:
      .extends: TextPopupData
      .adds:
        m_title: string
        m_description: string
        m_imagepath: string
        scriptTag: name
        managerRef: CR4TutorialSystem

    ConfirmationPopupData:
      .extends: TextPopupData

    ItemInfoPopupData:
      .extends: TextPopupData
      .adds:
        invRef: CInventoryComponent
        itemId: SItemUniqueId
        inventoryRef: CR4InventoryMenu
        invComponent: CInventoryComponent

    W3PortalConfirmationPopupData:
      .extends: ConfirmationPopupData

    PaintingPopup:
      .extends: TextPopupData

    CR4ScriptedHud:
      .extends: CR4Hud
      .adds:
        m_hudSize: int
        m_minimapRotationEnabled: bool
        m_minimapZoom: float
        m_enabledEnemyFocus: bool
        m_enabledNPCNames: bool
        m_enemyHitEffects: bool
        m_dlcMessagePending: bool
        m_HudFlashSFS: CScriptedFlashSprite
        m_fxShowModulesSFF: CScriptedFlashFunction
        m_fxPrintInfoSFF: CScriptedFlashFunction
        m_fxSetInputContextSFF: CScriptedFlashFunction
        m_fxSetIsDynamicSFF: CScriptedFlashFunction
        m_fxSetControllerType: CScriptedFlashFunction
        m_fxSwapAcceptCancel: CScriptedFlashFunction
        m_fxSetGamepadType: CScriptedFlashFunction
        m_fxLockControlScheme: CScriptedFlashFunction
        m_fxSetGameLanguage: CScriptedFlashFunction
        m_fxOnCutscene: CScriptedFlashFunction
        hudModules: array<CR4HudModuleBase>
        hudModulesNames: array<name>
        currentInputContext: name
        previousInputContext: name
        m_isDynamic: bool
        m_guiManager: CR4GuiManager
        m_deathTimerActive: bool
        m_deathTimer: float
        m_scaleformWidth: int
        m_scaleformHeight: int
        m_scaleformOffsetX: int
        m_scaleformOffsetY: int
        m_visibleHudBySystem: bool
        m_visibleHudByUser: bool
        m_visibleHudByScene: bool
        m_visibleHudByRadial: bool
        languageName: string
        m_lastUsedDeviceName: EInputDeviceType
        _cachedEntity: CEntity
        _cachedEntityPosition: Vector

    CR4HudModuleAnchors:
      .extends: CR4HudModuleBase
      .adds:
        m_fxUpdateAnchorsPositions: CScriptedFlashFunction
        m_fxUpdateAnchorsAspectRatio: CScriptedFlashFunction

    CR4HudModuleAreaInfo:
      .extends: CR4HudModuleBase
      .adds:
        m_fxSetTextSFF: CScriptedFlashFunction
        dt: float
        showTime: float
        bShow: bool

    CR4HudModuleBase:
      .extends: CR4HudModule
      .adds:
        m_fxSetControllerType: CScriptedFlashFunction
        m_fxSetPlatform: CScriptedFlashFunction
        m_fxShowElementSFF: CScriptedFlashFunction
        m_fxSetMaxOpacitySFF: CScriptedFlashFunction
        m_fxSetEnabledSFF: CScriptedFlashFunction
        m_fxSetScaleFromWSSFF: CScriptedFlashFunction
        m_fxShowTutorialHighlightSFF: CScriptedFlashFunction
        m_anchorName: string
        curResolutionWidth: float
        curResolutionHeight: float
        m_bEnabled: bool
        m_tickInterval: float
        m_tickCounter: float

    CR4HudModuleBoatHealth:
      .extends: CR4HudModuleBase
      .adds:
        m_fxSetVolumeHealth: CScriptedFlashFunction
        m_wasInBoat: bool

    CR4HudModuleBossFocus:
      .extends: CR4HudModuleBase
      .adds:
        m_bossEntity: CActor
        m_bossName: string
        m_fxSetBossName: CScriptedFlashFunction
        m_fxSetBossHealth: CScriptedFlashFunction
        m_fxSetEssenceDamage: CScriptedFlashFunction
        m_lastHealthPercentage: int
        m_delay: float

    CR4HudModuleBuffs:
      .extends: CR4HudModuleBase
      .adds:
        _currentEffects: array<CBaseGameplayEffect>
        _previousEffects: array<CBaseGameplayEffect>
        _forceUpdate: bool
        m_fxSetPercentSFF: CScriptedFlashFunction
        m_fxShowBuffUpdateFx: CScriptedFlashFunction
        m_fxsetViewMode: CScriptedFlashFunction
        m_flashValueStorage: CScriptedFlashValueStorage
        iCurrentEffectsSize: int
        bDisplayBuffs: bool
        m_runword5Applied: bool

    CR4HudModuleCompanion:
      .extends: CR4HudModuleBase
      .adds:
        m_fxSetNameSFF: CScriptedFlashFunction
        m_fxSetPortraitSFF: CScriptedFlashFunction
        m_fxSetVitalitySFF: CScriptedFlashFunction
        m_fxSetName2SFF: CScriptedFlashFunction
        m_fxSetPortrait2SFF: CScriptedFlashFunction
        m_fxSetVitality2SFF: CScriptedFlashFunction
        bShow: bool
        m_LastVitality: float
        m_LastMaxVitality: float
        m_LastVitality2: float
        m_LastMaxVitality2: float
        companionNPC: CNewNPC
        companionNPC2: CNewNPC
        companionName: string
        companionName2: string

    CR4HudModuleConsole:
      .extends: CR4HudModuleBase
      .adds:
        m_fxHudConsoleMsg: CScriptedFlashFunction
        m_fxTestHudConsole: CScriptedFlashFunction
        m_fxCleanupHudConsole: CScriptedFlashFunction
        _iDuringDisplay: int
        MAX_CONSOLE_MESSEGES_DISPLAYED: int
        NEW_ITEM_DELAY: float
        displayTime: float
        pendingMessages: array<string>

    CR4HudModuleControlsFeedback:
      .extends: CR4HudModuleBase
      .adds:
        m_fxSetSwordTextSFF: CScriptedFlashFunction
        m_flashValueStorage: CScriptedFlashValueStorage
        m_currentInputContext: name
        m_previousInputContext: name
        m_currentPlayerWeapon: EPlayerWeapon
        m_displaySprint: bool
        m_displayJump: bool
        m_displayCallHorse: bool
        m_displayDiveDown: bool
        m_displayGallop: bool
        m_displayCanter: bool
        m_movementLockType: EPlayerMovementLockType
        m_lastUsedPCInput: bool
        m_CurrentHorseComp: W3HorseComponent
        KEY_CONTROLS_FEEDBACK_LIST: string

    CR4HudModuleCrosshair:
      .extends: CR4HudModuleBase

    CR4HudModuleDamagedItems:
      .extends: CR4HudModuleBase
      .adds:
        m_fxSetItemDamaged: CScriptedFlashFunction
        damagedItems: array<bool>
        inv: CInventoryComponent
        isDisplayed: bool

    CR4HudModuleDeathScreen:
      .extends: CR4HudModuleBase
      .adds:
        m_fxSetShowBlackscreenSFF: CScriptedFlashFunction
        m_flashValueStorage: CScriptedFlashValueStorage
        hasSaveData: bool
        isOpened: bool

    CR4HudModuleDebugFastMenu:
      .extends: CR4HudModuleBase
      .adds:
        bOpened: bool
        m_flashValueStorage: CScriptedFlashValueStorage

    CR4HudModuleDebugText:
      .extends: CR4HudModuleBase
      .adds:
        bCurrentShowState: bool
        bShouldShowElement: bool
        bOpenDebugText: bool

    CR4HudModuleDialog:
      .extends: CR4HudModuleBase
      .adds:
        m_fxSentenceSetSFF: CScriptedFlashFunction
        m_fxPreviousSentenceSetSFF: CScriptedFlashFunction
        m_fxPreviousSentenceHideSFF: CScriptedFlashFunction
        m_fxSentenceHideSFF: CScriptedFlashFunction
        m_fxChoiceTimeoutSetSFF: CScriptedFlashFunction
        m_fxChoiceTimeoutHideSFF: CScriptedFlashFunction
        m_fxSkipConfirmShowSFF: CScriptedFlashFunction
        m_fxSkipConfirmHideSFF: CScriptedFlashFunction
        m_fxSetBarValueSFF: CScriptedFlashFunction
        m_fxSetCanBeSkipped: CScriptedFlashFunction
        m_fxSetAlternativeDialogOptionView: CScriptedFlashFunction
        monsterBarganingPopupMenu: CR4MenuPopup
        m_guiManager: CR4GuiManager
        m_LastNegotiationResult: ENegotiationResult
        currentRewardName: name
        currentRewardMultiply: float
        isBet: bool
        isReverseHaggling: bool
        isPopupOpened: bool
        isGwentMode: bool
        anger: float
        currentReward: int
        minimalHagglingReward: int
        maxHaggleValue: int
        NPCsPrettyClose: float
        NPCsTooMuch: float
        LowestPriceControlFact: string
        lastSetChoices: array<SSceneChoice>

    DialogueSliderData:
      .extends: SliderPopupData
      .adds:
        dialogueRef: CR4HudModuleDialog

    BettingSliderData:
      .extends: DialogueSliderData

    DialogueMonsterBarganingSliderData:
      .extends: DialogueSliderData
      .adds:
        baseValue: int
        anger: float
        alternativeRewardType: bool

    CR4HudModuleEnemyFocus:
      .extends: CR4HudModuleBase
      .adds:
        m_fxSetEnemyName: CScriptedFlashFunction
        m_fxSetEnemyLevel: CScriptedFlashFunction
        m_fxSetAttitude: CScriptedFlashFunction
        m_fxSetEnemyHealth: CScriptedFlashFunction
        m_fxSetEnemyStamina: CScriptedFlashFunction
        m_fxSetEssenceBarVisibility: CScriptedFlashFunction
        m_fxSetStaminaVisibility: CScriptedFlashFunction
        m_fxSetNPCQuestIcon: CScriptedFlashFunction
        m_fxSetDodgeFeedback: CScriptedFlashFunction
        m_fxSetBossOrDead: CScriptedFlashFunction
        m_fxSetShowHardLock: CScriptedFlashFunction
        m_fxSetDamageText: CScriptedFlashFunction
        m_fxHideDamageText: CScriptedFlashFunction
        m_fxSetGeneralVisibility: CScriptedFlashFunction
        m_fxSetMutationEightVisibility: CScriptedFlashFunction
        m_mcNPCFocus: CScriptedFlashSprite
        m_lastTarget: CGameplayEntity
        m_lastTargetAttitude: EAIAttitude
        m_lastHealthPercentage: int
        m_wasAxiied: bool
        m_lastStaminaPercentage: int
        m_nameInterval: float
        m_lastEnemyDifferenceLevel: string
        m_lastEnemyLevelString: string
        m_lastDodgeFeedbackTarget: CActor
        m_lastEnemyName: string
        m_lastUseMutation8Icon: bool

    CR4HudModuleHorsePanicBar:
      .extends: CR4HudModuleBase
      .adds:
        m_fxSetPanicSFF: CScriptedFlashFunction
        _panic: float
        horseMounted: bool
        elementShown: bool

    CR4HudModuleHorseStaminaBar:
      .extends: CR4HudModuleBase
      .adds:
        m_fxSetStaminaSFF: CScriptedFlashFunction
        _stamina: float

    CR4HudModuleInteractions:
      .extends: CR4HudModuleBase
      .adds:
        bShowHoldIndicator: bool
        bShowInteraction: bool
        bShowFocusInteractions: bool
        m_fxDisableHoldIndicator: CScriptedFlashFunction
        m_fxEnableHoldIndicator: CScriptedFlashFunction
        m_fxSetInteractionKeySFF: CScriptedFlashFunction
        m_fxSetInteractionIconSFF: CScriptedFlashFunction
        m_fxSetInteractionTextSFF: CScriptedFlashFunction
        m_fxSetInteractionIconAndTextSFF: CScriptedFlashFunction
        m_fxSetInteractionKeyIconAndTextSFF: CScriptedFlashFunction
        m_fxAddFocusInteractionIconSFF: CScriptedFlashFunction
        m_fxSetInteractionHoldDuration: CScriptedFlashFunction
        m_fxRemoveFocusInteractionIconSFF: CScriptedFlashFunction
        m_fxUpdateFocusInteractionIconPositionSFF: CScriptedFlashFunction
        m_fxSetVisibilitySFF: CScriptedFlashFunction
        m_fxSetVisibilityExSFF: CScriptedFlashFunction
        m_fxSetPositionsSFF: CScriptedFlashFunction
        _interactionEntity: CGameplayEntity
        _interactionEntityComponent: CInteractionComponent
        m_focusInteractionIcons: array<SFocusInteractionIcon>
        m_previouslyShow: bool
        m_previousInteractionEntity: CGameplayEntity
        m_previousDisplayEntity: CGameplayEntity
        m_previousDisplayEntityDataRet: bool
        m_forceUpdate: bool
        m_currentHoldInteraction: name
        FOCUS_INTERACION_UPDATE_INTERVAL: float
        FOCUS_INTERACION_RADIUS: float
        FOCUS_INTERACTION_OPAQUE_ICON_RADIUS: float
        FOCUS_INTERACTION_TRANSPARENT_ICON_RADIUS: float

    CR4HudModuleItemInfo:
      .extends: CR4HudModuleBase
      .adds:
        m_currentItemSelected: SItemUniqueId
        m_currentItemOnSlot1: SItemUniqueId
        m_currentItemOnSlot2: SItemUniqueId
        m_currentItemOnSlot3: SItemUniqueId
        m_currentItemOnSlot4: SItemUniqueId
        m_lastBoltItem: SItemUniqueId
        m_currentItemSelectedAmmo: int
        m_currentItemOnSlot1Ammo: int
        m_currentItemOnSlot2Ammo: int
        m_currentItemOnSlot3Ammo: int
        m_currentItemOnSlot4Ammo: int
        m_fxEnableSFF: CScriptedFlashFunction
        m_fxUpdateElementSFF: CScriptedFlashFunction
        m_fxHideSlotsSFF: CScriptedFlashFunction
        m_fxSetAlwaysDisplayed: CScriptedFlashFunction
        m_flashValueStorage: CScriptedFlashValueStorage
        m_fxSetItemInfo: CScriptedFlashFunction
        m_fxSwitchAnimation: CScriptedFlashFunction
        m_fxShowButtonHints: CScriptedFlashFunction
        m_IsPlayerCiri: bool
        m_runword6Applied: bool
        m_previousShowButtonHints: int
        m_previousSetItemInfo: array<SHudItemInfo>

    CR4HudModuleJournalUpdate:
      .extends: CR4HudModuleBase
      .adds:
        _bDuringDisplay: bool
        m_fxShowJournalUpdateSFF: CScriptedFlashFunction
        m_fxSetJournalUpdateStatusSFF: CScriptedFlashFunction
        m_fxSetJournalUpdateStatusTextSFF: CScriptedFlashFunction
        m_fxClearJournalUpdateSFF: CScriptedFlashFunction
        m_fxSetIconSFF: CScriptedFlashFunction
        m_fxHideItemInfo: CScriptedFlashFunction
        m_fxPauseShowTimer: CScriptedFlashFunction
        questsUpdates: array<CJournalQuest>
        journalUpdates: array<SJournalUpdate>
        manager: CWitcherJournalManager
        m_guiManager: CR4GuiManager
        m_flashValueStorage: CScriptedFlashValueStorage
        m_defaultInputBindings: array<SKeyBinding>
        m_bookItemId: SItemUniqueId
        m_bookPopupData: BookPopupFeedback
        m_paintingPopupData: PaintingPopup
        bShowTimerStopped: bool
        bWasRemoved: bool
        defaultDisplayTime: float
        defaultBookInfoDisplayTime: float
        defaultTrackableDisplayTime: float

    CR4HudModuleLootPopup:
      .extends: CR4HudModuleBase
      .adds:
        KEY_LOOT_ITEM_LIST: string
        container: W3Container
        m_flashValueStorage: CScriptedFlashValueStorage
        m_fxSetWindowTitle: CScriptedFlashFunction
        m_fxOpenPC: CScriptedFlashFunction
        m_fxOpenConsole: CScriptedFlashFunction
        m_fxSetSelectionIndex: CScriptedFlashFunction
        bCurrentShowState: bool
        m_indexToSelect: int
        safeLock: int

    CR4HudModuleMedallion:
      .extends: CR4HudModuleBase
      .adds:
        m_fxSetFocusPointsSFF: CScriptedFlashFunction
        m_fxSetVitalitySFF: CScriptedFlashFunction
        m_fxSetMedallionActiveSFF: CScriptedFlashFunction
        m_fxSetMedallionThresholdSFF: CScriptedFlashFunction
        m_focusPoints: int
        m_medallionActivated: bool
        m_vitality: float
        m_maxVitality: float
        m_medallionThreshold: float

    CR4HudModuleMessage:
      .extends: CR4HudModuleBase
      .adds:
        _bDuringDisplay: bool
        _flashValueStorage: CScriptedFlashValueStorage

    CR4HudModuleMinimap2:
      .extends: CR4HudModuleBase
      .adds:
        MINIMAP_EXTERIOR_ZOOM: float
        MINIMAP_INTERIOR_ZOOM: float
        MINIMAP_BOAT_ZOOM: float
        HINT_WAYPOINTS_MAX_REMOVAL_DISTANCE: float
        HINT_WAYPOINTS_MIN_PLACING_DISTANCE: float
        HINT_WAYPOINTS_REFRESH_INTERVAL: float
        HINT_WAYPOINTS_PATHFIND_TOLERANCE: float
        HINT_WAYPOINTS_MAX_COUNT: int
        m_flashValueStorage: CScriptedFlashValueStorage
        m_fxSetMapSettingsSFF: CScriptedFlashFunction
        m_fxSetTextureExtensionsSFF: CScriptedFlashFunction
        m_fxSetZoomSFF: CScriptedFlashFunction
        m_fxSetPlayerRotationSFF: CScriptedFlashFunction
        m_fxSetPlayerPositionSFF: CScriptedFlashFunction
        m_fxSetPlayerPositionAndRotationSFF: CScriptedFlashFunction
        m_fxNotifyPlayerEnteredInteriorSFF: CScriptedFlashFunction
        m_fxNotifyPlayerExitedInteriorSFF: CScriptedFlashFunction
        m_fxDoFadingSFF: CScriptedFlashFunction
        m_fxEnableRotationSFF: CScriptedFlashFunction
        m_fxEnableMask: CScriptedFlashFunction
        m_fxEnableDebug: CScriptedFlashFunction
        m_fxEnableBorders: CScriptedFlashFunction
        m_previousPlayerPosition: Vector
        m_previousPlayerAngle: float
        m_previousCameraAngle: float
        m_zoomValue: float
        m_forceUpdate: bool
        m_updateInterval: float
        m_fadedOut: bool
        m_weatherType: name
        m_gameHour: int
        m_gameMin: int
        m_buffedMonsterIconPath: name
        m_dayTimeName: name
        PLAYER_ANGLE_EPSILON: float
        CAMERA_ANGLE_EPSILON: float
        GAME_HOUR_DAWN: int
        GAME_HOUR_DAY: int
        GAME_HOUR_DUSK: int
        GAME_HOUR_NIGHT: int
        b24HRFormat: bool
        bDisplayDayTime: bool
        bDisplayBuffedMoster: bool

    CR4HudModuleOneliners:
      .extends: CR4HudModuleBase
      .adds:
        m_hud: CR4ScriptedHud
        m_fxCreateOnelinerSFF: CScriptedFlashFunction
        m_fxRemoveOnelinerSFF: CScriptedFlashFunction
        m_flashModule: CScriptedFlashSprite
        m_oneliners: array<OnelinerDefinition>
        VISIBILITY_DISTANCE_SQUARED: float

    CR4HudModuleOxygenBar:
      .extends: CR4HudModuleBase
      .adds:
        m_fxSetOxygeneSFF: CScriptedFlashFunction
        oxygenePerc: float
        forceShowElement: bool
        bOxygeneBar: bool
        bIsBarFull: bool
        isInGasArea: bool

    CR4HudModulePickedItemsInfo:
      .extends: CR4HudModuleBase
      .adds:
        _RecentlyAddedItemListSize: int
        bCurrentShowState: bool
        bShouldShowElement: bool
        _PickedItemListSize: int

    CR4HudModuleQuests:
      .extends: CR4HudModuleBase
      .adds:
        m_systemQuest: CJournalQuest
        m_systemObjectives: array<SJournalQuestObjectiveData>
        m_userObjectives: array<SJournalQuestObjectiveData>
        m_updateEvents: array<SUpdateEvent>
        manager: CWitcherJournalManager
        m_fxShowTrackedQuestSFF: CScriptedFlashFunction
        m_fxUpdateObjectiveCounterSFF: CScriptedFlashFunction
        m_fxUpdateObjectiveHighlightSFF: CScriptedFlashFunction
        m_fxUpdateObjectiveUnhighlightAllSFF: CScriptedFlashFunction
        m_fxSetSystemQuestInfo: CScriptedFlashFunction
        m_guiManager: CR4GuiManager
        m_hud: CR4ScriptedHud
        _highlightedObjective: CJournalQuestObjective

    CR4HudModuleRadialMenu:
      .extends: CR4HudModuleBase
      .adds:
        m_flashValueStorage: CScriptedFlashValueStorage
        m_fxBlockRadialMenuSFF: CScriptedFlashFunction
        m_fxShowRadialMenuSFF: CScriptedFlashFunction
        m_fxUpdateItemIconSFF: CScriptedFlashFunction
        m_fxUpdateFieldEquippedStateSFF: CScriptedFlashFunction
        m_fxSetDesaturatedSFF: CScriptedFlashFunction
        m_fxSetCiriRadialSFF: CScriptedFlashFunction
        m_fxSetCiriItemSFF: CScriptedFlashFunction
        m_fxSetMeditationButtonEnabledSFF: CScriptedFlashFunction
        m_fxSetSelectedItem: CScriptedFlashFunction
        m_fxSetArabicAligmentMode: CScriptedFlashFunction
        m_fxUpdateInputMode: CScriptedFlashFunction
        m_shown: bool
        m_IsPlayerCiri: bool
        m_isDesaturated: bool
        m_HasBlink: bool
        m_HasCharge: bool
        m_allowAutoRotationReturnValue: bool
        m_swappedAcceptCancel: bool
        m_tutorialsHidden: bool
        _currentSelection: string

    CR4HudModuleSignInfo:
      .extends: CR4HudModuleBase
      .adds:
        _iconName: string
        _CurrentSelectedSign: ESignType
        m_fxShowBckArrowSFF: CScriptedFlashFunction
        m_fxEnableSFF: CScriptedFlashFunction

    CR4HudModuleStatBars:
      .extends: CR4HudModuleBase
      .adds:
        m_fxSetVitalitySFF: CScriptedFlashFunction
        m_fxSetStaminaSFF: CScriptedFlashFunction
        m_fxSetToxicitySFF: CScriptedFlashFunction
        m_fxSetExperienceSFF: CScriptedFlashFunction
        m_fxSetLevelUpVisibleSFF: CScriptedFlashFunction
        m_fxStartHeavyAttackIndicatorAnimationSFF: CScriptedFlashFunction
        m_fxStopHeavyAttackIndicatorAnimationSFF: CScriptedFlashFunction
        m_fxShowStatbarsGlowSFF: CScriptedFlashFunction
        m_fxHideStatbarsGlowSFF: CScriptedFlashFunction
        m_fxShowStaminaIndicatorSFF: CScriptedFlashFunction
        _vitality: float
        _stamina: float
        _toxicity: float
        _experience: int
        _maxVitality: float
        _maxStamina: float
        _maxToxicity: float
        _maxExperience: int
        _showLevelUp: bool
        _currentLevel: int
        _heavyAttackIndicatorSpeed: int
        _heavyAttackGlowDurration: int
        _heavyAttackSecondLevelIndicatorSpeed: int
        _heavyAttackSecondLevelGlowDurration: int
        _duringHeavyAttackAnimation: bool
        _bHeavyAttackFirstLevel: bool

    CR4HudModuleSubtitles:
      .extends: CR4HudModuleBase
      .adds:
        m_fxAddSubtitleSFF: CScriptedFlashFunction
        m_fxRemoveSubtitleSFF: CScriptedFlashFunction
        m_fxUpdateWidthSFF: CScriptedFlashFunction

    CR4HudModuleTest:
      .extends: CR4HudModuleBase

    CR4HudModuleTimeLapse:
      .extends: CR4HudModuleBase
      .adds:
        m_fxSetShowTimeSFF: CScriptedFlashFunction
        m_fxSetTimeLapseMessage: CScriptedFlashFunction
        m_fxSetTimeLapseAdditionalMessage: CScriptedFlashFunction

    CR4HudModuleTimeLeft:
      .extends: CR4HudModuleBase
      .adds:
        m_fxSetTimeOutPercent: CScriptedFlashFunction

    CR4HudModuleWatermark:
      .extends: CR4HudModuleBase

    CR4HudModuleWolfHead:
      .extends: CR4HudModuleBase
      .adds:
        m_fxSetVitality: CScriptedFlashFunction
        m_fxSetStamina: CScriptedFlashFunction
        m_fxSetToxicity: CScriptedFlashFunction
        m_fxSetExperience: CScriptedFlashFunction
        m_fxSetLockedToxicity: CScriptedFlashFunction
        m_fxSetDeadlyToxicity: CScriptedFlashFunction
        m_fxShowStaminaNeeded: CScriptedFlashFunction
        m_fxSwitchWolfActivation: CScriptedFlashFunction
        m_fxSetSignIconSFF: CScriptedFlashFunction
        m_fxSetSignTextSFF: CScriptedFlashFunction
        m_fxSetFocusPointsSFF: CScriptedFlashFunction
        m_fxSetFocusProgressSFF: CScriptedFlashFunction
        m_fxLockFocusPointsSFF: CScriptedFlashFunction
        m_fxSetCiriAsMainCharacter: CScriptedFlashFunction
        m_fxSetCoatOfArms: CScriptedFlashFunction
        m_fxSetShowNewLevelIndicator: CScriptedFlashFunction
        m_fxSetAlwaysDisplayed: CScriptedFlashFunction
        m_fxshowMutationFeedback: CScriptedFlashFunction
        m_LastVitality: float
        m_LastMaxVitality: float
        m_LastStamina: float
        m_LastMaxStamina: float
        m_LastExperience: float
        m_LastMaxExperience: float
        m_LastToxicity: float
        m_LastLockedToxicity: float
        m_LastMaxToxicity: float
        m_bLastDeadlyToxicity: bool
        m_medallionActivated: bool
        m_oveloadedIconVisible: bool
        m_focusPoints: int
        m_focusProgress: float
        m_iCurrentPositiveEffectsSize: int
        m_iCurrentNegativeEffectsSize: int
        m_signIconName: string
        m_CurrentSelectedSign: ESignType
        m_IsPlayerCiri: bool
        m_curToxicity: float
        m_lockedToxicity: float
        m_curVitality: float
        m_maxVitality: float
        playStaminaSoundCue: bool

    CR4AutosaveWarningMenu:
      .extends: CR4MenuBase
      .adds:
        m_fxSetDuration: CScriptedFlashFunction
        m_fxSetAutosaveMessage: CScriptedFlashFunction

    CR4CommonIngameMenu:
      .extends: CR4MenuBase
      .adds:
        m_menuData: array<SMenuTab>
        currentMenuName: name
        reopenRequested: bool

    CR4IngameMenu:
      .extends: CR4MenuBase
      .adds:
        mInGameConfigWrapper: CInGameConfigWrapper
        inGameConfigBufferedWrapper: CInGameConfigBufferedWrapper
        currentNewGameConfig: newGameConfig
        m_fxNavigateBack: CScriptedFlashFunction
        m_fxSetIsMainMenu: CScriptedFlashFunction
        m_fxSetCurrentUsername: CScriptedFlashFunction
        m_fxSetVersion: CScriptedFlashFunction
        m_fxShowHelp: CScriptedFlashFunction
        m_fxSetVisible: CScriptedFlashFunction
        m_fxSetPanelMode: CScriptedFlashFunction
        m_fxRemoveOption: CScriptedFlashFunction
        m_fxSetGameLogoLanguage: CScriptedFlashFunction
        m_fxUpdateOptionValue: CScriptedFlashFunction
        m_fxUpdateInputFeedback: CScriptedFlashFunction
        m_fxOnSaveScreenshotRdy: CScriptedFlashFunction
        m_fxSetIgnoreInput: CScriptedFlashFunction
        m_fxForceEnterCurEntry: CScriptedFlashFunction
        m_fxForceBackgroundVis: CScriptedFlashFunction
        m_fxSetHardwareCursorOn: CScriptedFlashFunction
        m_fxSetExpansionText: CScriptedFlashFunction
        loadConfPopup: W3ApplyLoadConfirmation
        saveConfPopup: W3SaveGameConfirmation
        newGameConfPopup: W3NewGameConfirmation
        actionConfPopup: W3ActionConfirmation
        deleteConfPopup: W3DeleteSaveConf
        diffChangeConfPopup: W3DifficultyChangeConfirmation
        isShowingSaveList: bool
        isShowingLoadList: bool
        smartKeybindingEnabled: bool
        m_structureCreator: IngameMenuStructureCreator
        isInLoadselector: bool
        swapAcceptCancelChanged: bool
        alternativeRadialInputChanged: bool
        EnableUberMovement: bool
        shouldRefreshKinect: bool
        isMainMenu: bool
        managingPause: bool
        updateInputDeviceRequired: bool
        hasChangedOption: bool
        ignoreInput: bool
        disableAccountPicker: bool
        lastSetTag: int
        currentLangValue: string
        lastUsedLangValue: string
        currentSpeechLang: string
        lastUsedSpeechLang: string
        languageName: string
        panelMode: bool
        lastSetDifficulty: int

    CR4MainCreditsMenu:
      .extends: CR4MenuBase
      .adds:
        guiManager: CR4GuiManager
        m_fxSetSectionTextSFF: CScriptedFlashFunction
        m_fxSetScrollingSpeedSFF: CScriptedFlashFunction
        m_fxAddScrollingTextSFF: CScriptedFlashFunction
        m_fxStartScrollingTextSFF: CScriptedFlashFunction
        m_fxChangedConstraintedStateSFF: CScriptedFlashFunction
        m_fxSetThankYouText: CScriptedFlashFunction
        legalTextOverride: bool
        shouldCloseOnMovieEnd: bool
        creditsSections: array<CreditsSection>
        currentSectionID: int
        htmlNewline: string
        playedSecondSection: bool
        SCROLLING_TEXT_LINE_COUNT: int
        SCROLLING_SPEED: int

    CR4MainDbgStartQuestMenu:
      .extends: CR4MenuBase
      .adds:
        m_optionsNames: array<name>
        m_gameResources: array<string>

    CR4MainGammaMenu:
      .extends: CR4MenuBase
      .adds:
        mInGameConfigWrapper: CInGameConfigWrapper
        m_fxSetCurrentUsername: CScriptedFlashFunction

    CR4RecapMoviesMenu:
      .extends: CR4MenuBase
      .adds:
        m_fxSetGameLogoLanguage: CScriptedFlashFunction
        m_fxSetSubtitles: CScriptedFlashFunction
        m_MovieData: array<SMovieData>
        m_CurrentMovieID: int
        guiManager: CR4GuiManager
        wasSkipped: bool
        languageName: string

    CR4StartupMoviesMenu:
      .extends: CR4MenuBase
      .adds:
        m_fxSetGameLogoLanguage: CScriptedFlashFunction
        m_MovieData: array<SMovieData>
        m_CurrentMovieID: int
        guiManager: CR4GuiManager
        wasSkipped: bool
        languageName: string

    W3ApplyLoadConfirmation:
      .extends: ConfirmationPopupData
      .adds:
        menuRef: CR4IngameMenu
        saveSlotRef: SSavegameInfo
        accepted: bool

    W3SaveGameConfirmation:
      .extends: ConfirmationPopupData
      .adds:
        menuRef: CR4IngameMenu
        type: ESaveGameType
        slot: int

    W3NewGameConfirmation:
      .extends: ConfirmationPopupData
      .adds:
        menuRef: CR4IngameMenu

    W3DeleteSaveConf:
      .extends: ConfirmationPopupData
      .adds:
        menuRef: CR4IngameMenu
        type: ESaveGameType
        slot: int
        saveMode: bool

    W3ActionConfirmation:
      .extends: ConfirmationPopupData
      .adds:
        menuRef: CR4IngameMenu
        actionID: int

    W3DifficultyChangeConfirmation:
      .extends: ConfirmationPopupData
      .adds:
        menuRef: CR4IngameMenu
        targetDifficulty: int

    IngameMenuStructureCreator:
      .extends: none
      .adds:
        parentMenu: CR4IngameMenu
        m_flashValueStorage: CScriptedFlashValueStorage
        m_flashConstructor: CScriptedFlashObject

    CR4AlchemyMenu:
      .extends: CR4ListBaseMenu
      .adds:
        m_alchemyManager: W3AlchemyManager
        m_recipeList: array<SAlchemyRecipe>
        m_definitionsManager: CDefinitionsManagerAccessor
        bCouldCraft: bool
        _inv: CInventoryComponent
        _playerInv: W3GuiPlayerInventoryComponent
        m_fxSetCraftingEnabled: CScriptedFlashFunction
        m_fxSetCraftedItem: CScriptedFlashFunction
        m_fxHideContent: CScriptedFlashFunction
        m_fxSetFilters: CScriptedFlashFunction
        m_fxSetPinnedRecipe: CScriptedFlashFunction
        itemsQuantity: array<int>

    CR4BlacksmithMenu:
      .extends: CR4MenuBase
      .adds:
        _disassembleInv: W3GuiDisassembleInventoryComponent
        _repairInv: W3GuiRepairInventoryComponent
        _socketInv: W3GuiSocketsInventoryComponent
        _curInv: W3GuiBaseInventoryComponent
        _addSocketInv: W3GuiAddSocketsInventoryComponent
        _standaloneDismantleInv: W3StandaloneDismantleComponent
        _tooltipDataProvider: W3TooltipComponent
        _inv: CInventoryComponent
        _fixerNpc: CNewNPC
        _fixerInventory: CInventoryComponent
        m_standaloneMode: bool
        m_menuInited: bool
        m_lastConfirmedDisassembleQuantity: int
        MAX_ITEM_NR: int
        currentItemsNr: int
        InitDataConfirmation: PriceConfirmationPopupData
        repairAllPopupData: RepairAllPopupData
        quantityPopupData: QuantityPopupData
        m_fxRemoveItem: CScriptedFlashFunction
        m_fxConfirmAction: CScriptedFlashFunction
        m_fxSetPlayerMoney: CScriptedFlashFunction
        m_fxSetXActionLabel: CScriptedFlashFunction
        m_sectionsList: CScriptedFlashArray
        m_ingrForMissingDecoctions: array<name>

    PriceConfirmationPopupData:
      .extends: ConfirmationPopupData
      .adds:
        m_Price: float
        itemId: SItemUniqueId
        isStandaloneDismantle: bool
        menuRef: CR4BlacksmithMenu

    RepairAllPopupData:
      .extends: ConfirmationPopupData
      .adds:
        m_Price: float
        menuRef: CR4BlacksmithMenu

    W3BuySkillConfirmation:
      .extends: ConfirmationPopupData
      .adds:
        characterMenuRef: CR4CharacterMenu
        targetSkill: ESkill

    CR4CharacterMenu:
      .extends: CR4MenuBase
      .adds:
        initDataBuySkill: W3BuySkillConfirmation
        _playerInv: W3GuiPlayerInventoryComponent
        _inv: CInventoryComponent
        _charStatsPopupData: CharacterStatsPopupData
        _sentStats: array<SentStatsData>
        currentlySelectedTab: int
        m_previousSkillBonuses: array<string>
        m_fxPaperdollChanged: CScriptedFlashFunction
        m_fxClearSkillSlot: CScriptedFlashFunction
        m_fxNotifySkillUpgraded: CScriptedFlashFunction
        m_fxActivateRunwordBuf: CScriptedFlashFunction
        m_fxSetMutationBonusMode: CScriptedFlashFunction
        m_fxConfirmMutResearch: CScriptedFlashFunction
        m_fxResetInput: CScriptedFlashFunction
        m_mutationBonusMode: bool
        MAX_BONUS_SOCKETS: int
        MAX_MASTER_MUTATION_STAGE: int

    CR4CharacterPerksMenu:
      .extends: CR4MenuBase
      .adds:
        moduleId: int

    CR4CharacterSkillsMenu:
      .extends: CR4MenuBase

    CR4CommonMenu:
      .extends: CR4MenuBase
      .adds:
        m_menuData: array<SMenuTab>
        m_subMenuData: array<SMenuTab>
        m_lastMenuName: name
        m_hubEnabled: bool
        m_lockedInHub: bool
        m_lockedInMenu: bool
        m_contextInputBlocked: bool
        m_fxSubMenuClosed: CScriptedFlashFunction
        m_fxUpdateLevel: CScriptedFlashFunction
        m_fxUpdateMoney: CScriptedFlashFunction
        m_fxUpdateWeight: CScriptedFlashFunction
        m_fxNavigateNext: CScriptedFlashFunction
        m_fxNavigatePrior: CScriptedFlashFunction
        m_fxSelectSubMenuTab: CScriptedFlashFunction
        m_fxSetShopInventory: CScriptedFlashFunction
        m_fxUpdateTabEnabled: CScriptedFlashFunction
        m_fxLockOpenTabNavigation: CScriptedFlashFunction
        m_fxBlockMenuClosing: CScriptedFlashFunction
        m_fxBlockHubClosing: CScriptedFlashFunction
        m_fxSetInputFeedbackVisibility: CScriptedFlashFunction
        m_fxSetPlayerDefailsVis: CScriptedFlashFunction
        m_fxSetMeditationBackgroundMode: CScriptedFlashFunction
        m_fxOnChildMenuConfigured: CScriptedFlashFunction
        m_fxUpdateMenuBackgroundImage: CScriptedFlashFunction
        m_fxBlockBackNavigation: CScriptedFlashFunction
        m_fxSelectTab: CScriptedFlashFunction
        m_fxEnterCurrentTab: CScriptedFlashFunction
        m_defaultBindings: array<SKeyBinding>
        m_contextBindings: array<SKeyBinding>
        m_GFxBindings: array<SKeyBinding>
        m_contextManager: W3ContextManager
        m_mode_meditation: bool
        m_had_meditation: bool
        noSaveLock: int
        isCiri: bool
        inventoryHotkey: EInputKey
        characterHotkey: EInputKey
        mapHotkey: EInputKey
        journalHotkey: EInputKey
        alchemyHotkey: EInputKey
        bestiaryHotkey: EInputKey
        glossaryHotkey: EInputKey
        meditationHotkey: EInputKey
        craftingHotkey: EInputKey
        isInNpcContext: bool
        isEnchantingAvailable: bool
        isShopAvailable: bool
        isRepairAvailable: bool
        isCraftingAvailable: bool
        isAlchemyAvailable: bool
        isPlayerMeditatingInBed: bool

    CR4CraftingMenu:
      .extends: CR4ListBaseMenu
      .adds:
        m_definitionsManager: CDefinitionsManagerAccessor
        bCouldCraft: bool
        _inv: CInventoryComponent
        _playerInv: W3GuiPlayerInventoryComponent
        m_craftingManager: W3CraftingManager
        m_schematicList: array<name>
        m_npc: CNewNPC
        m_npcInventory: CInventoryComponent
        m_shopInvComponent: W3GuiShopInventoryComponent
        m_lastSelectedTag: name
        _craftsmanComponent: W3CraftsmanComponent
        _quantityPopupData: QuantityPopupData
        m_fxSetCraftingEnabled: CScriptedFlashFunction
        m_fxSetCraftedItem: CScriptedFlashFunction
        m_fxHideContent: CScriptedFlashFunction
        m_fxSetFilters: CScriptedFlashFunction
        m_fxSetPinnedRecipe: CScriptedFlashFunction
        m_fxSetMerchantCheck: CScriptedFlashFunction
        itemsQuantity: array<int>

    CR4DeathScreenMenu:
      .extends: CR4MenuBase
      .adds:
        hasSaveData: bool
        m_fxShowInputFeedback: CScriptedFlashFunction

    CR4DeckBuilderMenu:
      .extends: CR4GwintBaseMenu
      .adds:
        m_fxSetSelectedDeck: CScriptedFlashFunction
        m_fxSetGwintGamePending: CScriptedFlashFunction
        m_fxShowTutorial: CScriptedFlashFunction
        m_fxContinueTutorial: CScriptedFlashFunction
        m_fxSetPassiveAbilString: CScriptedFlashFunction

    CR4EnchantingMenu:
      .extends: CR4MenuBase
      .adds:
        m_fxEnableRemovingEnchantment: CScriptedFlashFunction
        m_fxEnableEnchantment: CScriptedFlashFunction
        m_fxSetFilters: CScriptedFlashFunction
        m_fxSetLocalization: CScriptedFlashFunction
        m_fxStartApplying: CScriptedFlashFunction
        m_fxStartRemoving: CScriptedFlashFunction
        m_fxSelectFirstEnchantment: CScriptedFlashFunction
        m_fxSetPinnedRecipe: CScriptedFlashFunction
        m_definitionsManager: CDefinitionsManagerAccessor
        m_tooltipDataProvider: W3TooltipComponent
        m_playerInvComponent: W3GuiEnchantingInventoryComponent
        m_playerInventory: CInventoryComponent
        m_enchanterInventory: CInventoryComponent
        m_enchanterNpc: CNewNPC
        m_craftsmanComponent: W3CraftsmanComponent
        m_enchantmentManager: W3EnchantmentManager
        m_runewordsList: array<CName>
        m_glyphwordsList: array<CName>
        m_allWordsList: array<CName>
        m_runewordsData: CScriptedFlashArray
        m_glyphwordsData: CScriptedFlashArray
        m_allwordsData: CScriptedFlashArray
        m_initDataConfirmation: EnchantingConfirmationPopupData
        m_selectedEnchantment: name
        m_readonly: bool
        m_notEnoughSlots: bool
        m_prevItem: SItemUniqueId
        TYPE_RUNEWORD: int
        TYPE_GLYPHWORD: int
        tutorialTriggered: bool

    EnchantingConfirmationPopupData:
      .extends: ConfirmationPopupData
      .adds:
        removingEnchantment: bool
        menuRef: CR4EnchantingMenu
        m_Price: float

    CR4EndScreenMenu:
      .extends: CR4StartScreenMenuBase

    CR4GlossaryBestiaryMenu:
      .extends: CR4ListBaseMenu
      .adds:
        allCreatures: array<CJournalCreature>
        m_fxHideContent: CScriptedFlashFunction
        m_fxSetTitle: CScriptedFlashFunction
        m_fxSetText: CScriptedFlashFunction
        m_fxSetImage: CScriptedFlashFunction

    W3GwintQuitConfPopup:
      .extends: ConfirmationPopupData
      .adds:
        gwintMenuRef: CR4GwintBaseMenu

    CR4GwintBaseMenu:
      .extends: CR4MenuBase
      .adds:
        quitConfPopup: W3GwintQuitConfPopup
        gwintManager: CR4GwintManager
        flashConstructor: CScriptedFlashObject

    W3ChooseGwintTurnPopup:
      .extends: ConfirmationPopupData
      .adds:
        gwintMenuRef: CR4GwintGameMenu

    CR4GwintGameMenu:
      .extends: CR4GwintBaseMenu
      .adds:
        chooseTurnPopup: W3ChooseGwintTurnPopup
        m_fxSetGwintResult: CScriptedFlashFunction
        m_fxSetWhoStarts: CScriptedFlashFunction
        m_fxShowTutorial: CScriptedFlashFunction
        playerWon: bool
        tutorialActive: bool

    CR4GwintMenu:
      .extends: CR4MenuBase

    CR4InformationPopupMenu:
      .extends: CR4MenuBase

    CR4InventoryMenu:
      .extends: CR4MenuBase
      .adds:
        _playerInv: W3GuiPlayerInventoryComponent
        _paperdollInv: W3GuiPaperdollInventoryComponent
        _containerInv: W3GuiContainerInventoryComponent
        _shopInv: W3GuiShopInventoryComponent
        _horseInv: W3GuiContainerInventoryComponent
        _horsePaperdollInv: W3GuiHorseInventoryComponent
        _currentInv: W3GuiBaseInventoryComponent
        _currentMouseInv: W3GuiBaseInventoryComponent
        _quantityPopupData: QuantityPopupData
        _statsContext: W3PlayerStatsContext
        _paperdollContext: W3InventoryPaperdollContext
        _invContext: W3InventoryGridContext
        _externGridContext: W3ExternalGridContext
        _bookPopupData: BookPopupFeedback
        _paintingPopupData: PaintingPopup
        _charStatsPopupData: CharacterStatsPopupData
        _itemInfoPopupData: ItemInfoPopupData
        _destroyConfPopData: W3DestroyItemConfPopup
        drawHorse: bool
        m_player: CEntity
        _inv: CInventoryComponent
        _container: W3Container
        _shopNpc: CNewNPC
        _tooltipDataProvider: W3TooltipComponent
        currentlySelectedTab: int
        _defaultInventoryState: EInventoryMenuState
        _currentState: EInventoryMenuState
        optionsItemActions: array<EInventoryActionType>
        _sentStats: array<SentStatsData>
        _currentQuickSlot: EEquipmentSlots
        _currentEqippedQuickSlot: EEquipmentSlots
        MAX_ITEM_NR: int
        currentItemsNr: int
        m_menuInited: bool
        m_isPadConnected: bool
        m_isUsingPad: bool
        m_hidePaperdoll: bool
        m_tagsFilter: array<name>
        m_ignoreSaveData: bool
        m_selectionModeActive: bool
        m_selectionModeItem: SItemUniqueId
        m_dyePreviewMode: bool
        m_dyePreviewSlots: array<SItemUniqueId>
        m_previewItems: array<SItemUniqueId>
        m_previewSlots: array<bool>
        m_lastSelectedModuleID: int
        m_lastSelectedModuleBindingName: string
        m_bookPopupItem: SItemUniqueId
        currentSelectedItem: SItemUniqueId
        m_fxPaperdollRemoveItem: CScriptedFlashFunction
        m_fxInventoryRemoveItem: CScriptedFlashFunction
        m_fxInventoryUpdateFilter: CScriptedFlashFunction
        m_fxForceSelectItem: CScriptedFlashFunction
        m_fxForceSelectPaperdollSlot: CScriptedFlashFunction
        m_fxSetFilteringMode: CScriptedFlashFunction
        m_fxRemoveContainerItem: CScriptedFlashFunction
        m_fxHideSelectionMode: CScriptedFlashFunction
        m_fxSetInventoryMode: CScriptedFlashFunction
        m_fxSetNewFlagsForTabs: CScriptedFlashFunction
        m_fxSetSortingMode: CScriptedFlashFunction
        m_fxSetVitality: CScriptedFlashFunction
        m_fxSetToxicity: CScriptedFlashFunction
        m_fxSetPreviewMode: CScriptedFlashFunction
        m_fxSetDefaultTab: CScriptedFlashFunction
        hackHideStatTooltip: bool
        hackHideItemTooltip: bool

    W3ItemSelectMenuInitData:
      .extends: CObject
      .adds:
        onlyEquipped: bool
        onlyUnequipped: bool
        containTags: array<name>

    CR4MenuItemSelect:
      .extends: CR4OverlayMenu
      .adds:
        _itemsInv: W3GuiItemSelectComponent
        _invComponent: CInventoryComponent
        _initData: W3ItemSelectMenuInitData

    CR4JournalBaseMenu:
      .extends: CR4Menu
      .adds:
        REWARDS_SIZE: int
        m_journalManager: CWitcherJournalManager
        m_flashValueStorage: CScriptedFlashValueStorage
        allQuests: array<CJournalBase>
        _currentQuestID: int

    CR4JournalMenu:
      .extends: CR4MenuBase
      .adds:
        m_menuNames: array<name>

    CR4JournalMonsterHuntingMenu:
      .extends: CR4JournalQuestMenu

    CR4JournalQuestMenu:
      .extends: CR4ListBaseMenu
      .adds:
        allQuests: array<CJournalQuest>
        currentObjectives: array<CJournalQuestObjective>
        initialTrackedQuest: CJournalQuest
        bDisplayCompleted: bool
        m_initSelection: bool
        lastSelectedQuestTag: name
        m_fxSetTrackedQuest: CScriptedFlashFunction
        m_fxSetTrackedObj: CScriptedFlashFunction
        m_fxSetTitle: CScriptedFlashFunction
        m_fxSetText: CScriptedFlashFunction
        m_fxSetExpansionTexture: CScriptedFlashFunction
        m_fxUpdateExpansionIcon: CScriptedFlashFunction

    CR4JournalTreasureHuntingMenu:
      .extends: CR4JournalQuestMenu

    CR4ListBaseMenu:
      .extends: CR4MenuBase
      .adds:
        DATA_BINDING_NAME: string
        DATA_BINDING_NAME_SUBLIST: string
        DATA_BINDING_NAME_DESCRIPTION: string
        ITEMS_SIZE: int
        m_journalManager: CWitcherJournalManager
        currentTag: name
        lastSentTag: name
        openedTabs: array<name>
        itemsNames: array<name>

    CR4LoadingMenu:
      .extends: CR4MenuBase
      .adds:
        guiManager: CR4GuiManager

    CR4MapMenu:
      .extends: CR4MenuBase
      .adds:
        m_shownArea: EAreaName
        m_currentArea: EAreaName
        m_fxRemoveUserMapPin: CScriptedFlashFunction
        m_fxSetMapZooms: CScriptedFlashFunction
        m_fxSetMapVisibilityBoundaries: CScriptedFlashFunction
        m_fxSetMapScrollingBoundaries: CScriptedFlashFunction
        m_fxSetMapSettings: CScriptedFlashFunction
        m_fxReinitializeMap: CScriptedFlashFunction
        m_fxEnableDebugMode: CScriptedFlashFunction
        m_fxEnableUnlimitedZoom: CScriptedFlashFunction
        m_fxEnableManualLod: CScriptedFlashFunction
        m_fxShowBorders: CScriptedFlashFunction
        m_fxSetDefaultPosition: CScriptedFlashFunction
        m_fxShowToussaint: CScriptedFlashFunction
        m_fxSetHighlightedMapPin: CScriptedFlashFunction
        m_userPinNames: array<name>
        currentTag: name

    CR4MeditationClockMenu:
      .extends: CR4MenuBase
      .adds:
        m_fxSetBlockMeditation: CScriptedFlashFunction
        m_fxSetCanMeditate: CScriptedFlashFunction
        m_fxSetBonusMeditationTime: CScriptedFlashFunction
        m_fxSetGeraltBackgroundVisible: CScriptedFlashFunction
        m_fxSet24HRFormat: CScriptedFlashFunction
        canMeditateWait: bool
        isGameTimePaused: bool
        BONUS_MEDITATION_TIME: int

    CR4MeditationMenu:
      .extends: CR4MenuBase

    CR4MenuBase:
      .extends: CR4Menu
      .adds:
        m_flashValueStorage: CScriptedFlashValueStorage
        m_flashModule: CScriptedFlashSprite
        m_parentMenu: CR4MenuBase
        m_fxBlurLayer: CScriptedFlashFunction
        m_fxSetState: CScriptedFlashFunction
        m_fxSetColorBlindMode: CScriptedFlashFunction
        m_fxSetCurrentModule: CScriptedFlashFunction
        m_fxSetIsInCombat: CScriptedFlashFunction
        m_fxShowSecondaryModulesSFF: CScriptedFlashFunction
        m_fxSetArabicAligmentMode: CScriptedFlashFunction
        m_fxSetRestrictDirectClosing: CScriptedFlashFunction
        m_fxSwapAcceptCancel: CScriptedFlashFunction
        m_fxSetControllerType: CScriptedFlashFunction
        m_fxSetPlatform: CScriptedFlashFunction
        m_fxSetGamepadType: CScriptedFlashFunction
        m_fxLockControlScheme: CScriptedFlashFunction
        m_fxSetTooltipState: CScriptedFlashFunction
        m_fxEnableDebugInput: CScriptedFlashFunction
        m_fxSetPaperdollPreviewIcon: CScriptedFlashFunction
        m_menuState: name
        m_notificationData: W3TutorialPopupData
        m_currentContext: W3UIContext
        m_defaultInputBindings: array<SKeyBinding>
        m_GFxInputBindings: array<SKeyBinding>
        m_guiManager: CR4GuiManager
        m_commonMenu: CR4CommonMenu
        UISavedData: SUISavedData
        m_lastSelectedModule: int
        mouseCursorType: ECursorType
        m_hideTutorial: bool
        m_forceHideTutorial: bool
        m_configUICalled: bool
        m_initialSelectionsToIgnore: int
        dontAutoCallOnOpeningMenuInOnConfigUIHaxxor: bool

    W3MenuInitData:
      .extends: CObject
      .adds:
        ignoreSaveSystem: bool
        m_defaultState: name

    W3InventoryInitData:
      .extends: W3MenuInitData
      .adds:
        containerNPC: CGameplayEntity
        filterTagsList: array<name>

    W3MapInitData:
      .extends: W3MenuInitData
      .adds:
        m_triggeredExitEntity: bool
        m_usedFastTravelEntity: CEntity
        m_isSailing: bool

    W3MainMenuInitData:
      .extends: W3MenuInitData
      .adds:
        m_panelXOffset: int

    W3SingleMenuInitData:
      .extends: W3MenuInitData
      .adds:
        fixedMenuName: name
        ignoreMeditationCheck: bool
        isBonusMeditationAvailable: bool
        unlockCraftingMenu: bool
        m_blockOtherPanels: bool

    W3StandaloneDismantleInitData:
      .extends: W3SingleMenuInitData
      .adds:
        m_ingredientsForMissingDecoctions: array<name>

    CR4NoticeBoardMenu:
      .extends: CR4MenuBase
      .adds:
        board: W3NoticeBoard
        m_fxSetSelectedIndex: CScriptedFlashFunction
        m_fxSetTitle: CScriptedFlashFunction
        m_fxSetDescription: CScriptedFlashFunction

    CR4OverlayMenu:
      .extends: CR4MenuBase
      .adds:
        m_BlurBackground: bool
        m_PauseGame: bool

    CR4MenuPopup:
      .extends: CR4OverlayMenu
      .adds:
        m_DataObject: W3PopupData
        m_initialized: bool
        m_HideTutorial: bool
        m_fxSetBarValueSFF: CScriptedFlashFunction
        rttItemLoaded: bool
        itemRotation: EulerAngles
        itemPosition: Vector
        itemScale: Vector
        itemCat: name

    CR4PosterMenu:
      .extends: CR4MenuBase
      .adds:
        m_posterEntity: W3Poster
        m_fxSetDescriptionSFF: CScriptedFlashFunction
        m_fxSetSubtitlesHackSFF: CScriptedFlashFunction

    CR4PreparationPotionsAndBombsMenu:
      .extends: CR4MenuBase
      .adds:
        _gridInv: W3GuiPreparationPotionsAndBombsInventoryComponent
        _currentInv: W3GuiBaseInventoryComponent
        _inv: CInventoryComponent
        optionsItemActions: array<EInventoryActionType>
        _currentQuickSlot: EEquipmentSlots
        ITEMS_SIZE: int

    CR4PreparationMainMenu:
      .extends: CR4MenuBase

    CR4PreparationMenu:
      .extends: CR4MenuBase
      .adds:
        _gridInv: W3GuiPreparationInventoryComponent
        _inv: CInventoryComponent

    CR4PreparationMutagensMenu:
      .extends: CR4MenuBase
      .adds:
        _gridInv: W3GuiPreparationMutagensInventoryComponent
        _currentInv: W3GuiBaseInventoryComponent
        _inv: CInventoryComponent
        optionsItemActions: array<EInventoryActionType>
        _currentQuickSlot: EEquipmentSlots
        TOXICTY_BAR_DATA_BINDING_KEY: string
        MUTAGENS_SIZE: int
        initialized: bool

    CR4PreparationOilsMenu:
      .extends: CR4MenuBase
      .adds:
        _gridInv: W3GuiPreparationOilsInventoryComponent
        _currentInv: W3GuiBaseInventoryComponent
        _inv: CInventoryComponent
        optionsItemActions: array<EInventoryActionType>
        _currentQuickSlot: EEquipmentSlots
        ITEMS_SIZE: int

    CR4QuestListMenu:
      .extends: CR4Menu
      .adds:
        KEY_QUEST_LIST: string
        REWARDS_SIZE: int
        m_journalManager: CWitcherJournalManager
        m_flashValueStorage: CScriptedFlashValueStorage
        allQuests: array<CJournalBase>
        _currentQuestID: int

    CR4RyanAlchemyMenu:
      .extends: CR4Menu
      .adds:
        KEY_RECIPE_LIST: string
        m_flashValueStorage: CScriptedFlashValueStorage
        m_alchemyManager: W3AlchemyManager
        m_inventory: CInventoryComponent
        m_recipeList: array<SAlchemyRecipe>

    CR4StartScreenMenu:
      .extends: CR4StartScreenMenuBase

    CR4StartScreenMenuBase:
      .extends: CR4MenuBase
      .adds:
        _fadeDuration: float
        m_fxSetFadeDuration: CScriptedFlashFunction
        m_fxSetIsStageDemo: CScriptedFlashFunction
        m_fxStartFade: CScriptedFlashFunction
        m_fxSetGameLogoLanguage: CScriptedFlashFunction
        m_fxSetText: CScriptedFlashFunction

    CR4StartScreenMenuEP1:
      .extends: CR4StartScreenMenuBase

    CR4StartScreenMenuEP2:
      .extends: CR4StartScreenMenuBase

    CR4TestMenu:
      .extends: CR4MenuBase
      .adds:
        entityTemplateIndex: int
        appearanceIndex: int
        environmentDefinitionIndex: int
        entityTemplates: array<string>
        appearances: array<name>
        environmentDefinitions: array<string>
        sunRotation: EulerAngles

    CR4UIRescaleMenu:
      .extends: CR4MenuBase
      .adds:
        hud: CR4ScriptedHud
        m_fxSetCurrentUsername: CScriptedFlashFunction

    CR4GlossaryBooksMenu:
      .extends: CR4MenuBase
      .adds:
        SORT_WEIGHT_PAINTINGS: int
        SORT_WEIGHT_BOOKS: int
        SORT_WEIGHT_Q: int
        SORT_WEIGHT_SQ: int
        SORT_WEIGHT_MQ: int
        SORT_WEIGHT_MH: int
        SORT_WEIGHT_TH: int

    CR4GlossaryCharacterMenu:
      .extends: CR4ListBaseMenu
      .adds:
        allCharacters: array<CJournalCharacter>

    CR4GlossaryEncyclopediaMenu:
      .extends: CR4ListBaseMenu
      .adds:
        m_fxUpdateEntryInfo: CScriptedFlashFunction
        m_fxUpdateEntryImage: CScriptedFlashFunction
        m_fxSetMovieData: CScriptedFlashFunction

    CR4GlossaryMenu:
      .extends: CR4ListBaseMenu
      .adds:
        allEntries: array<CJournalGlossaryGroup>

    CR4GlossaryPlacesMenu:
      .extends: CR4ListBaseMenu
      .adds:
        allEntries: array<CJournalPlaceGroup>

    CR4GlossaryStorybookMenu:
      .extends: CR4ListBaseMenu
      .adds:
        allEntries: array<CJournalStoryBookChapter>
        guiManager: CR4GuiManager
        bMovieIsPlaying: bool
        m_fxSetTitle: CScriptedFlashFunction
        m_fxSetText: CScriptedFlashFunction
        m_fxShowModules: CScriptedFlashFunction

    CR4GlossaryTutorialsMenu:
      .extends: CR4ListBaseMenu
      .adds:
        allEntries: array<CJournalTutorialGroup>
        m_fxSetTitle: CScriptedFlashFunction
        m_fxSetText: CScriptedFlashFunction
        m_fxSetImage: CScriptedFlashFunction
        resetSelection: bool

    CharacterStatsPopupData:
      .extends: TextPopupData
      .adds:
        m_flashValueStorage: CScriptedFlashValueStorage

    W3ItemSelectionPopupData:
      .extends: CObject
      .adds:
        targetInventory: CInventoryComponent
        filterTagsList: array<name>
        filterForbiddenTagsList: array<name>
        categoryFilterList: array<name>
        collectorTag: name
        targetItems: array<name>
        selectionMode: EItemSelectionPopupMode
        overrideQuestItemRestrictions: bool

    CR4ItemSelectionPopup:
      .extends: CR4PopupBase
      .adds:
        m_DataObject: W3ItemSelectionPopupData
        m_playerInv: W3GuiSelectItemComponent
        m_containerInv: W3GuiContainerInventoryComponent
        m_containerOwner: CGameplayEntity
        m_selectedItemCategory: int

    W3LootPopupData:
      .extends: CObject
      .adds:
        targetContainer: W3Container

    CR4LootPopup:
      .extends: CR4PopupBase
      .adds:
        KEY_LOOT_ITEM_LIST: string
        _container: W3Container
        m_fxSetWindowTitle: CScriptedFlashFunction
        m_fxSetSelectionIndex: CScriptedFlashFunction
        m_fxSetWindowScale: CScriptedFlashFunction
        m_fxResizeBackground: CScriptedFlashFunction
        m_indexToSelect: int
        safeLock: int
        inputContextSet: bool

    W3MessagePopupData:
      .extends: CObject
      .adds:
        actionsList: array<UserMessageActionData>
        titleText: string
        messageText: string
        messageId: int
        autoLocalize: bool
        messageType: EUserDialogButtons
        priority: int
        progress: float
        progressType: EUserMessageProgressType
        progressTag: name

    CR4MessagePopup:
      .extends: CR4PopupBase
      .adds:
        m_messagesQueue: array<W3MessagePopupData>
        m_isMessageShown: bool
        m_fxHideMessage: CScriptedFlashFunction
        m_fxPrepareMessageShow: CScriptedFlashFunction
        m_fxDisplayProgressBar: CScriptedFlashFunction

    W3NotificationData:
      .extends: CObject
      .adds:
        messageText: string
        duration: float
        queue: bool

    CR4OverlayPopup:
      .extends: CR4PopupBase
      .adds:
        m_InitDataObject: W3NotificationData
        m_fxShowNotification: CScriptedFlashFunction
        m_fxHideNotification: CScriptedFlashFunction
        m_fxClearNotificationsQueue: CScriptedFlashFunction
        m_fxShowLoadingIndicator: CScriptedFlashFunction
        m_fxHideLoadingIndicator: CScriptedFlashFunction
        m_fxShowSavingIndicator: CScriptedFlashFunction
        m_fxHideSavingIndicator: CScriptedFlashFunction
        m_fxAppendButton: CScriptedFlashFunction
        m_fxRemoveButton: CScriptedFlashFunction
        m_fxRemoveContextButtons: CScriptedFlashFunction
        m_fxUpdateButtons: CScriptedFlashFunction
        m_fxSetMouseCursorType: CScriptedFlashFunction
        m_fxShowMouseCursor: CScriptedFlashFunction
        m_fxShowSafeRect: CScriptedFlashFunction
        m_fxShowEP2Logo: CScriptedFlashFunction
        m_cursorRequested: int
        m_cursorHidden: bool

    CR4PopupBase:
      .extends: CR4Popup
      .adds:
        m_flashValueStorage: CScriptedFlashValueStorage
        m_flashModule: CScriptedFlashSprite
        m_fxSetArabicAligmentMode: CScriptedFlashFunction
        m_fxSwapAcceptCancel: CScriptedFlashFunction
        m_fxSetControllerType: CScriptedFlashFunction
        m_fxSetPlatform: CScriptedFlashFunction
        m_fxSetGamepadType: CScriptedFlashFunction
        m_fxLockControlScheme: CScriptedFlashFunction
        m_guiManager: CR4GuiManager

    CR4Test2Popup:
      .extends: CR4Popup

    CR4TestPopup:
      .extends: CR4Popup

    CR4TutorialPopup:
      .extends: CR4PopupBase
      .adds:
        m_DataObject: W3TutorialPopupData
        timeRemains: float
        removeOnTimer: bool
        enableGlossaryLink: bool
        hideCounter: int
        forcedhideCounter: int
        isVisible: bool
        m_fxPlayFeedbackAnim: CScriptedFlashFunction
        m_fxResetInput: CScriptedFlashFunction
        m_contextStored: bool

    W3TutorialPopupData:
      .extends: CObject
      .adds:
        posX: float
        posY: float
        messageTitle: string
        messageText: string
        imagePath: string
        fadeBackground: bool
        autosize: bool
        enableGlossoryLink: bool
        enableAcceptButton: bool
        canBeShownInMenus: bool
        blockInput: bool
        pauseGame: bool
        fullscreen: bool
        duration: float
        scriptTag: name
        menuRef: CR4TutorialPopup
        managerRef: CR4TutorialSystem
        closeRequested: bool
        highlightedAreas: array<TutorialHighlightedArea>

    W3GuiAddSocketsInventoryComponent:
      .extends: W3GuiPlayerInventoryComponent
      .adds:
        merchantInv: CInventoryComponent
        maxUpgradedItems: array<SItemUniqueId>

    W3GuiBaseInventoryComponent:
      .extends: none
      .adds:
        autoCleanNewMark: bool
        _inv: CInventoryComponent
        highlightedItems: array<name>
        ITEM_NEED_REPAIR_DISPLAY_VALUE: int

    W3CommonContainerInventoryComponent:
      .extends: W3GuiBaseInventoryComponent

    W3GuiTakeOnlyContainerInventoryComponent:
      .extends: W3CommonContainerInventoryComponent

    W3GuiContainerInventoryComponent:
      .extends: W3CommonContainerInventoryComponent
      .adds:
        dontShowEquipped: bool

    W3GuiDisassembleInventoryComponent:
      .extends: W3GuiPlayerInventoryComponent
      .adds:
        merchantInv: CInventoryComponent

    W3GuiEnchantingInventoryComponent:
      .extends: W3GuiBaseInventoryComponent
      .adds:
        REQUIRED_SLOTS_COUNTS: int

    W3GuiHorseInventoryComponent:
      .extends: W3GuiBaseInventoryComponent

    W3GuiItemSelectComponent:
      .extends: W3GuiPlayerInventoryComponent
      .adds:
        _filterData: W3ItemSelectMenuInitData

    W3GuiPaperdollInventoryComponent:
      .extends: W3GuiPlayerInventoryComponent
      .adds:
        previewSlots: array<bool>

    W3GuiPlayerInventoryComponent:
      .extends: W3GuiBaseInventoryComponent
      .adds:
        _shopInvCmp: W3GuiShopInventoryComponent
        _filterType: EInventoryFilterType
        _currentItemCategoryType: name
        stashMode: bool
        bPaperdoll: bool
        currentDefaultItemAction: EInventoryActionType
        ignorePosition: bool
        filterTagList: array<name>
        filterForbiddenTagList: array<name>
        overrideQuestItemFilters: bool
        previewItems: array<SItemUniqueId>
        dyePreviewSlots: array<SItemUniqueId>

    W3GuiPreparationInventoryComponent:
      .extends: W3GuiPlayerInventoryComponent
      .adds:
        _equippedFilter: bool
        _categoryFilter: bool
        _categoryFilterValue: EPreporationItemType

    W3GuiPreparationMutagensInventoryComponent:
      .extends: W3GuiPlayerInventoryComponent

    W3GuiPreparationOilsInventoryComponent:
      .extends: W3GuiPlayerInventoryComponent

    W3GuiPreparationPotionsAndBombsInventoryComponent:
      .extends: W3GuiPlayerInventoryComponent

    W3GuiRepairInventoryComponent:
      .extends: W3GuiBaseInventoryComponent
      .adds:
        merchantInv: CInventoryComponent
        masteryLevel: int
        repairSwords: bool
        repairArmors: bool

    W3GuiSelectItemComponent:
      .extends: W3GuiPlayerInventoryComponent

    W3GuiShopInventoryComponent:
      .extends: W3GuiBaseInventoryComponent

    W3GuiSocketsInventoryComponent:
      .extends: W3GuiPlayerInventoryComponent
      .adds:
        merchantInv: CInventoryComponent
        m_upgradeItem: SItemUniqueId
        m_useSocketsFilter: bool

    W3StandaloneDismantleComponent:
      .extends: W3GuiPlayerInventoryComponent

    W3TooltipComponent:
      .extends: none
      .adds:
        m_playerInv: CInventoryComponent
        m_itemInv: CInventoryComponent
        m_shopInv: CInventoryComponent
        m_flashValueStorage: CScriptedFlashValueStorage
        m_enchantmentManager: W3EnchantmentManager

    W3DestructSelfEntity:
      .extends: CGameplayEntity
      .adds:
        destructAfterDelay: float
        stopEffectDuration: float
        effectToStop: name

    CRandomFXEntity:
      .extends: CEntity
      .adds:
        fxName: array<name>
        intervalMin: float
        intervalMax: float
        fxTwiceInARow: bool
        soundEvent: string
        soundDelay: float
        fxIndex: int
        size: int
        interval: float

    CMoveSCPlayerIsRunning:
      .extends: CMoveSCScriptedCondition

    CMoveSCPlayerIsStrafing:
      .extends: CMoveSCScriptedCondition

    CMoveSCIsSmallCreature:
      .extends: CMoveSCScriptedCondition

    W3NPCBackground:
      .extends: CGameplayEntity
      .adds:
        work: EBackgroundNPCWork_Single
        parentPairedBackgroundNPCEntity: W3NPCBackgroundPair
        isWorkingSingle: bool

    W3NPCBackgroundNew:
      .extends: CEntity
      .adds:
        behaviorWorkNumber: int
        randomized: bool
        maxWorkNumber: int
        excludeIdle: bool

    W3NPCBackgroundPair:
      .extends: CGameplayEntity
      .adds:
        work: EBackgroundNPCWork_Paired
        entitiesToSpawn: array<SBackgroundPairSpawnedEntity>
        spawnedEntities: array<CEntity>
        currentAttachments: array<CEntity>
        slave: W3NPCBackground
        master: W3NPCBackground
        mountEvents: array<SMountEvent>
        masterAC: CAnimatedComponent
        slaveAC: CAnimatedComponent

    W3NPCBackgroundWoman:
      .extends: CGameplayEntity
      .adds:
        work: EBackgroundNPCWomanWork

    W3MerchantNPC:
      .extends: CNewNPC
      .adds:
        embeddedScenes: array<MerchantNPCEmbeddedScenes>
        lastDayOfInteraction: int
        questBonus: bool
        cacheMerchantMappin: bool
        craftingDisabled: bool
        invComp: CInventoryComponent

    W3MonsterHuntNPC:
      .extends: CNewNPC
      .adds:
        MONSTER_HUNT_TARGET_TAG: name
        bossBarOn: bool
        musicOn: bool
        displayBossBar: bool
        switchMusic: bool
        questFocusSoundOnSpawn: bool
        dontTagForAchievement: bool
        disableDismemberment: bool
        combatMusicStartEvent: string
        combatMusicStopEvent: string
        associatedInvestigationAreasTag: name
        investigationAreasProcessed: bool

    CAnimal:
      .extends: CNewNPC
      .adds:
        animalType: EAnimalType

    CDettlaffColumn:
      .extends: CNewNPC
      .adds:
        numberOfHits: int
        destroyCalled: bool
        foundEntity: CEntity
        construct: CActor
        summonedComp: W3SummonedEntityComponent
        percLife: float
        chunkLife: float
        lastHitTimestamp: float
        testedHitTimestamp: float
        requiredHits: int
        timeBetweenHits: float
        timeBetweenFireDamage: float
        effectOnTakeDamage: name
        timeToDestroy: float

    CDettlaffConstruct:
      .extends: CNewNPC
      .adds:
        numberOfHits: int
        destroyCalled: bool
        percLife: float
        chunkLife: float
        healthBarPerc: float
        lastHitTimestamp: float
        testedHitTimestamp: float
        l_temp: float
        timeBetweenHits: float
        timeBetweenFireDamage: float
        baseStat: EBaseCharacterStats
        requiredHits: int
        effectOnTakeDamage: name
        timeToDestroy: float

    W3FlyingWhale:
      .extends: CActor
      .adds:
        forcedAppearance: string

    CHitBasedNPC:
      .extends: CNewNPC
      .adds:
        hitsToDeath: int
        minTimeBetweenHits: float
        baseStat: EBaseCharacterStats
        chunkValue: float
        hitsTaken: int
        lastHitTimestamp: float
        wasInitialized: bool

    W3NightWraithIris:
      .extends: CNewNPC
      .adds:
        m_CurrentHealthSection: int
        m_ClosestPainting: CNode
        m_TargetPainting: W3IrisPainting
        m_Paintings: array<CNode>
        m_WaitingForSpawnEnd: bool

    W3Rat:
      .extends: CNewNPC
      .adds:
        hasCollision: bool

    CPhantomWeaponManager:
      .extends: none
      .adds:
        hitsToCharge: int
        timeToDischarge: float
        minVitalityPercToCharge: float
        vitalityPercLostOnDischarge: float
        hitCounter: int
        isWeaponCharged: bool
        itemId: SItemUniqueId
        inv: CInventoryComponent
        chargedLoopedFxName: name
        chargedSingleFxName: name

    PlayerAiming:
      .extends: none
      .adds:
        owner: CR4Player
        throwable: CThrowable
        aimType: EAimType
        throwPos: Vector
        sweptFriendly: CEntity
        sweptActors: array<CActor>
        tracePosFrom: Vector
        thrownBombImpactRadius: float
        aimedTarget: CActor
        collisionGroupsNames: array<name>

    CPlayerInput:
      .extends: none
      .adds:
        actionLocks: array<array<SInputActionLock>>
        totalCameraPresetChange: float
        potAction: SInputAction
        potPress: bool
        debugBlockSourceName: name
        holdFastMenuInvoked: bool
        potionUpperHeld: bool
        potionLowerHeld: bool
        potionModeHold: bool
        pressTimestamp: float
        DOUBLE_TAP_WINDOW: float
        processedSwordHold: bool
        lastMovementDoubleTapName: name

    CActionLockerByCounter:
      .extends: none
      .adds:
        lockingNum: int
        action: EInputActionBlock
        lockName: name

    CPlayerInteriorTracker:
      .extends: none
      .adds:
        sprintLocker: CActionLockerByCounter
        runLocker: CActionLockerByCounter
        currentInterior: CNode

    W3PlayerMode:
      .extends: none
      .adds:
        player: CPlayer
        currentMode: EPlayerMode
        safeMode: bool
        combatMode: bool
        combatDataComponent: CCombatDataComponent
        combatModeTimer: float
        combatModeDelay: float
        forceCombatMode: int
        combatModeBlockedActions: array<EInputActionBlock>
        safeModeBlockedActions: array<EInputActionBlock>

    W3PlayerTutorialInput:
      .extends: CPlayerInput

    WeaponHolster:
      .extends: none
      .adds:
        currentMeleeWeapon: EPlayerWeapon
        queuedMeleeWeapon: EPlayerWeapon
        isQueuedMeleeWeapon: bool
        ownerHandle: EntityHandle
        automaticUnholster: bool
        isMeleeWeaponReady: bool

    W3PlayerWitcher:
      .extends: CR4Player
      .adds:
        craftingSchematics: array<name>
        expandedCraftingCategories: array<name>
        craftingFilters: SCraftingFilters
        alchemyRecipes: array<name>
        expandedAlchemyCategories: array<name>
        alchemyFilters: SCraftingFilters
        expandedBestiaryCategories: array<name>
        booksRead: array<name>
        fastAttackCounter: int
        heavyAttackCounter: int
        isInFrenzy: bool
        hasRecentlyCountered: bool
        cannotUseUndyingSkill: bool
        amountOfSetPiecesEquipped: array<int>
        canSwitchFocusModeTarget: bool
        switchFocusModeTargetAllowed: bool
        signs: array<SWitcherSign>
        equippedSign: ESignType
        currentlyCastSign: ESignType
        signOwner: W3SignOwnerPlayer
        usedQuenInCombat: bool
        yrdenEntities: array<W3YrdenEntity>
        m_quenReappliedCount: int
        bDispalyHeavyAttackIndicator: bool
        bDisplayHeavyAttackFirstLevelTimer: bool
        specialAttackHeavyAllowed: bool
        companionNPCTag: name
        companionNPCTag2: name
        companionNPCIconPath: string
        companionNPCIconPath2: string
        itemSlots: array<SItemUniqueId>
        remainingBombThrowDelaySlot1: float
        remainingBombThrowDelaySlot2: float
        previouslyUsedBolt: SItemUniqueId
        questMarkedSelectedQuickslotItems: array<SSelectedQuickslotItem>
        tempLearnedSignSkills: array<SSimpleSkill>
        autoLevel: bool
        skillBonusPotionEffect: CBaseGameplayEffect
        levelManager: W3LevelManager
        reputationManager: W3Reputation
        medallionEntity: CEntityTemplate
        medallionController: W3MedallionController
        bShowRadialMenu: bool
        _HoldBeforeOpenRadialMenuTime: float
        MappinToHighlight: array<SHighlightMappin>
        horseManagerHandle: EntityHandle
        isInitialized: bool
        timeForPerk21: float
        invUpdateTransaction: bool
        mutation12IsOnCooldown: bool
        mutation11QuenEntity: W3QuenEntity
        storedInteractionPriority: EInteractionPriority
        selectedPotionSlotUpper: EEquipmentSlots
        selectedPotionSlotLower: EEquipmentSlots
        potionDoubleTapTimerRunning: bool
        potionDoubleTapSlotIsUpper: bool
        findActorTargetTimeStamp: float
        pcModeChanneledSignTimeStamp: float
        runewordInfusionType: ESignType
        savedQuenHealth: float
        savedQuenDuration: float
        clockMenu: CR4MeditationClockMenu
        waitTimeHour: int
        runeword10TriggerredOnFinisher: bool
        runeword12TriggerredOnFinisher: bool

    CR4LocomotionPlayerControllerScript:
      .extends: CR4LocomotionDirectControllerScript
      .adds:
        player: CR4Player
        angularInputSpeed: float
        worldMoveDirection: float
        localMoveDirection: float
        previousInputVector: Vector
        timerValue: float
        angularSpeed: float
        _inputLocoEnabled: bool
        _inputVecCurr: Vector
        _inputVecPrev: Vector
        _inputHeading180Curr: float
        _inputHeading180Prev: float
        _inputHeading180LastCached: float
        _inputMagCurr: float
        _inputMagPrev: float
        _inputMagDiffCurr: float
        _inputMagDiffPrev: float
        _inputMagLastCached: float
        speedSlowWalkingMax: float
        speedWalkingMax: float
        speedRunning: float
        speedSprinting: float
        speedSprintingWithPerk: float
        maxTerrainPitchToWalkUp: float
        prevPosition: Vector
        prevRotation: EulerAngles
        cachedMoveSpeed: float
        stoppedTimeStamp: float
        stopCheckEnabled: bool
        stoppedTimeStampDelta: float
        doubleTapEnabled: bool
        localMoveDirectionPrevFrame: float
        directionSwitchTimeStamp: float
        directionCenteredTimeStamp: float
        isCheckingCentered: bool
        isCheckingCommitToRightTurn: bool
        isCheckingCommitToLeftTurn: bool
        isTurningRight: bool
        isTurningLeft: bool
        commitToRightTurnTimeStamp: float
        commitToLeftTurnTimeStamp: float
        directionSwitchTimeStampDelta: float
        startRightTurnTimeStamp: float
        startLeftTurnTimeStamp: float
        useRightTurnTimeStamp: bool
        useLeftTurnTimeStamp: bool
        fastTurnEnabled: bool

    CR4LocomotionSwimToStop:
      .extends: CR4LocomotionDirectControllerScript
      .adds:
        player: CR4Player
        targetPoint: Vector
        closeEnough: bool

    CMoveTRGPlayerManualMovement:
      .extends: CMoveTRGScript
      .adds:
        currVelocity: float
        m_heading: float
        m_orientationWODump: float
        m_headingChangeVal: float
        m_headingHistoryTime: float
        m_headingHistory: array<SHeadingHistory>
        lastKnownPlayerHeading: float

    CBehTreeFocusModeAnimationTask:
      .extends: IBehTreeTask
      .adds:
        isReady: bool
        hitAnimation: name

    CBehTreeFocusModeAnimationTaskDef:
      .extends: IBehTreeTaskDefinition

    CBehTreeTaskFocusModeHandler:
      .extends: IBehTreeTask
      .adds:
        activate: bool

    CBehTreeTaskFocusModeHandlerDef:
      .extends: IBehTreeTaskDefinition

    CFocusModeCombatCamera_CurveDamp_MC:
      .extends: none
      .adds:
        distanceCurveName: name
        yawCurveName: name
        pitchCurveName: name
        fovCurveName: name
        desiredPitch: float
        autoTimeUpdate: bool
        distanceDamper: CurveDamper
        yawDamper: AngleCurveDamper
        pitchDamper: AngleCurveDamper
        fovDamper: CurveDamper
        distanceStart: float
        pitchStart: float
        yawStart: float
        position: Vector
        rotation: EulerAngles
        timeScale: float

    CFocusModeCombatCamera_CurveDamp_Rot_MC:
      .extends: CFocusModeCombatCamera_CurveDamp_MC
      .adds:
        rollCurveName: name
        posCurveName: name
        rollDamper: AngleCurveDamper
        posDamper: CurveDamper3d

    CFocusModeCombatCamera_CurveDamp_PC:
      .extends: none
      .adds:
        pivotCurveName: name
        autoTimeUpdate: bool
        pivotDamper: CurveDamper3d
        timeScale: float

    FocusModeCameraShotHelper:
      .extends: none
      .adds:
        headingOffset: float
        e: CNewNPC
        p: CPlayer
        initShot_yaw: float
        initShot_yawAlt: float
        initShot_yawA: float
        initShot_yawB: float
        initShot_yawC: float
        initShot_yawD: float
        initShot_number: int
        initShot_isPlayerMainChar: bool
        initShot_mainCharacter: CActor
        initShot_secCharacter: CActor
        initShot_cameraSecSide: bool
        ssShot_yaw: float
        ssShot_pitch: float
        ssShot_distance: float
        ssShot_pivot: Vector
        blendShot_started: bool
        blendShot_duration: float
        blendShot_timer: float
        blendShot_progress: float

    W3HorseCombatManager:
      .extends: W3VehicleCombatManager

    W3VehicleCombatManager:
      .extends: CEntity
      .adds:
        rider: CR4Player
        vehicle: CVehicleComponent
        isInCombatAction: bool
        wasBombReleased: bool

    W3AdvancedProjectile:
      .extends: CThrowable
      .adds:
        projSpeed: float
        projAngle: float
        projDMG: float
        projSilverDMG: float
        ignoreArmor: bool
        projEfect: EEffectType
        persistFxAfterCollision: bool
        dealDamageEvenIfDodging: bool
        ignore: bool
        isActive: bool
        collidedEntities: array<CGameplayEntity>
        lifeSpan: float

    W3BoulderProjectile:
      .extends: W3AdvancedProjectile
      .adds:
        initFxName: name
        onCollisionFxName: name
        spawnEntityTemplate: CEntityTemplate
        onCollisionAppearanceName: name
        projectileHitGround: bool

    W3TraceGroundProjectile:
      .extends: W3AdvancedProjectile
      .adds:
        samplingFreq: float
        effectName: name
        onRangedReachedDestroyAfter: float
        deactivateOnCollisionWithVictim: bool
        comp: CEffectDummyComponent

    W3SpawnEntityProjectile:
      .extends: W3TraceGroundProjectile
      .adds:
        entityTemplate: CEntityTemplate
        entity: CEntity

    W3ElementalIfrytProjectile:
      .extends: W3TraceGroundProjectile
      .adds:
        action: W3DamageAction

    W3EredinFrostProjectile:
      .extends: W3TraceGroundProjectile
      .adds:
        action: W3DamageAction

    W3ElementalDaoProjectile:
      .extends: W3TraceGroundProjectile
      .adds:
        action: W3DamageAction

    W3StoneProjectile:
      .extends: W3AdvancedProjectile
      .adds:
        initFxName: name
        onCollisionFxName: name
        stoneTemplate: CEntityTemplate
        action: W3DamageAction

    W3EnvironmentProjectile:
      .extends: W3AdvancedProjectile
      .adds:
        initFxName: name
        stopFxOnDeactivate: name
        onCollisionFxName: name
        ignoreVictimsWithTag: name
        action: W3DamageAction

    BeamProjectile:
      .extends: W3AdvancedProjectile
      .adds:
        beamFx: name
        pullEffectDuration: float

    WebLineProjectile:
      .extends: PoisonProjectile

    FakeProjectile:
      .extends: W3AdvancedProjectile

    PoisonProjectile:
      .extends: W3AdvancedProjectile
      .adds:
        initFxName: name
        onCollisionFxName: name
        spawnEntityOnGround: bool
        spawnEntityTemplate: CEntityTemplate
        projectileHitGround: bool

    SpawnMultipleEntitiesPoisonProjectile:
      .extends: PoisonProjectile
      .adds:
        numberOfSpawns: int
        minDistFromTarget: int
        maxDistFromTarget: int

    DebuffProjectile:
      .extends: W3AdvancedProjectile
      .adds:
        debuffType: EEffectType
        hitReactionType: EHitReactionType
        damageTypeName: name
        destroyQuen: bool
        customDuration: float
        initFxName: name
        onCollisionFxName: name
        specialFxOnVictimName: name
        applyDebuffIfNoDmgWasDealt: bool
        bounceOnVictimHit: bool
        signalDamageInstigatedEvent: bool
        destroyAfterFloat: float
        stopProjectileAfterCollision: bool
        sendGameplayEventToVicitm: name

    W3FireballProjectile:
      .extends: W3AdvancedProjectile
      .adds:
        initFxName: name
        onCollisionFxName: name
        spawnEntityTemplate: CEntityTemplate
        decreasePlayerDmgBy: float
        projectileHitGround: bool

    W3DracolizardFireball:
      .extends: W3FireballProjectile
      .adds:
        range: float
        burningDur: float
        destroyAfter: float
        surfaceFX: SFXSurfacePostParams

    W3MeteorProjectile_CreateMarkerEntityHelper:
      .extends: CCreateEntityHelper
      .adds:
        owner: W3MeteorProjectile

    W3MeteorProjectile:
      .extends: W3FireballProjectile
      .adds:
        explosionRadius: float
        markerEntityTemplate: CEntityTemplate
        destroyMarkerAfter: float
        markerEntity: CEntity

    W3IceMeteorProjectile:
      .extends: W3MeteorProjectile

    W3LightningStrikeProjectile:
      .extends: W3MeteorProjectile

    W3LightningBoltProjectile:
      .extends: W3AdvancedProjectile
      .adds:
        initFxName: name
        onCollisionFxName: name
        spawnEntityTemplate: CEntityTemplate
        projectileHitGround: bool

    W3IceSpearProjectile:
      .extends: W3AdvancedProjectile
      .adds:
        initFxName: name
        onCollisionFxName: name
        spawnEntityTemplate: CEntityTemplate
        customDuration: float
        onCollisionVictimFxName: name
        immediatelyStopVictimFX: bool
        projectileHitGround: bool

    W3SpawnMeteor:
      .extends: W3AdvancedProjectile
      .adds:
        initFxName: name
        onCollisionFxName: name
        onCollisionFxName2: name
        startFxName: name
        ent: CEntity
        projectileHitGround: bool
        playerPos: Vector
        projPos: Vector
        projSpawnPos: Vector

    W3AirDrainProjectile:
      .extends: W3AdvancedProjectile
      .adds:
        destructionEntity: CEntityTemplate
        markerEntityTemplate: CEntityTemplate
        AirToDrain: float
        initFxName: name
        onCollisionFxName: name
        onCollisionFxName2: name
        markerEntity: CEntity
        projectileHitGround: bool

    W3ArrowProjectile:
      .extends: W3AdvancedProjectile
      .adds:
        defaultTrail: name
        underwaterTrail: name
        boneName: name
        activeTrail: name
        shouldBeAttachedToVictim: bool
        isOnFire: bool
        isUnderwater: bool
        isBouncedArrow: bool
        isScheduledForDestruction: bool

    W3BaitProjectile:
      .extends: W3BoltProjectile
      .adds:
        foodSourceToGenerate: CEntityTemplate
        addScentToCollidedActors: bool
        attractionDuration: float
        m_BaitEntity: CEntity

    W3ExplosiveBolt:
      .extends: W3BoltProjectile
      .adds:
        explosionRange: float
        insideToxicClouds: array<W3ToxicCloud>

    W3ObjectProjectile:
      .extends: CProjectileTrajectory
      .adds:
        action: W3DamageAction
        owner: CActor

    W3BoltProjectile:
      .extends: W3ArrowProjectile
      .adds:
        dismemberOnKill: bool
        dodgeable: bool
        projectiles: array<W3BoltProjectile>
        targetPos: Vector
        crossbowId: SItemUniqueId
        collisionGroups: array<name>
        hitVictims: array<CActor>
        wasShotUnderWater: bool
        visibility: bool

    W3SnowballProjectile:
      .extends: W3AdvancedProjectile
      .adds:
        damageTypeName: name
        initFxName: name
        onCollisionFxName: name
        specialFxOnVictimName: name
        applyDebuffIfNoDmgWasDealt: bool

    CBooksMinigameManager:
      .extends: CGameplayEntity
      .adds:
        minigameWonFact: string
        bookSlotTags: array<name>
        bookTags: array<name>
        bookSlots: array<CBookMinigameSlot>
        books: array<CBookMinigameBook>

    CBookMinigameSlot:
      .extends: CGameplayEntity
      .adds:
        bookMinigameManagerTag: name
        correctBookId: int
        currentBook: CBookMinigameBook
        bookMinigameManager: CBooksMinigameManager

    CBookMinigameBook:
      .extends: CGameplayEntity
      .adds:
        bookId: int

    CFactAdderOnCollisionWithTag:
      .extends: CGameplayEntity
      .adds:
        factName: string
        tagToCollideWith: name

    CQuestCombatManagerBlock:
      .extends: IQuestCombatManagerBaseBlock
      .adds:
        combatStyle: CAINpcCombatStyle

    CQuestMonsterCombatManagerBlock:
      .extends: IQuestCombatManagerBaseBlock
      .adds:
        combatLogic: CAIMonsterCombatLogic

    W3QuestCond_EntityComponentEnabled_Listener:
      .extends: IGlobalEventScriptedListener
      .adds:
        condition: W3QuestCond_EntityComponentEnabled

    W3QuestCond_EntityComponentEnabled:
      .extends: CQuestScriptedCondition
      .adds:
        tag: name
        componentName: name
        inverted: bool
        entity: CEntity
        component: CComponent
        listener: W3QuestCond_EntityComponentEnabled_Listener

    W3QuestCond_EntityComponentExists_Listener:
      .extends: IGlobalEventScriptedListener
      .adds:
        condition: W3QuestCond_EntityComponentExists

    W3QuestCond_EntityComponentExists:
      .extends: CQuestScriptedCondition
      .adds:
        tag: name
        componentName: name
        entity: CEntity
        component: CComponent
        listener: W3QuestCond_EntityComponentExists_Listener

    W3QuestCond_A_closerToTargetThan_B_Listener:
      .extends: IGlobalEventScriptedListener
      .adds:
        condition: W3QuestCond_A_closerToTargetThan_B

    W3QuestCond_A_closerToTargetThan_B:
      .extends: CQuestScriptedCondition
      .adds:
        object_A_tag: name
        object_B_tag: name
        targetTag: name
        listener: W3QuestCond_A_closerToTargetThan_B_Listener
        object_A: CNode
        object_B: CNode
        target: CNode

    W3QuestCond_chosenLanguage:
      .extends: CQuestScriptedCondition
      .adds:
        ChoosenTextLanguage: ECheckedLanguage
        ChoosenSpeechLanguage: ECheckedLanguage
        checkFor: ELanguageCheckType

    W3QuestCond_DialogOrCutsceneFinished:
      .extends: CQuestScriptedCondition
      .adds:
        inverted: bool

    W3QuestCond_IsEffectActive_Listener:
      .extends: IGlobalEventScriptedListener
      .adds:
        condition: W3QuestCond_IsEffectActive

    W3QuestCond_IsEffectActive:
      .extends: CQuestScriptedCondition
      .adds:
        effectName: name
        entityTag: name
        inverted: bool
        entity: CEntity
        listener: W3QuestCond_IsEffectActive_Listener

    W3QuestCond_GameplayFact_Listener:
      .extends: IGlobalEventScriptedListener
      .adds:
        condition: W3QuestCond_GameplayFact

    W3QuestCond_GameplayFact:
      .extends: CQuestScriptedCondition
      .adds:
        gameplayFactId: string
        value: int
        comparator: ECompareOp
        isFulfilled: bool
        listener: W3QuestCond_GameplayFact_Listener

    W3QuestCond_IsDLCEnabled:
      .extends: CQuestScriptedCondition
      .adds:
        dlc: EQuestConditionDLCType
        invert: bool

    W3QuestCond_PlayerIsOnBoat:
      .extends: CQuestScriptedCondition
      .adds:
        inverted: bool

    W3QuestCond_IsRadialMenuOpened:
      .extends: CQuestScriptedCondition
      .adds:
        inverted: bool

    W3QuestCond_PlayerHasQuenActive:
      .extends: CQuestScriptedCondition
      .adds:
        inverted: bool

    W3QuestCond_PlayerInRunAnimation:
      .extends: CQuestScriptedCondition

    W3QuestCond_playerKnowsRecipe_Listener:
      .extends: IGlobalEventScriptedListener
      .adds:
        condition: W3QuestCond_playerKnowsRecipe

    W3QuestCond_playerKnowsRecipe:
      .extends: CQuestScriptedCondition
      .adds:
        recipeName: name
        isFulfilled: bool
        listener: W3QuestCond_playerKnowsRecipe_Listener

    W3QuestCond_playerKnowsSchematics_Listener:
      .extends: IGlobalEventScriptedListener
      .adds:
        condition: W3QuestCond_playerKnowsSchematics

    W3QuestCond_playerKnowsSchematics:
      .extends: CQuestScriptedCondition
      .adds:
        schematicsName: name
        isFulfilled: bool
        listener: W3QuestCond_playerKnowsSchematics_Listener

    W3QuestCond_PlayerLevel:
      .extends: CQuestScriptedCondition
      .adds:
        level: int
        comparator: ECompareOp
        useComparator: bool
        returnValue: bool

    W3QuestCond_PlayerSkillPoints:
      .extends: CQuestScriptedCondition
      .adds:
        freeSkillPoints: int
        comparator: ECompareOp

    W3QuestCond_ActorIsDespawned_Listener:
      .extends: IGlobalEventScriptedListener
      .adds:
        condition: W3QuestCond_ActorIsDespawned

    W3QuestCond_ActorIsDespawned:
      .extends: CQuestScriptedCondition
      .adds:
        actorTag: name
        actors: array<CActor>
        listener: W3QuestCond_ActorIsDespawned_Listener

    W3QuestCond_BookHasBeenRead_Listener:
      .extends: IGlobalEventScriptedListener
      .adds:
        condition: W3QuestCond_BookHasBeenRead

    W3QuestCond_BookHasBeenRead_Listener_Ext:
      .extends: IGlobalEventScriptedListener
      .adds:
        condition: W3QuestCond_BookHasBeenReadExt

    W3QuestCond_BookHasBeenRead:
      .extends: CQuestScriptedCondition
      .adds:
        bookName: name
        bookFactName: string
        isFulfilled: bool
        listener: W3QuestCond_BookHasBeenRead_Listener

    W3QuestCond_BookHasBeenReadExt:
      .extends: CQuestScriptedCondition
      .adds:
        bookName: SItemNameProperty
        bookFactName: string
        isFulfilled: bool
        listener: W3QuestCond_BookHasBeenRead_Listener_Ext

    W3QuestCond_CanSeePlayer_Listener:
      .extends: IGlobalEventScriptedListener
      .adds:
        condition: W3QuestCond_CanSeePlayer

    W3QuestCond_CanSeePlayer:
      .extends: CQuestScriptedCondition
      .adds:
        actorTag: name
        npc: CNewNPC
        listener: W3QuestCond_CanSeePlayer_Listener

    W3QuestCond_CheckBrazierPuzzleState:
      .extends: CQuestScriptedCondition
      .adds:
        lightList: array<name>
        lightsToTurnOn: array<int>
        componentList: array<CComponent>
        expectedState: array<bool>
        componentsFound: bool
        statesDefined: bool

    W3QuestCond_CheckLightState_Listener:
      .extends: IGlobalEventScriptedListener
      .adds:
        condition: W3QuestCond_CheckLightState

    W3QuestCond_CheckLightState:
      .extends: CQuestScriptedCondition
      .adds:
        lightSourceTag: name
        targetState: bool
        lightEntity: CEntity
        component: CGameplayLightComponent
        listener: W3QuestCond_CheckLightState_Listener

    W3QuestCond_Container_GlobalListener:
      .extends: IGlobalEventScriptedListener
      .adds:
        condition: W3QuestCond_Container

    W3QuestCond_Container_InventoryListener:
      .extends: IInventoryScriptedListener
      .adds:
        condition: W3QuestCond_Container

    W3QuestCond_Container:
      .extends: CQuestScriptedCondition
      .adds:
        containerTag: name
        contents: EContainerMode
        inventory: CInventoryComponent
        isFulfilled: bool
        globalListener: W3QuestCond_Container_GlobalListener
        inventoryListener: W3QuestCond_Container_InventoryListener

    W3QuestCond_DialogChoiceCondition:
      .extends: CQuestScriptedCondition
      .adds:
        dialogChoice: EDialogActionIcon
        onOptionSelected: bool

    W3QuestCond_PlayerHead:
      .extends: CQuestScriptedCondition
      .adds:
        headItemName: name
        inverted: bool

    W3QuestCond_IsGeraltShaved:
      .extends: CQuestScriptedCondition
      .adds:
        inverted: bool

    W3QuestCond_HudTimeOut_Listener:
      .extends: IGlobalEventScriptedListener
      .adds:
        condition: W3QuestCond_HudTimeOut

    W3QuestCond_HudTimeOut:
      .extends: CQuestScriptedCondition
      .adds:
        isFulfilled: bool
        listener: W3QuestCond_HudTimeOut_Listener

    W3QuestCond_IsStandardCampaign:
      .extends: CQuestScriptedCondition
      .adds:
        inverted: bool

    W3QuestCond_ItemAmmo_AmmoListener:
      .extends: IGlobalEventScriptedListener
      .adds:
        condition: W3QuestCond_ItemAmmo

    W3QuestCond_ItemAmmo_InventoryListener:
      .extends: IInventoryScriptedListener
      .adds:
        condition: W3QuestCond_ItemAmmo

    W3QuestCond_ItemAmmo:
      .extends: CQuestScriptedCondition
      .adds:
        itemName: name
        ammoQuantity: int
        comparator: ECompareOp
        isFulfilled: bool
        ammoListener: W3QuestCond_ItemAmmo_AmmoListener
        inventoryListener: W3QuestCond_ItemAmmo_InventoryListener

    W3QuestCond_IsItemEquipped_Listener:
      .extends: IGlobalEventScriptedListener
      .adds:
        condition: W3QuestCond_IsItemEquipped

    W3QuestCond_IsItemEquipped:
      .extends: CQuestScriptedCondition
      .adds:
        itemName: name
        categoryName: name
        inverted: bool
        isFulfilled: bool
        listener: W3QuestCond_IsItemEquipped_Listener

    W3QuestCond_IsItemQuantityMet_GlobalListener:
      .extends: IGlobalEventScriptedListener
      .adds:
        condition: W3QuestCond_IsItemQuantityMet

    W3QuestCond_IsItemQuantityMet_InventoryListener:
      .extends: IInventoryScriptedListener
      .adds:
        condition: W3QuestCond_IsItemQuantityMet

    W3QuestCond_IsItemQuantityMet:
      .extends: CQuestScriptedCondition
      .adds:
        itemName: name
        entityTag: name
        itemTag: name
        itemCategory: name
        comparator: ECompareOp
        count: int
        includeHorseInventory: bool
        ignoreTags: array<name>
        inventory: CInventoryComponent
        isFulfilled: bool
        isTrophy: bool
        globalListener: W3QuestCond_IsItemQuantityMet_GlobalListener
        inventoryListener: W3QuestCond_IsItemQuantityMet_InventoryListener

    W3QuestCond_ItemSelected:
      .extends: CQuestScriptedCondition
      .adds:
        itemName: name

    W3QuestCond_IsItemUsed_Listener:
      .extends: IGlobalEventScriptedListener
      .adds:
        condition: W3QuestCond_IsItemUsed

    W3QuestCond_IsItemUsed:
      .extends: CQuestScriptedCondition
      .adds:
        itemName: name
        factName: string
        isFulfilled: bool
        listener: W3QuestCond_IsItemUsed_Listener

    W3QuestCond_MutationsCanStartResearch:
      .extends: CQuestScriptedCondition

    W3QuestCond_MutationSystemIsEnabled:
      .extends: CQuestScriptedCondition

    W3QuestCond_NewGamePlusEnabled:
      .extends: CQuestScriptedCondition

    W3QuestCond_OilApplied_Listener:
      .extends: IGlobalEventScriptedListener
      .adds:
        condition: W3QuestCond_OilApplied

    W3QuestCond_OilApplied:
      .extends: CQuestScriptedCondition
      .adds:
        swordType: EQuestSword
        oilName: name
        isFulfilled: bool
        listener: W3QuestCond_OilApplied_Listener

    W3QuestCond_PlayerSkillLevel:
      .extends: CQuestScriptedCondition
      .adds:
        mode: EQuestPlayerSkillLevel
        skills: array<SQuestPlayerSkill>
        dialogAxiiLevel: int

    W3QuestCond_PlayerState:
      .extends: CQuestScriptedCondition
      .adds:
        stateName: name
        playerState: EQuestConditionPlayerState
        inverted: bool

    W3QuestCond_ReusableClueUsed_Listener:
      .extends: IGlobalEventScriptedListener
      .adds:
        condition: W3QuestCond_ReusableClueUsed

    W3QuestCond_ReusableClueUsed:
      .extends: CQuestScriptedCondition
      .adds:
        clueTag: name
        resetClue: bool
        leaveFacts: bool
        keepFocusHighlight: bool
        isFulfilled: bool
        listener: W3QuestCond_ReusableClueUsed_Listener

    W3QuestCond_SwitchState_Listener:
      .extends: IGlobalEventScriptedListener
      .adds:
        condition: W3QuestCond_SwitchState

    W3QuestCond_SwitchState:
      .extends: CQuestScriptedCondition
      .adds:
        switchTag: name
        stateToCheck: ESwitchStateCondition
        switchEntity: W3Switch
        listener: W3QuestCond_SwitchState_Listener

    W3QuestCond_TutorialMessagesEnabled:
      .extends: CQuestScriptedCondition
      .adds:
        inverted: bool

    W3QuestCond_TutorialIsInitialized:
      .extends: CQuestScriptedCondition

    W3QuestCond_TutorialSystemIsAvailable:
      .extends: CQuestScriptedCondition

    W3QuestCond_TutorialWasSeen:
      .extends: CQuestScriptedCondition
      .adds:
        tutorialScriptTag: name

    W3QuestCond_WasNoticeboardVisited:
      .extends: CQuestScriptedCondition
      .adds:
        entityName: name

    W3QuestCond_World:
      .extends: CQuestScriptedCondition
      .adds:
        currentArea: EAreaName

    W3QuestCond_ReplacerCondition:
      .extends: CQuestScriptedCondition
      .adds:
        replacerType: EPlayerReplacerType
        inverted: bool

    W3QuestCond_SelectedSign_Listener:
      .extends: IGlobalEventScriptedListener
      .adds:
        condition: W3QuestCond_SelectedSign

    W3QuestCond_SelectedSign:
      .extends: CQuestScriptedCondition
      .adds:
        signType: ESignType
        isFulfilled: bool
        listener: W3QuestCond_SelectedSign_Listener
        factsNames: array<string>

    W3QuestCond_UIAnyMenuOpened:
      .extends: CQuestScriptedCondition
      .adds:
        inverted: bool

    W3QuestCond_UncoveredBoatFTPoint_Listener:
      .extends: IGlobalEventScriptedListener
      .adds:
        condition: W3QuestCond_UncoveredBoatFTPoint

    W3QuestCond_UncoveredBoatFTPoint:
      .extends: CQuestScriptedCondition
      .adds:
        isFulfilled: bool
        listener: W3QuestCond_UncoveredBoatFTPoint_Listener

    W3QuestCond_UsedFocus:
      .extends: CQuestScriptedCondition
      .adds:
        inverted: bool
        duration: float
        timeStart: float

    W3QuestCond_UsedMedallion:
      .extends: CQuestScriptedCondition
      .adds:
        medallion: W3MedallionController

    W3QuestCond_WasMeditating_Listener:
      .extends: IGlobalEventScriptedListener
      .adds:
        condition: W3QuestCond_WasMeditating

    W3QuestCond_WasMeditating:
      .extends: CQuestScriptedCondition
      .adds:
        hours: int
        comparator: ECompareOp
        dayPart: EDayPart
        meditateToHour: bool
        immediateTest: bool
        isFulfilled: bool
        listener: W3QuestCond_WasMeditating_Listener
        factsNames: array<string>

    W3QuestCond_BaseStat:
      .extends: CQCActorScriptedCondition
      .adds:
        stat: EBaseCharacterStats
        condition: ECompareOp
        percents: int

    W3QuestCond_HasModifier:
      .extends: CQCActorScriptedCondition
      .adds:
        modifier: EEffectType
        timePercents: int
        condition: ECompareOp
        modifierParam1: name
        sourceName: name
        sourceNamePartialSearch: bool

    W3QuestCond_HasWeaponDrawn:
      .extends: CQCActorScriptedCondition
      .adds:
        treatFistsAsWeapon: bool
        ofSpecificCategory: name
        ofSpecificName: name

    W3QuestCond_Health:
      .extends: CQCActorScriptedCondition
      .adds:
        condition: ECompareOp
        percents: int

    W3QuestCond_IsFalling:
      .extends: CQCActorScriptedCondition

    W3QuestCond_IsInState:
      .extends: CQCActorScriptedCondition
      .adds:
        actorState: EQuestNPCStates

    W3QuestCond_IsInVehicle:
      .extends: CQCActorScriptedCondition
      .adds:
        vehicleType: EVehicleType
        vehicleTag: name
        anyVehicle: bool

    W3QuestCond_IsInWater:
      .extends: CQCActorScriptedCondition

    W3QuestCond_IsOnGround:
      .extends: CQCActorScriptedCondition

    W3QuestCond_IsTargetOf_Listener:
      .extends: IGlobalEventScriptedListener
      .adds:
        condition: W3QuestCond_IsTargetOf

    W3QuestCond_IsTargetOf:
      .extends: CQCActorScriptedCondition
      .adds:
        attackerTag: name
        attacker: CActor
        listener: W3QuestCond_IsTargetOf_Listener

    W3QuestCond_ActorRotationToNode_Listener:
      .extends: IGlobalEventScriptedListener
      .adds:
        condition: W3QuestCond_ActorRotationToNode

    W3QuestCond_ActorRotationToNode:
      .extends: CQCActorScriptedCondition
      .adds:
        condition: ECompareOp
        degrees: float
        targetTag: name
        targetNode: CNode
        listener: W3QuestCond_ActorRotationToNode_Listener

    W3QuestCond_ActorSpeed:
      .extends: CQCActorScriptedCondition
      .adds:
        condition: ECompareOp
        speed: float

    W3QuestCond_gameDifficulty:
      .extends: CQuestScriptedCondition
      .adds:
        targetDifficulty: EDifficultyMode

    W3QuestCond_HorsePanic:
      .extends: CQCActorScriptedCondition
      .adds:
        condition: ECompareOp
        percents: int

    W3QuestCond_NpcStance:
      .extends: CQCActorScriptedCondition
      .adds:
        stance: ENpcStance

    W3QuestCond_GlobalAttitude:
      .extends: CQuestScriptedCondition
      .adds:
        srcGroup: name
        dstGroup: name
        attitude: EAIAttitude

    W3TutorialManagerUIHandler:
      .extends: none
      .adds:
        listeners: array<SUITutorial>
        lastOpenedMenu: name
        isMenuOpened: bool
        postponedUnregisteredMenu: name

    W3ReplacerCiri:
      .extends: W3Replacer
      .adds:
        isInitialized: bool
        ciriPhantoms: array<W3CiriPhantom>
        bloodExplode: CEntityTemplate
        rageEffectEnabled: bool
        tempIsCollisionDisabled: bool
        collidedEnemies: array<CActor>
        slidingToNewPosition: bool
        cameraDesiredHeading: Vector

    W3CiriPhantom:
      .extends: CGameplayEntity
      .adds:
        owner: CActor
        target: CActor
        rotationDamper: EulerAnglesSpringDamper

    W3ReplacerCommoner:
      .extends: W3Replacer

    W3Replacer:
      .extends: CR4Player
      .adds:
        level: int

    W3ReplacerChanger:
      .extends: W3GameplayTrigger
      .adds:
        replacerTemplate: String
        recentlyChanged: bool

    CPayFactBasedStorySceneChoiceAction:
      .extends: CStorySceneChoiceLineActionScripted
      .adds:
        valueFact: string

    CPayStorySceneChoiceAction:
      .extends: CStorySceneChoiceLineActionScripted
      .adds:
        money: int
        dontGrantExp: bool
        actionIcon: EDialogActionIcon

    CAxiiStorySceneChoiceAction:
      .extends: CStorySceneChoiceLineActionScripted
      .adds:
        level: int

    CArmWrestlingStorySceneChoiceAction:
      .extends: CStorySceneChoiceLineActionScripted

    CDiceStorySceneChoiceAction:
      .extends: CStorySceneChoiceLineActionScripted

    CDrinkingStorySceneChoiceAction:
      .extends: CStorySceneChoiceLineActionScripted

    CDaggerThrowingStorySceneChoiceAction:
      .extends: CStorySceneChoiceLineActionScripted

    CShopStorySceneChoiceAction:
      .extends: CStorySceneChoiceLineActionScripted

    CBlacksmithStorySceneChoiceAction:
      .extends: CStorySceneChoiceLineActionScripted

    CArmorerStorySceneChoiceAction:
      .extends: CStorySceneChoiceLineActionScripted

    CRunesmithStorySceneChoiceAction:
      .extends: CStorySceneChoiceLineActionScripted

    CTeacherStorySceneChoiceAction:
      .extends: CStorySceneChoiceLineActionScripted

    CExitStorySceneChoiceAction:
      .extends: CStorySceneChoiceLineActionScripted

    CFastTravelStorySceneChoiceAction:
      .extends: CStorySceneChoiceLineActionScriptedContentGuard

    CHairCutSceneChoiceAction:
      .extends: CStorySceneChoiceLineActionScripted
      .adds:
        money: int

    CShavingSceneChoiceAction:
      .extends: CStorySceneChoiceLineActionScripted
      .adds:
        money: int

    CGameCardsChoiceAction:
      .extends: CStorySceneChoiceLineActionScripted

    CMonsterContractChoiceAction:
      .extends: CStorySceneChoiceLineActionScripted

    CBetChoiceAction:
      .extends: CStorySceneChoiceLineActionScripted

    CGetBackChoiceAction:
      .extends: CStorySceneChoiceLineActionScripted

    CHouseChoiceAction:
      .extends: CStorySceneChoiceLineActionScripted

    CAuctionSceneChoiceAction:
      .extends: CStorySceneChoiceLineActionScripted
      .adds:
        money: int

    W3BackgroundAnimatedEntity:
      .extends: CGameplayEntity
      .adds:
        backgroundEntityData: array<SBackgroundEntityData>
        parentEntity: CEntityTemplate
        maxSpeed: float
        acceleration: float
        maxAngleSpeed: float
        waypointDistance: float
        waypoints: array<EntityHandle>
        loopMotion: bool
        startAtSpawn: bool
        maxAngleSpeedThreshold: float
        angleAcceleration: float
        stoppingDistance: float
        endPositionError: float
        angleSpeed: float
        speedScale: float
        previousAngleDistance: float
        nodes: array<CNode>
        i: int
        size: int
        currTargetIndex: int
        canMove: bool
        entity: CEntity
        entityToAttach: CEntity
        currTarget: CNode
        position: Vector
        targetPos: Vector
        currPosition: Vector
        direction: Vector
        toTarget: Vector
        angleDistancePlus: float
        angleDistanceMinus: float
        angleDistance: float
        distanceToTarget: float
        rotation: EulerAngles
        desiredRotation: EulerAngles
        speed: float
        shouldStop: bool
        maxCurrentAngleSpeed: float
        maxCurrentSpeed: float

    W3BackgroundAnimatedEntityTrigger:
      .extends: CGameplayEntity
      .adds:
        movingEntitySpawnerHandle: EntityHandle
        movingEntitySpawner: W3BackgroundAnimatedEntity

    W3ChangeCombatStageTrigger:
      .extends: CGameplayEntity
      .adds:
        npc: CNewNPC

    W3ShepherdGreetingTrigger:
      .extends: CGameplayEntity
      .adds:
        greeted: bool
        actors: array<CActor>

    W3DestructionTrigger:
      .extends: CGameplayEntity
      .adds:
        destructionEntityTag: name

    W3FoodDispenser:
      .extends: CGameplayEntity
      .adds:
        foodEntity: CEntityTemplate
        maxSpawnedFood: int
        spawnedFood: array<CEntity>

    Damper:
      .extends: none
      .adds:
        destValue: float
        currValue: float
        dampFactor: float

    CInputAxisDoubleTap:
      .extends: none
      .adds:
        m_ActionN: name
        m_ThresholdUnpressF: float
        m_ThresholdPressF: float
        m_TimeThresholdF: float
        m_IsActivatedB: bool
        m_PressedNowB: bool
        m_UnpressedNowB: bool
        m_TimeF: float
        m_LastTimesUnpressFArr: array<float>
        m_LastTimesPressFArr: array<float>

    AngleConstDamper:
      .extends: ConstDamper

    AngleDeltaDamper:
      .extends: DeltaDamper

    AngleSpringDamper:
      .extends: SpringDamper

    ConstDamper:
      .extends: none
      .adds:
        destValue: float
        currValue: float
        deltaValue: float

    ConstVectorDamper:
      .extends: none
      .adds:
        destValue: Vector
        currValue: Vector
        deltaValue: float

    CurveDamper:
      .extends: none
      .adds:
        curve: CCurve
        time: float
        duration: float
        startValue: float
        currValue: float
        destValue: float

    AngleCurveDamper:
      .extends: CurveDamper

    CurveDamper3d:
      .extends: none
      .adds:
        damperX: CurveDamper
        damperY: CurveDamper
        damperZ: CurveDamper

    DeltaDamper:
      .extends: none
      .adds:
        destValue: float
        currValue: float
        dampFactor: float

    DeltaAngularDamper:
      .extends: none
      .adds:
        destValue: float
        currValue: float
        dampFactor: float

    SpringDamper:
      .extends: none
      .adds:
        destValue: float
        currValue: float
        velValue: float
        smoothTime: float

    VectorSpringDamper:
      .extends: none
      .adds:
        destValue: Vector
        currValue: Vector
        velValue: Vector
        smoothTime: float

    EulerAnglesSpringDamper:
      .extends: none
      .adds:
        destValue: EulerAngles
        currValue: EulerAngles
        velValue: EulerAngles
        smoothTime: float

    SailDamper:
      .extends: none
      .adds:
        destValue: float
        currValue: float
        dampFactor: float
        edgeValue: float

    CBoatPassengerInteractionComponent:
      .extends: CInteractionComponent

    W3HorseManager:
      .extends: CPeristentEntity
      .adds:
        horseAbilities: array<name>
        itemSlots: array<SItemUniqueId>
        wasSpawned: bool
        horseMode: EHorseMode

